

* Inbox
** TODO Ubuntuで子フレーム上のカラーピッカーでドラッグが出来ない原因を探る
edraw-track-draggingでswitch-frameイベントを無視するようにしたら回避できた。

が、なぜ子フレームをクリックするとswitch-frameが来るのかよく分からない。
すでにswitchした後の筈なのにクリックのたびにswitch-frameが来る。
原因が知りたい。

また、今回の回避策には何か弊害は無いだろうか。

** TODO svg要素内にコメントがある場合に生じる問題を調査する
libxml-parse-xml-regionはコメントをcommentという名前の要素として出力する。

認知しない要素はある程度許容するように作ってあるが、一部で問題も起きうるとは思っていた。思いつくだけでも:
- bodyの下の図形数のカウントとUNDO等に使うインデックス値の関係(不用意にコメントを無視すると問題が生じうるので注意)
- 図形の重ね順操作

元々defsが入る可能性は考えていた(が、実際には入らないので落ちなければいいやくらいに思っていた)。commentという要素があるものと考えて、shape関連以外の要素があることを考慮すべき。

** TODO edraw-mode/バッファをkillするときに未保存があったら確認する
** TODO edraw-mode/ビューを常にウィンドウサイズに合わせる
やりたいけど実際の所ちょっと重い。環境によっては不安定になる可能性もある？

** TODO 手書きツール/ドラッグ中に外に出た場合の挙動を改善する
外に出ても続いている方がいいのではないか？
外に出た場合にどうする？
- 打ち切る
- ビューの外に線を描く
- ビュー内に線を描く(ビューの境界に沿って直線を描く)

** TODO マウスカーソルのちらつきを抑えるためにmouse-faceをもっと抑制する
org-fold-core-styleが'overlaysのときに対応していない。必要？

** TODO エディタ全体を一つのSVGで描いた方がいいのではないか
現在はツールバーをbefore-stringで表示しているが、全てを一つのSVG、一つのdisplayプロパティで表示した方がいいのではないか。
右下にリサイズつまみを表示したい。
SVGの中にSVGを入れ子にすれば不可能では無いはず。マウスの座標もそれに合わせて計算できる。
上にツールバーを表示することさえ出来る。
もちろん分離できるように作っておくに越したことはない。

** TODO 画像ツールで別のディレクトリの画像を指定したときの改善
librsvgの仕様で基準ディレクトリ下以外のファイルは参照できない。
画像ツールで別のディレクトリにある画像を指定した場合は、何らかの対策をしたい。
- エラーで止める。
- 同じディレクトリにコピーするか尋ねる。
- Base64で埋め込む。
現在は一応警告を出すようにしてある。

** TODO 毎フレームimage-flushすべき?
毎フレームの画像記述子はキャッシュされているのだろうか。
画像を参照している場合、その画像が変化(内容が変化したり、存在自体が無くなったり)した場合に、同じ画像記述子でも表示すべき結果は変わってくる。
もしキャッシュが使われてしまうと問題がある。
テストして調べるべき。

** TODO 二つの画像を選択して右クリックからHrefを変更しようとするとエラー
edraw-multiple-shapesに対するedraw-edit-hrefが実装されていないから。
しかし、fillとかと同じようにedraw-properties-holderに対して実装すべき？
いや、edraw-properties-holderに対してedraw-edit-fillがあること自体がおかしいような気もするけど。

** TODO ?キーでツールのヘルプを表示する
** TODO パスに矢印を付けるキーを割り当てたい
~p m s a~ (property marker start arrow) さすがにダメだよね？

** TODO 選択図形に対する操作はedraw-multiple-shapesを介すべき?
「選択された図形」といった図形のリストはいったんedraw-multiple-shapesに保持させて、それを操作する方が良い。選択図形以外でも複数の図形を一度に操作したいことはあるはずなので。

操作メソッドはlistを引数に取るよりはedraw-multiple-shapesを引数に取った方が方が明確になると思う。(list edraw-shape)のような限定ができないので。

次のメソッドが対象。

- [X] edraw-translate-selected
- +edraw-scale-selected+
- +edraw-rotate-selected+
- [X] edraw-transform-selected
- [X] edraw-group-selected-shapes
- [X] edraw-ungroup-selected-shapes
- [ ] edraw-delete-selected
- [ ] edraw-bring-selected-to-front
- [ ] edraw-bring-selected-forward
- [ ] edraw-send-selected-backward
- [ ] edraw-send-selected-to-back
- [ ] edraw-editor-copy-selected-shapes
- [ ] edraw-editor-cut-selected-shapes
- [ ] edraw-editor-duplicate-selected-shapes

このうちいくつかは実行後に図形が削除されることに注意。

ところで(shape list)を取るメソッドはundoをまとめなくて良いのだろうか。

正直そこまで積極的に必要というわけでもないが……。

** TODO 選択済み図形に対するメニュー項目の「選択」を何か別のものにする
「選択解除」にしたい。さもなくばメニュー項目を消すべき。

** TODO SVGのルート直下を直接編集できるようにする
現在は ~<g id="edraw-body">~ 内に限定されている。<svg>直下を直接編集できるようになれば、他のツールで生成したSVGを手直しするのに使える場合もあるかもしれない。svgの中にsvgを入れることが出来るので、不可能では無いはず。

ただし、現在との互換性を維持する必要はあるので、最悪モードを切り替えるような仕組みが必要。

defsもsvgルートの直下にあるので、これを(奥行きの処理などで)適切に無視する必要がある。

SVG読み込み時にルート直下のdefs以外を#edraw-bodyへ移動してしまった方が楽なのかもしれないが。そのような動作をするインポートコマンドを作るという手もある。

** TODO shape毎に変形モードを持たせられるようにする
shape毎にどのような方式で変形するかを決められるように出来たら便利かもしれない。パスやグループ内の座標を維持したい場合は、そのshapeだけtransformプロパティを使うように設定できる。SVG内では ~edraw-data-transform-method=~ のような属性で記録すれば良い。

** TODO 図形にidプロパティを追加する
作成したSVGを他から利用するときに明示的なidが決められると便利だから。
複製するときは削除しなければならない。プロパティとすべきか分からない。
edrawが必要とするidはdata-edraw-idとして既に存在していて、これはユーザーが関与できないエディタ専用のIDという位置づけ。

** TODO グループの子孫を直接編集できるようにする
モード切替等で、#edraw-body直下よりも下の階層にあるshapeを直接選択、操作出来るようにする。

** TODO 点接続/テキスト等の接着位置を微調整する機能を追加する
** TODO 点接続/形が変わらない図形の変更では点接続を更新しないようにする
無駄なので。
edraw-on-shape-changedに何か形が変わらない変更であることが分かるようなヒントを追加する。

全ての変更時に毎回座標の再計算をすべきではない。幸いedraw-move sptは同じ座標なら何もしないが、それでも変更タイプを見て再計算するか判断すべき。そうは言っても現実にはなかなか難しい。プロパティ値の変更はプロパティの種類によって異なる。edraw-on-shape-changedに形状の変化かどうかのヒントを付けるべき。AABB再計算なんかにも利用できるかもしれない。

実際にはZオーダーや色の変更くらいしか無いと思う。

- ★(edraw-on-shape-changed shape 'shape-z-order)
- ▲(edraw-on-shape-changed shape 'shape-properties)の一部 区別する仕組みが必要

** TODO 点接続/パスのdプロパティが直接変化したときの点接続の削除

edraw-delete-pointでunglueしているが、それ以外の場所で点が削除される場合を考慮していない。
とりあえずedraw-set-propertyで直接書き替えるようなケースが考えられる。
その他にある？

** TODO 点接続/おそらくUNDOで戻らないケースがある
座標をUNDOしたときに接続点が更新されて補正されてしまうので。
循環しているケースは特に怪しい。
循環しているケースは正しい点に移動しないので、戻したときに同じ点に戻らないのでは？

[[edraw:data=H4sIAAtlcWQAA52T7WrCMBSGb6XEPwptmq9+RIyw/Rwdu4baJG3RJdJmVu9+ma5bRQbOAwkk4Zz3OS8nq/5QB0MrXSNAkiIQNKqtGycAI/5wUF3fWiMAhhgEx/ed6QVonNsv43gYBjhQaLs6Jgih2BcC61WnKvd3vaMAfj+dd93udgLMtNYg6F1nt0oAY40CQSsFULIrh2hTVtu6sx9GgiBer+rpk5Unr7cvXfOTPuOcj8Wibwg2Kl1q+/xXQjDM09/IQpIxmE5vihyFzEPK0pXRRXBvW+OiyhrjW/SmeCee5mixfHt+mZe6wlpt+OIq4wtWU5wypC/8j8DiBEFOf4OFOMkgnQYuqMfFBN2o00oSL8/vbmTEXTzMS9IEsqmXHpjmV+6mtGCEhCS/3+CxkVuDZVpqxeXmYWDKKMymdiYhQfza4azACIX0HxMxYt0Cj7NyBo5rv/zPWX8CdUfKFogDAAA=]]

UNDO時には接続の更新を抑制するような仕組みがあればよい。

** TODO 点接続/コネクターツールを追加する
** TODO 点接続/辺からの距離を調整する機能を追加する
** TODO 点接続/接続する位置を角度で設定できるようにする
アンカーポイントをドラッグしたときにOBJDIRに切り替える。
ツール側で行う。

** TODO 点接続/使われていない内部IDを削除する
今のところpoint-connection-referrersが空なら消して良いはず。
** TODO 点接続/正しい位置に移動しない場合がある
次図の一番右。更新の順番の問題？

[[edraw:data=H4sIAMwGg2QAA61VwW6jMBT8FeReEimAbQyBKkRKLpV2u9vzHgk2YJXgCNyS7tfvA4eWhK7URkECkgd+M29mnKya19xqJddFjHyGkVUImRc6Rl735VXUjVRVjIhDkHXcl1UTo0Lrw73rtm3rtJ6j6tylGGMXGqH1qhap/n+/Y4zg+tZfM1mWMbrLsgxZja7Vs4hRpSqBLMljJHidtPYuSZ/zWr1UHFnuepWPHyn+BniHRBfvy++iKBqa2ScSbEAyvWH9rwAvKMOPhOFFCER4ohPbNO3ap56Po1SkPaIoS3loxAXBE3VOaUrhvRTGIhg6pTAZCeBDDRXa3d/MfQRxULLSdqqqCpQCbUHQzWa7nWHHt+Cc3z9tf8wGDvOeRK/p5ww4N2DkBEaMyD2JDrsT/SREMDKDTccOdpkXkiDqEa9RFUKwoF7kRONj+UjDicqfSTDDZvKBxnxCkONA8EREZ7500vdDnklPLlgw78OKC+/OZf2uTwOna33yvu8Ti4LAJx69EpFRgxh+GTBjgUd3fnJ1MLxo6fh4dAT99mOMXpYJxc64gr0v52aQZb7YzGxiagPzaZZY5rOE0GySJUZCZ+mbOFE/cKg/3cw3TdDAxCRIi6O2MgXLsmQvSwD882I9KF1IAOrrjfwLWCREVveunVRpoeoY7SXn5Yf7lFLzO4CN22Dx+unnyu3WnFCGjWOe3gr0EuWGswzJ7Wb5/TCguDmc8Nez/gen7B41yQYAAA==]]

** TODO ドキュメントのトリミング機能を追加する
上下左右にどの程度余白を残すかを指定して、それに合うように切り抜く。
マウスドラッグによる切り抜き機能が既にあるので必要性は低い。

** TODO SHIFT+ドラッグで矩形をリサイズするときの原点を対角点にすべき
現状はドラッグするアンカーポイントの元の座標が原点になっている。
しかしその点から45度単位でリサイズするのは何か違和感がある。
おそらくドラッグするアンカーポイントの対角にある点が原点になって、そこから45度単位で移動すべき。
問題はselectツールでの一般的なアンカーポイントの移動であるということ。selectツールはどうやってSHIFT+移動の原点を決めるべきだろうか。rect, ellipse, image, g、つまりshape-with-rect-boundaryはいずれもそのような動作になるべき。

** TODO modifiedフラグの制御を厳密にする
現在次のような問題がある。
- UNDOを考慮していない。
- Previewによる変化でフラグが立ってしまう。

** TODO マニピュレータ機構を追加する

- 選択済みオブジェクトのように機能する。
- 任意のタイミングで一つだけ追加できる。主にツールやコマンドによって追加される。
  例:
  - 複数オブジェクトが選択されたとき追加され、解除されたときに削除される。
  - 変形コマンドが実行されたとき。
- マウスイベントはマニピュレータが優先的に処理する。
- マニピュレータがあるときは選択済みオブジェクト、アンカー、ハンドルは操作できない(?)

ある種のモードなのだろうか。モーダルであるべきか否か。

** TODO 別ファイルの内容をインポートする機能を追加する
別ファイルの#edraw-bodyの中身を現在のドキュメントに追加する。
#edraw-defsも何とかして更新すべき。

** TODO ズーム時にズーム倍率の逆数ピクセル数でスナップする

ピクセル以下のスナップをどうするか。

現在はグリッドを非表示にしているときでもピクセルにスナップしている。つまり図形作成や変形時に整数座標以外は指定出来ないようになっている。(点や図形をピックアップするときは正確な座標が必要なのでスナップしていない)

この仕様は切りの悪い座標値が無くなり計算誤差を防ぎ、SVGテキストが簡潔で小さくなる等の効果がある。また、高DPI環境では自動スケーリングによってエディタが常に非整数倍に拡大されており、マウスの入力座標が(ズームしていないときでも)整数にならない(整数座標がマウスで入力できない)という問題への対策でもある。

が、アイコンなど非常に小さな絵を描いているときは1ピクセル未満の座標が欲しくなる場合がある。もちろんグリッド間隔を1px未満にしたり、数値入力で平行移動したりすれば指定出来るが、グリッドが無いときでもズーム時にマウスで小数座標が指定出来ても良いのではないか。

解決策の案:

- 設定で一時的にピクセルスナップをOFFに出来るようにする
- +グリッド表示間隔とスナップ間隔を分けて1ピクセル以下のスナップ間隔を指定出来るようにする+ (←既に1ピクセル以下のグリッド間隔は実現した。問題はグリッドを表示していないときの挙動)
- ズーム拡大率の逆数間隔(2倍ズームなら0.5px間隔、4倍ズームなら0.25px間隔)にスナップする(自動スケーリングの影響を受けないこと)

ピクセルスナップをOFFにするのは高解像度環境かどうかで操作性が変わってしまうので避けたい。

+常にズーム拡大率の逆数間隔でスナップするのは、1ピクセル単位でスナップして欲しい時に困る気もする。+ (←それはグリッド間隔の指定でやれば良いのでは？)

+結局何らかの設定で小数単位グリッドスナップを行えるようにするしかないのではないか。+

やるなら、グリッド非表示の時はズーム倍率の逆数のピクセル数でスナップするのが良さそう。1px単位固定というのも魅力的だけど、それがやりたければグリッド間隔を1pxにすべき。

逆にズームアウトしていたらどうするのだろう。0.5倍の時は2px単位にすべき？　そうでなければ高解像度環境で整数値とは言え不規則な座標値になってしまいそうだけど。

1.5倍ズームの場合は0.666666666667ピクセル単位でスナップするの？　マジで？　まぁ、でも他にしようがない。ただ、edraw-grid-roundでは剰余を取っているので大きな座標で誤差が問題になるかもしれない((mod 10000 0.666666666667)=0.6666666616665555だから気にするほどでも無い？)。別な計算方法はある？

もしスナップを改良するなら edraw-snap-xy を修正すること。

** TODO 設定/デフォルトプロパティ設定をdefcustomにしたい
-userという変数を作って、変更時に本番変数に反映させるのはどうか。
もちろんプロパティ値がnilの場合はプロパティを削除する。
無指定の物は-initialという定数のものを採用する。

** TODO 設定/デフォルトプロパティ値は種類毎に持つべきでは無い？
カスタムシェイプツールでpath以外(rectやellipse)にも同一の属性を適用したくなる。
とは言えrectツールではstrokeを入れたくないし、pathではfillを入れたくない。
ひょっとして図形種類毎では無くツール毎にデフォルト値を持つべきなのでは？
とは言えやはりtextは同一視できないんじゃない？
カスタムシェイプにtextなんて入れることがある？

** TODO 変形/GUI変形時に代替マウスポインターが消えることがある
Corfuによるinvisibleな子フレームがあると、その上では正しい座標が来なくなる。
~(make-frame-invisible frame t)~ しただけでは完全には消えていないらしい。
幸いドラッグ中は問題ない。

frame上の座標から無理矢理変換してくれば対応できないことも無いかもしれないが難しい。
edraw-color-picker-insert-color等の子フレームは(-1000,-1000)へ飛ばすことで回避した。

** TODO 変形/ローカル座標系変形機能を追加する
図形のtransformプロパティ適用前の座標系で、平行移動、伸縮、回転できるようにする。
transform-methodのような設定を追加すべきか、あるいは、コマンドを追加したり、コマンド内でのオプションにするか。

** TODO 変形/変形方式の設定方法を変える
メニューのあちこちに同じ設定に対する項目があるのは何かおかしい。
それらメニュー項目にある変形だけでなく、アンカーポイントのドラッグによる変形にも影響がある。
かといってどうしたら使い勝手が良いのかよく分からない。
メインメニューの直下に独立してあるべき？
** TODO 変形/変形方式にanchor points優先オートを追加する
現状ではtransform-methodが'autoの場合、transformプロパティが存在していたら一律transformプロパティに追加する形で変形する。

rect等(edraw-shape-with-rect-boundaryを継承したクラス)では回転にtransformが必要で、textではスケーリングにもtransformが必要なので、そのためにtransformを使うのは仕方が無い。

しかしtransformが設定されていても、transformを使わずに平行移動はできる。rect等の場合はスケーリングもできる。

** TODO 変形/変形時のtransformプロパティ使用を最小化すべきか考える
rect, ellipse, circle, imageは回転以外であればtransformを使う必要は無い。
textは回転とスケーリング以外(平行移動のみ)であればtransformを使う必要は無い。

edraw-transformメソッドは回転成分(textの場合はスケーリング成分も)にのみtransformプロパティを使用し、平行移動はxやyの移動によって表現すべきだろうか。

すでにtransformプロパティが使用されていても、平行移動はxやyを移動することで実現すべきだろうか。

scaleが0のときを考慮に入れるべきだろうか。

** TODO 変形/左右上下反転コマンドを追加する
ドキュメント全体と選択図形と図形単体で。
-1倍しても良いけど、簡単に反転できると良い。
dtfh dtfvとか?
要らないかも。
** TODO 変形/skewに対応する
interactive-transformにおいては、skew-h-angle, skew-v-angleを追加して対応する。
hとvは対等。
回転の前にskewする。
指定出来るのは-90～90度。ただし、hとvの合計が90度になると直線状になる。

** TODO 変形/GUI変形を一時キーマップか編集ツールにする
read-eventループだとキー割り当てをカスタマイズできない。

問題は変形中に他のコマンドから状態を変えられてしまうこと。
対処方法案:
- 防止する。
- 検出し追従する。
- 検出し中断する。

mouse.el内のmouse-drag-lineではset-transient-mapを使っている。一時マップが終わるときにtrack-mouseを戻している。

** TODO 変形/matrix以外のtransformプロパティを正しく保持する
現在は何でもmatrixに変換してしまうので、指定しづらかったり精度が失われてしまう。

また、プロパティエディタのUIも、markerのようにサブ項目が操作できればなお良い。
横の拡大率だけ入力したいのに、現状だとそれは行列の意味を知っていないと難しい。

** TODO 変形/接着されている図形のGUI変形で枠線が図とずれる
接着されている図形の変形を禁止しても良いが、枠線を接着された位置に合わせても良い。

** TODO 座標を表示する機能を追加する
何らかの方法で座標が知りたい場合がある。
問題はEmacsではモーションイベントを積極的に使いづらい所。
** TODO テキスト/スタイルシートを考慮する
テキストの様々な設定はstyle属性でも設定できる。正しい境界矩形を計算するには、style属性も考慮しなければならない。
またその際親からの継承も考慮すべき。これはstyleに限らないが。
** TODO テキスト/複数行になるとtext-decorationが機能しない
[[edraw:data=H4sIAHUN/WQAA42Sv07DMBDGX8U65jZ/ytBWTVeegTEkTmI1tSvHbVKmumJrF4RAQmKgC6AysCIGXsaV6GNwSaMKIaAMsXK6u+/73dm9bBKTYpjyzINEqVHXsvI8b+atppCx5dq2bWEF7Eq6Rcr44KdCp9PpWFUWSM5ClXjQattAEsriRHnguBhMqMyY4Bg1Hej3JA0UKTzAzLQ6f21koQc0lH7eOPODQSzFmIdAMiXFgHrABadAIpamHhxFUQTE6vfir00inKKfooUi5dEIaSCkryoWlKISwWlFcYxuiFSa1oKu68Kuy+dBIqQHmfKlwrzgqpGxcyRw2nUY+UOWoszpmJwIlbAA+kZfmfnS6JfN62y7wp97oy+NfjT61szmPauUrtkOOf7F/j+acsT2fkS0zUY+J0HqZ3j9lfxOrc5v3pYV8rPRazNfGP2EvGXLoU4SopFDh+X4a6PvjF58gzd6+XGx2j7cGH1d7ed9v5CdQb0YK8YPX2D/E5VqM5upAgAA]]

※エクスポートすると両方ともアンダーラインが引かれるのでlibrsvgのバグ？

** TODO テキスト/行間を広げたい
その他テキストに関する設定がもっと欲しい。
** TODO テキスト/より良いテキストサイズの推測
Emacsの window-text-pixel-size で比率を求めてはどうか。

#+begin_src elisp
(let ((string (propertize "abcdefghijklmnopqrstuvwxyz"
                          'face
                          '(:family "Arial" :width "normal" :height 100))))
  ;; From string-pixel-width implementation
  (with-current-buffer (get-buffer-create " *string-pixel-width*")
    ;; `display-line-numbers-mode' is enabled in internal buffers
    ;; that breaks width calculation, so need to disable (bug#59311)
    (when (bound-and-true-p display-line-numbers-mode)
      (display-line-numbers-mode -1))
    (setq-local line-spacing 0)
    (delete-region (point-min) (point-max))
    (insert string)
    (buffer-text-pixel-size nil nil t)))
#+end_src

** TODO パス編集/アンカーポイントの複数選択・移動機能を追加する
図形を調整するときに無いと不便。

** TODO パス編集/無駄なCをLにする機能
[[*変形/GUI変形時にマウスの位置に操作種類記号を表示する][変形/GUI変形時にマウスの位置に操作種類記号を表示する]]のために図形を書いた後、無駄なCをLにするのが大変だった。
どこかのタイミングで無駄なCをLにすべきだが、どうしたらよいのだろうか。
理想的には、編集中に不要になった時点で即Lにすべきだ。
ただ、それはインデックス番号の関係で問題があったのでは無かったか。
回避策はありそうなものだが、どうだろう(アンカー番号とハンドル番号を分ける)。

** TODO パス編集/pathはできるだけd全体をUNDOしないようにする
「@todo Avoid using edraw-push-undo-path-d-change?」の部分。
d全体をUNDOデータにすると実際にアンドゥしたときに全てのポイントが無効になり、選択状態を全て解除しなければならなくなるなどの弊害がある。
例えばポイントを追加したら、ポイントを削除するUNDOデータを登録すれば済むはず。ポイントの識別はインデックス番号で十分。
注意点:
- 選択状態の追跡部分は注意が必要。現在のedraw-on-selected-shape-changedは shape-path-data タイプの変更で deselectしているので。点を削除したら点をdeselectしなければならないはず。
- パスデータはLからCへ暗黙的に変換される場合がある。これが行われるとインデックス番号がずれてしまう場合がある。そもそもCからLにはどうやっても戻らないのでデータも戻らない。結局dを戻した方が簡単かもしれない。

[2023-05-30 Tue]追記:
[[elisp-function:edraw-create-forward-handle]]と[[elisp-function:edraw-create-backward-handle]]はできればUNDOでポイントが無効にならないようにしたい。なぜなら、ハンドルをドラッグするときに使用しており、UNDOで無効になるせいで再取得を余儀なくされているから(see: [[elisp-function:edraw-drag-handle-on-click-anchor]]、edraw-on-down-mouse-1(edraw-editor-tool-path)。

** TODO パス編集/UNDOしたときに-forward-handle-pointが失われるのを何とかする
edraw-move-nth-pointで指定indexのポイントが見つかれない問題として表面化する。

ドラッグでアンカーを追加したときに((edraw-on-down-mouse-1 ((tool edraw-editor-tool-path)...)...)で)、次が呼ばれる。
- edraw-add-anchor-point
- edraw-create-forward-handle
- edraw-create-backward-handle
- edraw-move-with-opposite-handle-symmetry-on-transformed

もう一度同じようにアンカーを追加したとして

- edraw-add-anchor-point
- edraw-create-forward-handle
- edraw-create-backward-handle
- edraw-move-with-opposite-handle-symmetry-on-transformed

これをUNDOして、もう一回UNDOしたときに、1回目のedraw-move-with-opposite-handle-symmetry-on-transformedに対するUNDOは正しく動作しない。2回目のedraw-add-anchor-pointに対するUNDOはdを復元するが-forward-handle-pointまでは復元しないから、-forward-handle-pointに対する移動をUNDOできない。

現在はedraw-move-nth-pointで見つからなかったときに単に無視している。
dプロパティを復元する方式だとどうしても-forward-handle-pointは戻らない。

現状次の三つは全てUNDOでdを復元する。
- edraw-add-anchor-point
- edraw-create-forward-handle
- edraw-create-backward-handle

なので、これらをdプロパティUNDOをしないように改変すれば良い。

しかし話はそれほど簡単では無く、LをCに暗黙的に変換してしまう問題にも対処しなければならない。ちゃんとLに戻さないと番号がずれるしパスデータも変わってしまう。ちゃんとできるならポイントオブジェクトが無効にならないので良い。

それが出来ないならd復元時に-forward-handle-pointも復元するのが良いかもしれない。
edraw-push-undo-propertiesでdを保存するときに追加の処理を入れる感じ。
edraw-set-propertiesで復元するのでは無く、専用のシリアライズデータ形式で保存・復元したらどうか。そうすれば数値の文字列化による誤差も回避できる。

** TODO パス編集/パスなどの辺をドラッグできるようにする？
** TODO パス編集/既存パスからの継続は選択中のパスに限定しない方が良い？
** TODO パス編集/パスの始点を移動しようとして閉じてしまうミスを防げないか
** TODO パス編集/edraw-path-cmdに-backward-handle-pointタイプ(bhp)を追加する
reverseはfhpをbhpに変換する。
** TODO パス編集/cmdlistを複数のMやZに対応させる
- M .. L ..... Z M .. L ..... Z のように単純に閉パスが二つあるだけのケース。
- M .. L ..... Z L ..... Z L ..... Z のような書き方も出来る。一つのMを三つの閉パスが共有している形。

path-cmdはともかく、path-pointは前後のアンカーやハンドルの取得、削除、追加等様々な処理が正しく動かなければならない。Mを指しているときは、そのMの次がどこになるのかpath-point自身が持たなければならない。

** TODO パス編集/pathが1点以下になって見えなくなったらどうするか考える
rectやellipse、textにもそういった問題はある。
検出してshapeを消すべき。

** TODO gタグのshape descriptor変換についての問題
edraw-shape-descriptor-from-svg-element-without-editor関数にgタグに特化した処理がある。子孫の要素を再帰的にshape descriptorへ変換するためのもの。ここはこれでいいのだろうか。

将来的に <g data-edraw-type="edraw-complex-shape">...</g> のようなものを作るかもしれない。その際に子孫をshape descriptorとして保存する必要があるのだろうか。 edraw-shape-types の :create-element やその後にプロパティ設定で子孫の内容を生成すべきなんじゃないだろうか。

このshape descriptorにするところは問題ないのかもしれない。しかし、shape descriptorからshapeオブジェクトを作るところ(edraw-shape-from-shape-descriptor)では問題が生じる。子孫に対してもshapeオブジェクトを生成してしまう。

gタイプのみ子孫をshape descriptorに入れるべきで、それ以外では入れるべきでは無いのだろうか。しかし、Shape Pickerに登録したときに絵が出てこなくなってしまう。

子孫に対してオブジェクトを生成してしまうことが問題であれば、そうしないように生成することも出来なくはない。edraw-shape-typesに子孫展開の抑止フラグを追加するとか。

また、Shape Pickerが問題なのであれば、基本的にSVG文字列で処理すれば良いだけのような気もする。しかしコピーしたときはshape descriptorなのでその時点で情報が落ちてしまったらどうしようもない。

そもそもshape-descriptorという仕組みがあまり良くなかったのかもしれない。全図形はSVG文字列との相互変換が出来ることが前提なのだから、それで十分だったのかもしれない。

とりあえず ~(eq (dom-tag element) 'g)~ から (~(eq (edraw-shape-type-from-element element) 'g)~ へ変更しておいた。新しい図形タイプでg要素を使い、再帰的に処理したい場合は、何か対策をする。

** TODO shape-descriptorの不要な属性を削除する
あまりに冗長なので。デフォルトで埋めないので大丈夫だとは思うけど要確認。

** TODO テキストエディタでSVGを直接編集できるようにする
最終手段用。
中身の無いgを選択して消す方法が無いので(中身の無いgを消す機能があっても良いけど)。
非グラフィカル環境でリンクの中身を書き替えるのにも使えるかも。

edrawリンクのdata-file相互変換機能があれば十分かも？　dataリンクをfileリンクに変換してファイルを編集しdataリンクに戻せば良い。

** TODO 見えない要素を一括で消す機能を追加する
中身の無いgを消すのは困難。「次のshape」を使えば出来ないことは無いけど。
同様に中身の無いpathも消したい。
その他の形状は迷うところ。一応座標があるので選択は出来る。

** TODO グラデーションエディタを作る
** TODO デフォルト値を何度も設定しなくて良くなる機能
** TODO edraw-svg-printは本物のtopやcommentという名前のタグがあったら困る
本当にtopやcommentという名前を持つタグがSVGに追加されたら困るという話。
まぁ、仕方ないよね。どちらかと言えばlibxml-parseの問題。
ただ、topの方は関数を分ければ対処可能。ルートがtopかsvgと分かっている場所は専用の関数を呼ぶべき。もしくはトップ以外と分かっているところはedraw-svg-print-nodeみたいにするか。

edraw-svg-printの意味がちょっと曖昧になっている。svg要素をprintする関数なのか、汎用的なSVG仕様定義要素をprintする関数なのか。現在は再帰で呼び出しているのだから後者と考えざるを得ない。でも後者ならtopを特別扱いするのは良くない。

** TODO 色/カラーピッカーに固定のカラーパレットが欲しいかも？
特定の色集合を保持し続けられるようなやつ。
ファイルとの読み書きも出来ると良い。
どうやって変更する？　右クリックしてメニューを出して「変更」とか？
いや、パレット項目をクリックするとその色がピッカーの現在の選択色になると同時に選択マークが付いて、その状態でピッカーやrecent colorsで色を選ぶとそのパレット項目の色がそれに変わるようにする。もう一度パレット項目をクリックすると単に選択を解除するだけ。キャンセルでその変更は記録しない。OKでパレットの変更を記録。

** TODO 色/edraw-color-picker-replace-color-atは可能な限り元の記法を尊重する
元の記法を認識して、極力それに合わせるようにする。
rgbaはもはやrgbの別名。それにカンマでなく空白で区切っても良い。
[[https://developer.mozilla.org/ja/docs/Web/CSS/color_value/rgb][rgb() - CSS: カスケーディングスタイルシート | MDN]]
カンマの後のスペースまで認識するかは悩み所。
形式を認識する関数が必要。

** TODO 色/HSL等の別の表色系に対応する
** TODO オブジェクトを一覧から選んで選択できるようにする
** TODO オブジェクトを一覧から選んでプロパティエディタを開けるようにする
** TODO ソース/defgenericをどうするか
defgenericは全部に必要？ どこに書くべき？
** TODO ORG/ファイル名を付けていないOrgバッファでimage要素が表示できない
仕組みを知っていればそりゃそうだろうとしか言いようが無いけど……。
デフォルトのbase-uriはbuffer-file-nameなので。

edraw-modeはファイル名を付けるまでdefault-directoryを使うようにした。

[[*edrawコマンドで作ったバッファで画像ツールで挿入した画像が表示されない][edrawコマンドで作ったバッファで画像ツールで挿入した画像が表示されない]]

org-modeでもそうする？(そんな使い方する人どれだけいるの?)

それともedraw-editor側でそうする？(それは良くない気がする)

** TODO ORG/org-modeでODTへのエクスポートに対応する
** TODO ORG/個別のedrawリンクにHTML属性値を指定出来るようにする
~[[edraw:html-attr-width=400;html-attr-alt=Title;file=example.edraw-svg]]~ のような形式？
それともhtml-attr=で一つにまとめる？
** TODO 表示改善/パスUIのハンドルや点が見づらいのを何とかする
ストローク色に応じて色を変えられないか。
グリッドを mix-blend-mode: difference にしたら激重だったので、そのやり方は避けたいかも。

** TODO 表示改善/選択中オブジェクトのアウトラインに線を入れる
** TODO カスタムシェイプ/貼り付け前に縮尺を指定できるようにする
あらかじめ大きさを指定したい。
問題はUI。ツールオプションを指定するGUIは可能か？
ドラッグで大きさが変えられるようになったので必要性が薄くなってはいる。

** TODO カスタムシェイプ/図形の一部の寸法を維持したい
例えば次の図形を登録したとして、左の二点、中央の三点、右の二点はその形を維持したい。

[[edraw:data=H4sIAB3X3mQAA3VQwZKDIAz9FSa9bgWt42hHvHjej3ArIqOFDrLF/v1G1K2H3QN5vORB8lJOT0m8al3P4ZIwIL1Qsncc4oU8hZ2U0ciiGMh8H/XEoXfucaXUex/5S2SspAljjOJHm+Q6j0oPfwnjoihoqEJVWnFzZOaAfV4h/juGajmI1jb+/NXcBmnNt26BTM6aQXDQRgsgnRpHDqeu64DQqpTHR6Z9Yb9H43qCyc+UfeSsxpgxkr1jvd6xY4BQr+MtiZDuUB/YUsuDEpewsCQ7QL2z/Bdyts+6zr26OG/e07etE+4qWKESD263+gFOZ/yNrAEAAA==]]

ラベルの折り返し部分や二重線も同じような問題がある。
何か拘束条件を設定できればいいのだけど。
いっそのこと図形を生成する関数を設定してしまうというのも手だけど。

** TODO シェイプピッカー/ドラッグ&ドロップできるようにする
範囲選択したentryをドラッグして別の場所へ移動できるようにする。

** TODO シェイプピッカー/markerを使った図形の表示を改善する
矢印などのmarkerが表示されない。defsをSVG文字列に含めていないから。

edraw-shape-descriptor-to-svg-element にダミーのdefrefsを使っているので、そこに何か定義が入ったらそれもコピーしてはどうか？

** TODO シェイプピッカー/org-modeファイルをピッカーに出来るようにする
edraw-org-shape-picker-minor-modeが必要？

** TODO シェイプピッカー/開閉状態を維持する
最低限エディタ使用中はバッファをkillしないようにするだけでも違う。
理想的には開閉状態を保存・復帰すべき。
** TODO シェイプピッカー/シェイプはセクションの先頭部分にだけにする
現在はセクションの下にシェイプとセクションが好きな順番に配置できる。
しかし、セクションの後にシェイプを配置するとそのシェイプがセクションの中にあるのか外にあるのか分かりづらい。org-modeやoutline-modeのように、子セクションとエントリーの中身を完全に分離すべき。
** TODO プロパティエディタ/ウィンドウの高さを設定できるようにする
高さが低いフレームで使っている場合、プロパティエディタが邪魔で作図に支障がある。
自動でやるなら、ウィンドウの高さから画像の高さを差し引いて、残りをプロパティエディタの高さにすべき。もちろん小さくなりすぎないように何行かは確実に残す。
ウィンドウの高さがあまり無いのであれば、そもそも分割で表示すべきでは無い。フレーム一杯にプロパティエディタを開いて、調整したら閉じるような使い方をすべき。

** TODO プロパティエディタ/連続変更でも操作の区切りでUNDOを分割する
同じプロパティに対する変更でも、ある程度の区切りで別のUNDOデータを生成した方が良い。
- 連続するドラッグ (ドラッグ1回毎にするか、連続するドラッグはまとめるか)
- 連続するホイール (ホイール上下の間は同じUNDO)
- 連続する数値入力 (理想的には、フィールドからフォーカスを外したら別のUNDOに)
- 色変更ボタン (迷うところ)
- choiceボタン (1回の変更毎にUNDOデータを作るべき)
ドラッグやホイールはlast-commandでチェックできるが、その他は難しい。

** TODO プロパティエディタ/エラーチェックを強化する
** TODO DOMツリーの文字列化は変更のあったサブツリーのみに限定する
** TODO パスの内外判定、パス全体(全セグメント一括)のAABBチェック
をした方が良いのでは？　速いし誤判定防止になる。
** TODO パスの内外判定、線のつなぎ目ですり抜けるケースがまだあると思う
** TODO dom.el/svg.elの代わりを作る
- dom.elは兄弟や親へリンクが無いので効率が悪い。いろんな関数の引数にいちいち親・祖先ノードが必要になってコードが見づらくなるし、いちいち探索処理が走る。
- svg.elの要素を作る関数の一部は正直dom-nodeで直接作った方が簡単。
- svg.elのグラデーションサポートは中途半端。
- svg-printは属性やテキストをエスケープしていない。
- svg-printにフィルタ関数を指定したい。-edraw-で始まるクラスを持つ要素を消したい。
- 親を隠し属性で持たせても良い。
** TODO edraw-path-cmdlist系をパスクラスに置き換える
edraw-path-cmdlist系はSVGパスコマンドの仕様に合わせすぎた気がする。
もっと抽象的なパスクラス(cmdlist相当)、パスセグメントクラス(cmd相当)を作った方が良かったかもしれない。パスセグメントはL、C、(可能なら)Aの線を表現する。cmdはMとかZがあって純粋にパスセグメントに相当しないから気持ち悪い。
SVGパスデータは複数のMが書ける(複数のサブパスを持てる)のが頭痛の種だけど、それは複数のパスオブジェクトに分割して表現するとか。
まぁ、結局どっちで書いても等価だし今更なんだけど。
** TODO el-easydrawをEmacs26に対応させる
次のあたりを修正すれば動くっぽい。
- (require 'seq)
- (require 'subr-x) when-let, if-let等
- svg-node関数を使わないようにする
ただ、Emacs26の時代はlibrsvgのバージョンも古いのであえて対応しない方が良いかも。

* Finished
** DONE パスの内外判定、直線のつなぎ目ですり抜けがある
   CLOSED: [2021-08-16 Mon 21:53]
** DONE オブジェクトを右クリックでコンテキストメニューを出す
   CLOSED: [2021-08-16 Mon 21:53]
** DONE オブジェクトを削除できるようにする
   CLOSED: [2021-08-16 Mon 23:34]
** DONE オブジェクトの前後順序変更機能
   CLOSED: [2021-08-16 Mon 23:33]
** DONE オブジェクトの属性を変更できるようにする
   CLOSED: [2021-08-17 Tue 23:16]
** DONE 矩形属性変更機能 (ストローク、フィル、角丸)
   CLOSED: [2021-08-17 Tue 23:17]
** DONE 楕円属性変更機能 (ストローク、フィル、xy半径)
   CLOSED: [2021-08-17 Tue 23:17]
** DONE パス属性変更機能 (ストローク、フィル)
   CLOSED: [2021-08-17 Tue 23:17]
** DONE テキスト属性変更機能 (フォント、等々)
   CLOSED: [2021-08-17 Tue 23:17]
** DONE パスのアンカー移動時に制御点も移動する
   CLOSED: [2021-08-18 Wed 12:17]
** DONE 後ろのセグメントのハンドルを前のアンカーより優先する
   CLOSED: [2021-08-18 Wed 12:17]
** DONE グリッドON/OFF機能
   CLOSED: [2021-08-18 Wed 12:18]
** DONE ツールバーにメインメニューボタンを付ける
   CLOSED: [2021-08-18 Wed 13:38]
** DONE カンバスサイズ変更機能
   CLOSED: [2021-08-18 Wed 17:19]
** DONE 背景指定機能(指定色、透明)
   CLOSED: [2021-08-18 Wed 17:19]
** DONE グリッド間隔設定機能
   CLOSED: [2021-08-18 Wed 17:20]
** DONE デフォルトフォント設定機能
   CLOSED: [2021-08-20 Fri 01:36]
** DONE 選択ツールを追加する
   CLOSED: [2021-08-20 Fri 01:37]
** DONE 既存の矩形や楕円を再編集できるようにする
   CLOSED: [2021-08-20 Fri 01:36]
** DONE 既存のテキストの位置を再編集できるようにする
   CLOSED: [2021-08-20 Fri 01:36]
** DONE オブジェクトを選択できるようにする
   CLOSED: [2021-08-20 Fri 04:20]
- 選択したオブジェクトはアウトラインに細い線を入れ、コントロールポイントを表示して分かるようにする。
- ドラッグで選択・移動する。複数候補がある場合は、選択中のものがあればそれを使い、選択中のものが無い場合は一番上を選択する。そして移動する。重なり選択メニューを出してしまうと移動できなくなってしまうので。
- 選択中に表示されるコントロールポイントをドラッグした場合、リシェイプを行う。
  - 矩形の場合、四隅がコントロールポイント。矩形の位置幅高さが変わる。
  - 楕円の場合、四隅がコントロールポイント。楕円の位置半径が変わる。
  - パスの場合、各アンカーポイントがコントロールポイント。アンカーの位置が変わる。

** DONE アンカーポイントを選択できるようにする
   CLOSED: [2021-08-21 Sat 06:15]
** DONE 既存のパスを再編集できるようにする
   CLOSED: [2021-08-21 Sat 06:17]
** DONE パスデータのA以外のコマンドに対応する
   CLOSED: [2021-08-21 Sat 19:13]
edraw-path-cmdlist-from-dで全部LとCに変換する。
** DONE パスポイントの移動はグリッドの交点へスナップさせる
   CLOSED: [2021-08-22 Sun 19:33]
** DONE 選択状態をエディタの状態へ引き上げる
   CLOSED: [2021-08-22 Sun 19:33]
選択ツールはあくまでエディタオブジェクトの状態を変更するだけ。
パスツールはアンカーを追加するたびに選択状態を更新する？。

** DONE パスツールにおいてアンカーを右クリックでコンテキストメニューを出す
   CLOSED: [2021-08-22 Sun 19:33]
** DONE 全クリア機能
   CLOSED: [2021-08-24 Tue 03:35]

** DONE shapeクラスを作る
   CLOSED: [2021-08-23 Mon 03:25]
- [X] pathのcmdlistはオブジェクトが管理する
- [X] 要素に対する変更は全ていったんshapeクラスを通す

** DONE 各ツールは選択状態を正しく制御する
   CLOSED: [2021-08-23 Mon 06:53]
矩形、楕円、テキスト各ツールは図形生成直前に選択を解除し、生成した図形を選択する。

** DONE パスツールを使いやすくする
   CLOSED: [2021-08-23 Mon 17:16]
- [X] アンカーと同一点のハンドルは表示しないし選択できないようにする。
- [X] アンカーのハンドルを消せるようにする。アンカーと同一点にする。可能ならLに置き換える。
- [X] アンカーのハンドルを表示できるようにする。仮のポイントにハンドルを追加する。必要に応じてCに置き換える。→スムーズ化機能
- [X] 点対称の位置にあるハンドルは一緒に動かす。

** DONE クリックでハンドルを選択できるようにする
   CLOSED: [2021-08-23 Mon 17:17]
ハンドル選択中はそのハンドルだけを単体で動かせる。
アンカー選択中は直線状のハンドルは直線状を維持する。
** DONE パスツールにおいてアンカーを左クリックで選択する
   CLOSED: [2021-08-23 Mon 18:33]
ただし選択アンカーがどこになろうと続きからパスを伸ばせること。
** DONE edraw-editor-toolとedraw-editor-tool-selectのmouse-3は同じ？
   CLOSED: [2021-08-23 Mon 19:08]
なので消す。
** DONE shape-point-pathはd属性の変更をshape-pathへ依頼すべき
   CLOSED: [2021-08-24 Tue 00:07]
** DONE 矩形や楕円の辺にも制御点を付ける
   CLOSED: [2021-08-24 Tue 00:07]
** DONE shape-pointオブジェクトができるだけ無効にならないようにする
   CLOSED: [2021-08-24 Tue 00:32]
- 矩形や楕円はshape毎に一つのrectを参照するべき。というかshape毎に四つのpointオブジェクトを固定すべき。
- テキストは一つのpointオブジェクトを共有するべき。
- パスは別途調査する。

** DONE 変更通知/最低限の変更通知の仕組みを作る
   CLOSED: [2021-08-24 Tue 03:18]
- 全ての変更時にedraw-on-shape-changedメソッドを呼ぶようにする。
- editorにはedraw-on-document-changedメソッドを追加する。
- 末端の変更は次の流れで変更をドキュメントへ知らせる。
  edraw-on-shape-point-changed, edraw-on-anchor-position-changed
  → edraw-on-shape-changed → edraw-on-document-changed

** DONE 変更通知/editorに変更済みフラグを追加する
   CLOSED: [2021-08-24 Tue 03:30]
** DONE 画像の更新を遅延させる
   CLOSED: [2021-08-24 Tue 04:22]
何かイベントをポストするかタイマーを使って後で更新すべき。もちろんエディタ(オーバーレイ?)の削除後に更新することはあってはならない。
** DONE 変更通知/全ての変更で自動的に画像更新を行う
   CLOSED: [2021-08-24 Tue 04:22]
遅延更新の仕組みが欲しいところ。
** DONE 変更通知/shapeクラスに変更通知の機能を付ける
   CLOSED: [2021-08-24 Tue 06:39]
** DONE 変更通知/図形を削除したときに選択も解除する
   CLOSED: [2021-08-24 Tue 06:39]
選択中の図形の変更を監視する。
** DONE 変更通知/shapeクラスにset-propertiesを追加する
   CLOSED: [2021-08-24 Tue 11:35]
update-propertiesを廃止する。set-propertyで細かく変更通知を出すのが嫌なので。
** DONE 変更通知/プロパティエディタで編集中のshapeが変更・削除されたとき
   CLOSED: [2021-08-24 Tue 11:35]
- 内容を更新する
- エディタをクローズする
** CANCELLED 変更通知/パスツールで編集中のpath shapeが他から変更・削除されたとき
   CLOSED: [2021-08-24 Tue 12:06]
- 削除されたら編集ターゲットを解除する
- アンカーの追加については、末尾にコマンドを追加しているだけなので問題ないはず。add-commandはMも追加するはず(要再確認)
→(edraw-removed-p shape)で判定できるようにする。変更フックより軽量なので。
** DONE 変更通知/選択状態の変更通知の仕組みを作る
   CLOSED: [2021-08-24 Tue 17:40]
** DONE 変更通知/shapeクラスのset-propertiesで値の変化チェックを確認する
   CLOSED: [2021-08-24 Tue 17:40]
値が変化したときだけon-shape-changedを呼ぶ。
** DONE 機能追加/shapeコンテキストメニューにfillやstrokeの変更を追加する
   CLOSED: [2021-08-25 Wed 00:56]
** DONE 機能追加/矢印キーで選択中のものを移動する
   CLOSED: [2021-08-25 Wed 00:56]
数値引数で移動量を指定。
** DONE shape-point-pathオブジェクトができるだけ無効にならないようにする
   CLOSED: [2021-08-25 Wed 16:27]
矩形や楕円、テキストは修正済み。要調査。
これが出来ると(右クリック等)アンカー操作後にアンカー選択を解除しなくてもよくなる。edraw-unselect-anchorで検索。

edraw-path-cmdはargsとして座標のリストでは無くedraw-path-pointオブジェクトを持つようにする。座標はedraw-path-pointオブジェクトが持つようにする。これによってアンカーやハンドルを一意に識別できるようになる。パスに変更を加えるときはedraw-path-pointオブジェクトを極力引き継ぐようにすることで不必要な無効化を避ける。例えばCを分割するときは新しいCを前に挿入して元のCのハンドル0を新しいCに移す。アンカーとその二つのハンドルだけ新しく作る。

これでも削除等で無効化は避けられないので、それをどう検出するか。shapeの変更通知で無効化の可能性がある変更で選択を解除する。それだと過剰なので、現在選択中のアンカーやハンドルが選択中のshapeに属しているか調べる。

** DONE 選択されているアンカーやハンドルが削除されたときに選択を解除する
   CLOSED: [2021-08-25 Wed 16:27]
@todoあり。削除されたオブジェクトを通知する機能があると便利？ pathの場合同一性判定に難あり。
** CANCELLED rect、ellipse、textツールでアンカーポイントを動かせるようにする
   CLOSED: [2021-08-26 Thu 02:34]
アンカーが表示されているのにドラッグできないのは違和感があるので。
ツールの邪魔になるという判断だが、ドラッグできないならいっそ選択を解除した方が良い。→選択しないようにした。
** DONE 右クリックメニューにSelectを追加する
   CLOSED: [2021-08-26 Thu 02:34]
** DONE パスツール/始点のクリックでパスを閉じる
   CLOSED: [2021-08-27 Fri 13:03]
- [X] マウスで押し下げたアンカーがMコマンドによるものなら、その点へ線を引いてZで閉じる。
- [X] そのままドラッグでハンドルを調整できる。まずは修正箇所を洗い出す。
- [X] Mのbackwardハンドルを取得できるようにする。
- [X] マウスボタンを離したら編集中のshapeをクリアして新しいパスを引けるようにする。

** DONE パスを閉じられるようにしたことによる問題を解決する
   CLOSED: [2021-08-27 Fri 13:03]
- [X] Z命令を末尾に追加する。
- [X] ただし -forward-handle-point が末尾にある場合は、MまでのCを生成してからZを入れる。可能であればMのforward handleと対称の位置にbackwardハンドルを追加する。
- [X] prev-anchorとnext-anchorでMとZを挟んでアンカーを取得できるようにする。
- [X] Zで閉じた点の前後ハンドルを取得できるようにする。
- [X] Zで閉じた点の前後ハンドルを作成できるようにする。
- [X] Zで閉じた点をスムーズ化できるようにする。
- [X] Zで閉じた点のハンドルを削除(コーナー化)できるようにする。
- [X] Zで閉じた点の移動に対応する。
- [X] backward handleからparentアンカー点を探したときはMの点を返す。→handleのnext anchorでMの点を返すようにしたら直った。
- [X] 念のためclosing segmentでforward handleを求めたときにMの先を返す。
- [X] Zで閉じた点の前にアンカーを挿入できるようにする。
- [X] Z直前のMと同一位置のアンカーは取得できないようにする。
      edraw-path-cmd-anchor-point-arg-indexはclosing segmentを無視すべき。
- [X] Zで閉じた点の削除に対応する。
  - 先頭のMを消したとき、対応するZがあり、その前に消したMと同じ座標のCがあるならCのアンカーポイントとその前ハンドルをMの次のアンカーのものにする。
  - Zの前のCやLを消そうとするとき、そのアンカーポイントがMと同じならMを消すものとして処理する。
- [X] closing segmentの始点(Zの前の前のアンカー)を削除するとMのforward handleが表示されなくなる。ハンドルに関する操作も色々受け付けなくなる。
- [X] 平行移動すると閉じた点のハンドルが正しく動かない(隣接の点を消した後)。
- [X] 閉じて点のmake smoothでハンドルは生成されるが0距離になる。

** DONE shapeの右クリックメニューからパスを閉じられるようにする
   CLOSED: [2021-08-27 Fri 14:11]
** DONE 閉じたパスを解除できるようにする(shapeの右クリックメニュー)
   CLOSED: [2021-08-27 Fri 14:22]
** DONE パスの閉じた点を削除したときのハンドルの位置を直す
   CLOSED: [2021-08-27 Fri 21:16]
** DONE SVG要素の属性をできるだけ文字列で扱う
   CLOSED: [2021-08-30 Mon 07:26]
- 数値で取得したい場合はdom-attrではなくedraw-svg-attr-coordやedraw-svg-attr-lengthを使用する。
- get-property、set-property系は極力文字列のまま扱う。そもそもHTMLの属性は元々文字列なのだからそのまま扱う方が間違いが無い。inner-textも文字列で問題ない。nilで属性無し、空文字列はそのまま空文字列として格納する。プロパティエディタ側で必要に応じて空文字列をnilに変換する。requiredじゃない属性は空文字列をnilにしてset-propertyすべき。

** DONE shape-circleを追加する
   CLOSED: [2021-08-30 Mon 11:06]
手動で書き替えたSVGを読み込んだときに一応操作できるようになる。
** [8/8] org-mode統合
*** DONE edrawリンクタイプを登録する
    CLOSED: [2021-08-28 Sat 10:10]
*** DONE インライン画像表示する
    CLOSED: [2021-08-28 Sat 10:10]
*** DONE インライン編集できるようにする
    CLOSED: [2021-08-29 Sun 19:46]
- [X] インライン画像を消してエディタを表示する。
- [X] エディタに保存ボタンと終了ボタンをつけられるようにする。
- [X] エディタが終了したらエディタを消してインライン画像を表示する。

*** DONE エクスポート対応
    CLOSED: [2021-08-30 Mon 16:53]
*** DONE インライン画像の右クリックでメニューを出す
    CLOSED: [2021-08-30 Mon 16:53]
description部分にedrawがあるとリンクを開く操作では開けないので。
*** DONE インライン画像上のC-c C-oで編集するかどうか聞く
    CLOSED: [2021-08-30 Mon 16:54]
*** DONE バッファが閉じるときに未保存を警告する
    CLOSED: [2021-08-30 Mon 17:24]
*** DONE 編集中のedraw-org-link-image-modeの切り替えに対応する
    CLOSED: [2021-08-30 Mon 17:34]
インライン画像表示をONにするとエディタが消えてしまう。
** DONE 単体の図形ファイルを編集できるようにする(edraw-mode)
   CLOSED: [2021-08-31 Tue 12:24]
** DONE 図形の中心にテキストを配置する機能
   CLOSED: [2021-08-31 Tue 18:00]
テキストツールにおいて、 +SHIFT(CTRL?)+クリックで図形の中心にtextを置くとか？+
変数edraw-snap-text-to-shape-centerを追加。図形の中心近くをクリックしたら中心にtextを置く。
SHIFT+クリックだとedraw-snap-text-to-shape-centerの効果を反転させる。
** DONE 複数行テキストに対応する
   CLOSED: [2021-08-31 Tue 19:47]
SVGでは直接的には実現出来ないがtextの下にtspanを作れば出来なくも無い。
#+begin_src svg
<text y="100">
<tspan x="10" dy="0" class="edraw-tline">TEST1</tspan>
<tspan x="10" dy="1em" class="edraw-tline">TEST2</tspan>
<tspan x="10" dy="1em" class="edraw-tline">TEST3</tspan>
</text>
#+end_src
のように書けば複数行になる。

x=はtextに付いたものをtspanに分配しなければならない。
textプロパティエディタとのやりとりでは、プロパティ設定時は\nがあればこのようにtspanで分ける。取得時はtspanで分けられた行を\nで結合する。各tspanにはクラス名でも付けて行に対応することを記録する。tspanは他の用途(テキストの部分装飾等)にも使うかもしれないので。

svg-imageには文字列化の際に不要な空白文字を入れてしまう問題がある。それによってテキストの位置がずれることがある。

#+begin_src emacs-lisp
(insert-image
 (let ((svg (svg-create 400 300))
       (text (dom-node 'text '( (y . 100) (fill . "white") (font-size . 30) (text-anchor . "middle"))
                 (dom-node 'tspan '((x . 100) (dy . "0"))
                           "TEST1")
                 (dom-node 'tspan '((x . 100) (dy . "1em"))
                           "TEST1")
                 (dom-node 'tspan '((x . 100) (dy . "1em"))
                           "TEST1"))))
   (dom-append-child svg text)
   (svg-image svg)))
#+end_src

#+begin_src emacs-lisp
(image :type svg :data "<svg width=\"400\" height=\"300\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <text x=\"10\" y=\"100\" fill=\"white\" font-size=\"30\" text-anchor=\"middle\"> <tspan x=\"100\" dy=\"0\"> TEST1</tspan> <tspan x=\"100\" dy=\"1em\"> TEST1</tspan> <tspan x=\"100\" dy=\"1em\"> TEST1</tspan></text></svg>" :scale 1)
#+end_src

** DONE 機能追加/パスに矢印を付けられるようにする
   CLOSED: [2021-09-01 Wed 18:37]
markerを使うにしても色が問題。
context-fillが使えれば簡単にできそうだが、最新のlibrsvgじゃないとダメみたい。
- [[https://gitlab.gnome.org/GNOME/librsvg/-/issues/618][Support SVG2 context-fill and context-stroke (#618) · Issues · GNOME / librsvg · GitLab]]
- [[https://github.com/GNOME/librsvg/blob/master/NEWS][librsvg/NEWS at master · GNOME/librsvg]] (2.51.4)
なので、必要に応じてmarkerを生成する。
shapeのstrokeプロパティが変化したらmarkerを更新する必要がある。
#marker-arrow-ff0000みたいにできればいいんだけど、色指定の方法が色々あって案外面倒くさい。
pathにmarker-start, marker-endプロパティを追加する。値はnil, arrow, circle。
全部のshapeを確認して必要なマーカー定義を作成し、各shapeのIDの番号部分を更新する。
** DONE 表示改善/High DPI環境での画質を改善する
   CLOSED: [2021-09-02 Thu 11:52]
画像全体のサイズをどうするかがネック。
svg要素のwidth= height=で決まるが、これは今のところドキュメントのサイズと一致しなければならない。
image-scaleを適用すると誤差が生じるので、セーブ時に元のサイズに戻らないかもしれない。
editorに元のサイズを記録しておくしか。
現在は暫定的にcreate-imageのscaleに頼ることにしてある。
解決するならtoolbarの画像サイズも直すこと。こちらは誤差があっても問題ない。
** DONE エディタ内からオブジェクトのデフォルト値を設定できるようにする。
   CLOSED: [2021-09-02 Thu 18:12]
とりあえずお手軽に、メインメニューにShape Defaultを追加し、その下にrect、ellipse、path、textを追加。選択するとプロパティエディタが開いて設定できる。次にその形状を作ったときのプロパティがそれになる。保存する必要は無い。あくまでその時の一時的なもの。
** DONE 背景にマットや指定色を(一時的に)表示できるようにする
   CLOSED: [2021-09-03 Fri 09:15]
背景を透明にしたいときにEmacsの背景では見づらい場合があるので。
** DONE カラーピッカー・パレットを作る
   CLOSED: [2021-09-08 Wed 10:03]

[[file:screenshot/color-picker-minibuffer.png]]


[[file:screenshot/color-picker-inline.png]]

** DONE デフォルト値を変更したときにツールバーの色を更新する。
   CLOSED: [2021-09-08 Wed 10:03]
** DONE ツールバーにツールのデフォルト値を変更するボタンを追加する
   CLOSED: [2021-09-08 Wed 11:47]
クリックするとそのツールのプロパティエディタが出る。
とりあえずrect, ellipse, path, textのデフォルトの形状を編集できるようにする。
** DONE カラーピッカーで彩度が0のときに色相が選択できないのを直す
   CLOSED: [2021-09-08 Wed 17:55]
- NG (edraw-color-picker-read-color)
- OK (edraw-color-picker-insert-color)
なのでミニバッファ文字列との相互作用に問題がありそう。
(さらに色相を一番上にドラッグして離すと一番下になる問題も見つけた)
** DONE テキストのデフォルトを変更すると作成時にエラーが出るのを直す
   CLOSED: [2021-09-08 Wed 19:06]
フォントサイズが文字列化されたせいだと思う。
** DONE オブジェクトのクローンを作る機能を追加する
   CLOSED: [2021-09-08 Wed 21:25]
** DONE 選択中のオブジェクトを削除するキーを追加する(DEL)
   CLOSED: [2021-09-09 Thu 08:12]
** DONE 機能追加/メニューから数値指定で全体移動
   CLOSED: [2021-09-09 Thu 11:52]
** DONE 全てのオブジェクトをスケーリングする機能を付ける
   CLOSED: [2021-09-09 Thu 11:43]
edraw-translateのような操作で全ての点に対して行列を適用出来るようにする。
とりあえず作ったけど問題がいくつか。
- path以外(rect, ellipse, circle, text)では平行移動と拡大縮小以外の変形(回転等)はできない
- 長さを表す属性(font-sizeやstroke-width等)は変形できない(縦横均等なスケーリングまでなら行う余地はあるが、縦横の比率が異なるスケーリングなら単体の属性では表現できない)
全オブジェクトのスケーリングはあくまで全体のレイアウトを微調整したいという目的で欲しかったので、形状を変形すること自体が目的では無かった。とりあえずアンカーポイントが指定比率で動かせれば良かっただけなのでこれでも十分。
本格的な変形はtransform属性を導入して行うべきだが、それはそれで問題点は多い。例えば移動の際にtransformとx, y属性のどちらを操作すべきか分からなくなる。グループ化がないと扱いが大変だけどグループ化のUIが難しい(別ビューでツリーでも表示するか)。当たり判定は十分変形に対応可能だと思う
** DONE 背景色設定時にカラーピッカーを使う
   CLOSED: [2021-09-09 Thu 19:04]
** DONE カラーピッカー使用時にできるだけプレビューしたい
   CLOSED: [2021-09-09 Thu 19:27]
** DONE オブジェクトの名前を取得できるようにする
   CLOSED: [2021-09-10 Fri 08:39]
実はeieioではオブジェクトIDを生成してくれている。
例: #<edraw-shape-ellipse edraw-shape-ellipse-2367ee4>
eieio-object-name-stringとeieio-object-nameがあるが、前者の方が単体の名前になる。
(edraw-name shape)でedraw-shape-以降を返す。あくまで名前であって一意性は保証しない。
edraw-property-proxy-shapeはdefault rectのような名前を返す。

** DONE プロパティエディタに編集対象の名前を表示する
   CLOSED: [2021-09-10 Fri 08:39]
** DONE 選択しているオブジェクトを前後に移動するキーを追加する
   CLOSED: [2021-09-10 Fri 08:39]
** DONE プロパティエディタは選択中のオブジェクトのプロパティを常に表示する
   CLOSED: [2021-09-11 Sat 12:44]
迷う。切り替えボタンを追加するのも捨てがたい。Selected Shape, Next Shape, Previous Shape
** DONE プロパティエディタは変更をプレビューまたは即時適用する
   CLOSED: [2021-09-11 Sat 12:44]
変更の検出をどうするか。widgetの:notifyを使う？
https://www.gnu.org/software/emacs/manual/html_mono/widget.html
** DONE プロパティエディタの細かい改良をする
   CLOSED: [2021-09-11 Sat 16:21]
- [X] テキストフィールドの幅指定を無くして行末までフィールドにする。入力した文字の最後にカーソルを合わせづらいので。
- [X] 左右ドラッグで数値を変更する。
- [X] メニュー選択などで範囲選択してしまうのを抑制する。
- [X] ホイールで数値を変更する。
- [X] 対象が削除されてもプロパティエディタを閉じない。
- [X] 選択shapeの切り替えに追従する。
- [X] 入力の即時適用。
- [X] 次前を表示ボタン。
- [X] デフォルトとして設定するボタン。
- [X] カラーピッカーでプレビュー。
** DONE SVG出力を短くする
   CLOSED: [2021-09-13 Mon 18:29]
- パスデータの無駄な空白を削除する。座標のxとyの間は,で区切る。
- XML空要素タグを使う。
** DONE パスツール/path-cmdlistに順番を反転する機能を追加する
   CLOSED: [2021-09-12 Sun 19:07]
パスを結合したり先頭から伸ばしたりするときに必要になる。
** DONE パスツール/既存のパスの末尾から編集を再開できるようにする
   CLOSED: [2021-09-12 Sun 19:08]
** DONE パスツール/既存のパスの先頭から編集を再開できるようにする
   CLOSED: [2021-09-12 Sun 19:08]
パスの方向を反転するか、始点(Mコマンド)から伸ばせるようにするか。
** DONE パスツール/他のパスの端点と連結できるようにする
   CLOSED: [2021-09-13 Mon 12:35]
パスツールで伸ばしているときに、他のパスの端点をクリックしたら、その二つのパスを連結する。
** DONE パスツール/パスを任意アンカーで切断できるようにする
   CLOSED: [2021-09-14 Tue 09:50]
アンカーを右クリックで「Split Path」を選ぶ。
- M(サブパス始点)の場合
  - 閉パスの場合 : 全てのサブパスを開パスにする。closing segmentがあるならZをMに置換するだけで良い。最後のZは次にMがあるなら消して良い。closing segmentが無いならMまでの線を追加する。
  - 開パスの場合 : 不可(始端)
- LかCの場合
  - サブパス最後のアンカー
    - 閉パスの場合
      - closing segmentの場合     : 不可(Mで分割せよ)
      - closing segmentでない場合 : Zを取り除く。アンカーからMまでの線を先頭に追加する(Mがなお他のZで使われている(閉サブパスの一部)なら諦める)。
    - 開パスの場合 : 不可(終端)
  - 途中のアンカー
    - 閉パスの場合 : cmdlistを二つに分割する。Mを追加する。
                     MとZをくっつける。
    - 開パスの場合 : cmdlistを二つに分割する。Mを追加する。
** DONE ホイールの方向を逆にする
   CLOSED: [2021-09-14 Tue 16:16]
** DONE パスの向きを逆にする機能を追加する
   CLOSED: [2021-09-14 Tue 18:17]
連結機能で勝手に反転するようになってしまったので。
あまり必要ではないがとりあえず矢印の向きに関係がある。
** DONE ファイルエクスポート機能
   CLOSED: [2021-09-14 Tue 21:29]
** DONE バッファエクスポート機能
   CLOSED: [2021-09-14 Tue 21:29]
** DONE SVGツリーのデバッグ出力機能
   CLOSED: [2021-09-14 Tue 21:40]
** DONE edraw-update-imageはeditor終了後には更新をしないようにする
   CLOSED: [2021-09-15 Wed 10:50]
「終了後」がまだ定義されていないのでなんとも。
オーバーレイオブジェクトのdisplayプロパティを書き替えるだけなので、最悪特に問題は起きない。
終了時にタイマーをキャンセルするのでも良い。
→(edraw-close editor)でキャンセル
** DONE アンカーとハンドルの選択時に親をチェックする。
   CLOSED: [2021-09-15 Wed 12:19]
@todoあり。アンカーを選択したときはシェイプを、ハンドルを選択したときはアンカーをチェックする。関連するものが選択されている必要がある。選択されていなければ選択すべき。
** DONE 複数選択機能
   CLOSED: [2021-09-16 Thu 14:59]
C-downで選択追加、削除する。
影響箇所:
- edraw-selected-shape
- edraw-select-shape
- edraw-unselect-shape
- edraw-on-selected-shape-changed
- edraw-select-anchor
- edraw-unselect-anchor
- edraw-select-handle
- edraw-unselect-handle
- edraw-update-selection-ui
- edraw-svg-ui-shape-points

- edraw-translate-selected
- edraw-delete-selected
- edraw-bring-selected-to-front
- edraw-bring-selected-forward
- edraw-send-selected-backward
- edraw-send-selected-to-back
- edraw-select-next-shape
- edraw-select-previous-shape
- edraw-main-menu
- edraw-mouse-down-anchor-point
- edraw-mouse-down-shape
- edraw-on-mouse-3
- edraw-mouse-down-continue-path
** DONE 複数選択移動機能
   CLOSED: [2021-09-16 Thu 14:59]
** DONE 表示改善/パスアンカー選択時は前後のアンカーのハンドルも表示する
   CLOSED: [2021-09-16 Thu 15:00]
down-mouse時の選択(検索)にも影響するので注意。
** DONE コピー、ペースト機能
   CLOSED: [2021-09-17 Fri 18:48]
** DONE 複数選択時の選択中shapeに対する右クリックを改善する
   CLOSED: [2021-09-17 Fri 20:53]
選択オブジェクト全体に対する操作を出すべき。
** DONE 何も無いところで右クリックしたときにメニューを出す
   CLOSED: [2021-09-17 Fri 21:11]
- Paste
- ドキュメントへの操作
** DONE オーバーレイの下のテキストをread-onlyにする？
   CLOSED: [2021-09-17 Fri 22:51]
org-modeで使うとき、オーバーレイのmodification-hooksプロパティでerrorを投げて変更を阻止する。edraw-modeの方はテキストプロパティで対策済み。
** DONE コピー、カット、ペーストにキーを割り当てる
   CLOSED: [2021-09-17 Fri 23:02]
** DONE エクスポート時にATTR_HTMLが効かない問題を何とかする
   CLOSED: [2021-09-18 Sat 12:18]
imgの時は何とかするとしてsvgのときにどうするか。widthとheightはまずい。
** DONE UNDO/REDO機能
   CLOSED: [2021-09-20 Mon 13:20]
- editorにundo-listを追加する
- undo-listにundo dataを追加できるようにする
- undo dataは関数と引数のリスト
- undo dataを実行できるようにする
- 実行時に生じた(undo-listに追加された)undoデータはredo-listに入れ替える
- 複数のundo dataをまとめる機能を追加する
- 全ての変更を行う場所で、元に戻すundo data(関数と引数のリスト)を生成する
  変更する場所は edraw-on-document-changed から辿る。
  - 直接呼び出しているのはドキュメントの属性を変更する部分。
  - edraw-on-shape-changedを呼び出している部分はshapeの変更。基本的に元のプロパティ値に戻すundo dataを作る。
  - edraw-on-shape-point-changedを呼び出している部分はハンドルかアンカーに対する変更。本来はポイント毎に詳細なデータを作るべきだが、とても面倒なのでdプロパティ全体を保存する。
  - Zオーダーは現在のインデックスを調べる関数とそこに戻す関数を追加して対処する。
- 連続する変更に対するundo dataを必要に応じて一つにまとめる。ドラッグによる移動やプロパティエディタでの値調整はまとめる。
** DONE パスツールで C-u クリック で必ず点を追加する
   CLOSED: [2021-09-20 Mon 15:13]
既存の点を移動したり接続したりしない。
** DONE ATTR_HTML指定時に重複する属性を削除する
   CLOSED: [2021-09-20 Mon 17:21]
widthを指定したら本来のwidthは削除したい。
** DONE カラーピッカーでプレビュー中は変更フラグと +変更通知+ を抑制する
   CLOSED: [2021-09-21 Tue 22:19]
** DONE エクスポート時にSVG内のidを変換する
   CLOSED: [2021-09-22 Wed 21:36]
複数のSVGを一つのHTMLに埋め込むとIDが重複してしまう。
edraw-body, edraw-defsはもとよりmarkerのidが被ると他の文章の定義を参照してしまう。
** DONE 矩形で選択できるようにする
   CLOSED: [2021-09-23 Thu 15:20]
** DONE 非常に小さい図形でも選択ツールで選択できるようにする
   CLOSED: [2021-09-23 Thu 15:34]
範囲選択で実現した。
** DONE fileリンクの初回編集で終了後に画像がインライン表示されないのを直す
   CLOSED: [2021-10-07 Thu 08:20]
image-refreshで更新しても意味は無く、オーバーレイを作らなければならない。
** DONE 編集開始時に不正なリンクフォーマットはエラーにする
   CLOSED: [2021-10-07 Thu 09:24]
** DONE オブジェクト単独でのtransform属性に対応する
CLOSED: [2021-12-05 Sun 17:56]
rect, ellipse, circle, path, textに対するtransform属性に対応する。

- [X] 当たり判定に対応する
- [X] 平行移動に対応する
- [X] アンカーポイントの位置を変形させる・入力も何とかする。問題はどの段階で変換するか
  表示はedraw-update-selection-ui、入力はedraw-shape-point-findあたり？
  →edraw-get-xyやedraw-moveの変形後座標系版であるedraw-get-xy-transformedやedraw-move-on-transformedを作成する。
** DONE グループ化出来るようにする
CLOSED: [2021-12-05 Sun 20:19]
描いた物体を一つのものとして扱えるように。
- [X] edraw-shape-groupを作る。
- +子要素たちを元にAABBを計算する。それを矩形アンカーポイントとする。+
** DONE HTMLタグをリンク毎に指定できるようにする
CLOSED: [2022-03-26 Sat 22:32]
~[[edraw:html-tag=img;file=example.edraw-svg]]~ のような形式。
** DONE ATTR_HTMLが効かない不具合を修正する。
CLOSED: [2022-09-19 Mon 00:22]

#+begin_src org
,#+ATTR_HTML: :viewBox 0 0 640 480
[[edraw:.....
#+end_src

:viewBoxがそのままdom-set-attributeに渡されている。 :を取り除かなければならない。
** DONE SVGエクスポート時にviewBoxを使うようにする
CLOSED: [2022-09-19 Mon 00:48]
width="640" height="480"だけだとレスポンシブにするのが面倒。
viewBox="0 0 640 480"があれば比率を保ったまま拡大縮小するのが容易。

edraw-org-export-html-use-viewboxオプションを追加。
** DONE org-modeでLaTeXへのエクスポートに対応する。
CLOSED: [2022-09-23 Fri 01:37]
** DONE groupで指定できる属性を増やす
CLOSED: [2022-11-27 Sun 12:03]
fillやstroke系の属性を指定できるようにする。
中の図形には色を指定せず、g要素で一括指定出来ると便利。
** DONE group化を解除できるようにする
CLOSED: [2022-11-27 Sun 13:53]
transform属性で平行移動しているのをどうするか。
変換が平行移動だけならば子要素の内容を平行移動すれば良い。
それ以上の変換ならば、子要素のtransform属性にグループのtransform属性を掛け合わせる必要がある。
** DONE opacity属性を追加する。
CLOSED: [2022-11-27 Sun 14:03]
fill-opacityやstroke-opacityとは別に指定出来て良いはず。
特にgroupに対するopacityは有用。
** DONE groupをコピーできるようにする。
CLOSED: [2022-11-27 Sun 14:46]
- edraw-shape-descriptorが子孫の情報を持つようにする。
- edraw-shape-from-shape-descriptorが子孫も復元するようにする。
** DONE edraw-insertの引数順を変更する
CLOSED: [2022-11-27 Sun 17:16]
できれば(edraw-insert parent shape pos)にしたい。
ただ、parentはedraw-shape、edraw-dom-element-p、nilのいずれかなのでcl-defmethodでどう書くのか知らない。特にedraw-dom-element-pは先頭がnilではないシンボルであるリストというだけなので注意が必要。
→複数の型にマッチしたり指定の述語にマッチする関数を書く方法が分からないのでparentはそのままにした。
** DONE groupを複製できるようにする。
CLOSED: [2022-11-27 Sun 21:09]
edraw-cloneで子孫を複製する。すっかり忘れてた。
** DONE textやgroupは選択時に境界ボックスを表示する
CLOSED: [2022-11-29 Tue 12:38]
選択時に何か表示しないとgroupが分からない。
ついでにtextはアンカーポイントを表示した上で境界ボックスも表示したい。
** DONE 編集終了時にツールを非選択にする
CLOSED: [2022-12-01 Thu 17:29]
カスタムシェイプツールにおいてシェイプピッカーとの接続終了処理が実行されないので。
複数のエディタで同時に開いている場合にどうなるか。hookの数でチェックする？
** DONE 選択図形を数値入力で良いからとにかく変形したい
CLOSED: [2022-12-07 Wed 18:24]
回転できないとある種の作図が著しく困難なため。
** DONE 90度単位回転で誤差が出ないようにする
CLOSED: [2022-12-08 Thu 18:26]
90度単位回転だけは誤差が出ないようにしたい。
(= (sin pi) 0)がnilになる所を見ると現状はダメそう。
(= (cos pi) -1)はtになる所が興味深い。
いずれにせよ(360で割った余りが。負数注意)度数0、90、180、270は特別扱いすべき。
** DONE 全選択・選択解除機能を追加する
CLOSED: [2022-12-08 Thu 18:26]
** DONE カスタムシェイプ/定義済み図形を貼り付ける機能を追加する
CLOSED: [2022-12-08 Thu 21:51]
1. 定義済み図形挿入ツールを追加する。
2. ツールを開いている間は定義済み図形(プリセットシェイプ)ピッカーを表示する。
   - プロパティエディタと同じようなバッファをポップアップさせる。
   - バッファの中には定義済み図形を図形毎に画像にして並べ、通常のバッファ・ウィンドウの機能でスクロール出来るようにする。
   - 図形のサムネイル画像を生成する。
     - 図形の境界を求めてpaddingを足す。
     - 原点より左上(座標負方向)にも図形がある可能性があるので注意。
     - 大きすぎる図形は縮小して表示する。
3. 図形を選択してからキャンバス上でクリックしたらその位置に図形を追加する。
   - 単独の図形は平行移動して配置する。グループはtransformする(しかない)。
   - バラバラの図形を一度に配置できるようにする機能は要らないと思う。

改善点
- [X] ピッカー内の操作
  - [X] セーブ
  - [X] 図形の編集
  - [X] 図形の削除
  - [X] 図形のコピー/カット/ペースト
  - [X] 図形の新規追加
    - document-writerは使わない(Saveメニューが消える)
    - 何らかのプロパティでeditorに終了時コールバックを持たせる
    - finishまたはcancel時にコールバックを呼び出す。(edraw-document-svg editor)の結果を引き渡す
    - 空図形チェックが必要
  - [X] 図形の前後位置移動
- [X] UNDO
- [X] 右クリックメニュー
- [X] 文字列SVGに対応する(文字列で複数図形に対応するならgでまとめてばらすしかない)
- +shape-descriptor-listに対応する+
  +(edraw.elに依存しなければならないので迷うところ。正直SVG文字列だけで十分。変換関数にautoloadを通すくらいか？)+
  懸念していたmarkerもSVG文字列で問題なく動くので必要が無くなった。とりあえず保留。
- [X] エディタでコピーしてshape-pickerにペースト
- +選択図形をカスタムシェイプに追加+ shape-pickerでペーストできるのでいいや。右クリックメニューにあまり使わない項目が増えるのも嫌だし。
- [X] エントリーリストのファイルへの保存・読み込み
- [X] shape-descriptorからSVG表記に変換する機能を増やす
- [X] 正確に閉じる(複数のエディタから開いたときにフックへの登録数を見て閉じるか決める)
- [X] buffer-read-onlyではなくテキストプロパティread-only(とfront-sticky, rear-sticky?)を使用して禁止した方が分かりやすい。
- [X] 自動保存の問題に対処する。hexl-modeでの情報を収集する最悪自動保存は禁止。
- [X] セクションの追加
- +layoutの追加+ UI化しなくてもいいかな。
- +サムネイルレイアウト指定の変更+
- [X] プロパティ設定
- [X] 別ファイルのインポート
- [X] セクションを別ファイルへエクスポート
- [X] 初期化
- [X] リージョン対応
     (C-w, M-wだけリージョン対応にする。wやWはそのまま。コンテナを跨ぐときにどうするか。リージョンに完全に含まれる部分木だけを対象として抽出する。子孫がリージョンからはみ出すセクションやレイアウトは例え見出しがリージョンの中に入っていても対象にしない。子孫の完全にリージョンに含まれる部分だけを個別に抽出してコピー・カット対象とする)
- [X] ルートの見出しで挿入できない

以下は積み残し。別途TODOにする。
- [ ] ドラッグ・アンド・ドロップ
     (マウスで選択範囲を別のセクションへ?)
     いや、マウスドラッグでの選択範囲は諦めて、Shift+クリックか？
     単純な順番の入れ替えもしたい。
- [ ] 貼り付け時の属性調整指定(fill系やstroke系をデフォルトのものにするための指定)
- [ ] 貼り付け時のデフォルト変形指定(任意の点を原点にしたり、拡大縮小したりできるようにする。エディタがルーペに対応すれば不要だけど)
- [ ] 貼り付け時のユーザーによる縮尺指定
- [ ] 貼り付け時にクリックでそのまま貼り付け、ドラッグで大きさ指定
** DONE カスタムシェイプ/shape pickerでセクションの見出しを色づけする
CLOSED: [2022-12-09 Fri 18:41]
- 見た目を水平バーにする。
- マウスカーソルを +hand+ arrowにする。
- +折りたたみできるようにする。outline-minor-modeを使う。見出しのクリックで折りたたみを切り替える。+ 今回のケースではoutline-minor-modeでは正しく折りたためない！　sectionの末尾とshapeとの間に何も目印が無いので。
** DONE カスタムシェイプ/shape pickerでセクションの兄妹移動できるようにする
CLOSED: [2022-12-09 Fri 20:23]
entry-backwardとentry-forwardだとかなり特殊な移動になってしまう。
M-up、M-downで移動できた方が良い。
** DONE カスタムシェイプ/shape pickerでセクションの見出しを折りたたむ
CLOSED: [2022-12-09 Fri 23:03]
今回のケースではoutline-minor-modeでは正しく折りたためない！　sectionの末尾とshapeとの間に何も目印が無いので。
やるならエントリーツリーを見てちゃんとやらないとダメ。
** DONE ドキュメント全体の回転機能を追加する
CLOSED: [2022-12-10 Sat 00:04]
+特に90度単位の回転は矢印シェイプを作っているときに欲しくなった。+
全選択と選択図形の回転をサポートしたので不要だが、一応ドキュメントの回転・拡縮も追加したい。選択図形と同じように dtt dts dtr で変形できると良い。
反転は-1倍すれば良い。
** DONE パスを拡大縮小回転できるようにする(図形内容の変形)
CLOSED: [2022-12-10 Sat 00:05]
矩形や楕円、テキストはtransformを使わないと出来ないけど、パスだけは元データのレベルで変形できる。
↑一応出来るようにはなっている。出来ない要素も回転できてしまうけど。
** DONE 変形時にデフォルトの原点を図形の中心にする・その他変形入力改善
CLOSED: [2022-12-10 Sat 02:23]
ついでにleft, right, top, bottom, centerと入力できるようにする。
プロンプト:
- Origin X(left=100.0, center=150.0(default), right=200.0):
- Origin Y(top=100.0, center=150.0(default), bottom=200.0):
ドキュメント全体、選択図形、図形単体で対処する。
変形不要時(angle=0, scale=1)は即時終了。
対象図形無しは即時終了。
** CANCELLED カスタムシェイプ/～file-mode-exitでエディタとの接続が切れてしまう
CLOSED: [2022-12-11 Sun 00:20]
再びedraw-shape-picker-file-modeにして選択した後に配置しようとしても以前選択した図形が配置されてびっくりしてしまう。
+やはりカスタムシェイプツールはクリックのたびにバッファから選択図形を取得すべき。+
+メジャーモードを変えてもバッファオブジェクト自体は変わっていないので。+
閉じてfind-fileで開いてモードを有効にしたときは、知らないｗ

バッファが死んでいるとき(buffer-live-pがnilを返したとき)はどうするか。
+再び開く。+

基本的に、ユーザーが閉じた物を配置のたびにいちいち開くべきではない。ユーザーはshape pickerが邪魔なので閉じたのかもしれない。閉じた状態で選択した図形を次々に配置したいのかもしれない。しつこく開くべきではない。

現在選択中の図形はあくまでエディタ側が持っているべき。接続していないpickerで何を選択しようとエディタ側は関知しない。必要なら再度ツールを起動して接続すれば良い。
** DONE カスタムシェイプ/ドラッグで大きさを指定して貼付できるようにする
CLOSED: [2022-12-12 Mon 10:45]
クリックしたらデフォルト貼り付け。ドラッグでその範囲に内接するように貼り付け。shape-picker側に基準範囲指定プロパティが必要かも。
:shape-ref-box ((l . t) . (r . b))
:ref-box ((l . t) . (r . b))
指定が無ければ境界矩形で代用するしか無いけど。
** DONE カスタムシェイプ/貼り付け時にfillやstrokeを調整する
CLOSED: [2022-12-12 Mon 14:50]
あらかじめ指定した色で貼り付けたい。

図形定義中のfillやstroke等の属性を上書きする。

一部の図形は属性を上書きして欲しくない。カラーのクリップアートなど。
保持対象属性を
:shape-keep-properties (fill stroke stroke-width) みたいに指定する？
:shape-keep-properties t でいいのでは？
shape-picker-entryのプロパティ値にnilは使いづらいので'all 'noneあたりか。

保持対象ではない属性はエディタのデフォルト値で上書きする。
+どのデフォルト値で上書きすべきか。path、rect、ellipse、text、それぞれのデフォルト値で上書きするしかないのではないか。それぞれのデフォルト値を指定してから図形を配置するのは面倒すぎる。図形は基本的にpathだけで作成すべき。それ以外は全て属性保持対象扱いでも良いのではないか。この機能を使いたい図形は全てpathかgroupだけで作成すること。+
暫定的にpathのデフォルト値を全ての図形に適用する。おそらくツール毎にデフォルト値を持つべき。
** DONE カスタムシェイプ/選択がクリアされて使いづらいのを何とかする
CLOSED: [2022-12-12 Mon 20:28]
ピッカーでqを押して閉じたとき、ピッカーの選択状態は失われる。ただし、ツールの方は失われない。

カスタムシェイプツールを再選択して再びピッカーを出したとき、以前の選択状態はツール、ピッカー共に失われている。ツールはいったん非選択状態になってツールオブジェクトが破棄されてから新しいツールオブジェクトが生成・選択されるので。

本来的には、ツールがエディタやその外に共通な情報を保存する場所が必要となる。

その他の論点:
- ピッカーのqでバッファをkillすべきか
  (邪魔なのでkillしたいが、選択状態をできるだけ維持するには残して置いた方が多少有利)
- ピッカーを再び開いたときに以前の選択状態を復元しようと試みるべきか
  (出来るなら上の問題はどうでも良くなる。ただ、やり方が難しい。ルートからインデックス番号を辿って結果が同じ図形ならそれを選択するくらいか)
  (やるなら、無選択状態の時のみ起動したツールの選択図形を選ぶようにすべき。既に選択中のピッカーと接続したときはピッカーを優先すべき)
- クリック時(配置時)にピッカーから選択状態を取得し直すか
  (プロパティを変更した後だったりするので取得し直すのが望ましい)

別な方法。ピッカー側に選択状態を維持する仕組みを追加する。少なくともEmacs起動中は維持。グローバル変数にファイル名と選択状態を持たせる。
↑この方法で実装。
** DONE エディタの上では基本的に全てのself-insert-commandは禁止すべき
CLOSED: [2022-12-12 Mon 21:39]
このキーだったかな？　違った、という時に文字を挿入してしまうので。
** DONE コピー、ペーストのキーを変更する
CLOSED: [2022-12-12 Mon 21:39]
普通に[remap kill-ring-save]や[remap kill-region]、[remap yank]で良いのでは？
久しぶりに使ったらC-c C-x M-wとか全然分からなかった。
C-/とかもよく間違えるのでundoにしたいが……。
** DONE 選択オブジェクトに対する操作をメインメニューにも追加する
CLOSED: [2022-12-12 Mon 21:44]
少なくともグループ化が登録されていない。
他にもあるかも。
** DONE スクロール・ズーム機能(一時的な拡大、縮小、スクロール)
CLOSED: [2022-12-14 Wed 15:01]
C-wheelを使うべき。C-ドラッグでスクロール? ツールで使っている？ 中ボタン？

- まず、root transformをviewBoxを使うように修正すべき。基本的に高解像度用のスケーリングなので、全ての部分に一様に適用したい。グリットの線等も太くなった方が良い。
  viewBoxはちゃんと元に戻さないとダメ？　そもそもこれまであるとちゃんと編集できなかったのでは？
  高解像度モニターでしっかりチェックが必要。
- root transformが居なくなったら、view-transformという仕組みを追加する。
  - g#edraw-bodyはtransform属性で変形する。
  - それ以外のUIは座標だけ変形する。グリッドの線等が太くなってはダメなので。
  - 当然マウス入力も調整する。
- キーで拡大、縮小できるようにする。次にマウスホイールでできるようにする。
- キーでスクロール出来るようにする。マウスでスクロールを試す。
- 座標軸を表示する。
- エディタ画像全体の最大サイズを決める仕組みも必要かもね。
** DONE カラーピッカーでnoneを選べるようにする
CLOSED: [2022-12-15 Thu 02:12]
いちいちキーで打たなければならないのは地味に面倒くさい。
斜線が入ったボタンをキャンセルの下あたりにでも表示したい。
パレットの端っこでも良いが、パレットは案外目立たないのでどうか。
** DONE viewBoxを変更できるようにする
CLOSED: [2022-12-15 Thu 18:37]
もちろん編集には何も影響しなくて良い。あくまで編集後のSVGのviewBoxの値(文字列)を直接指定できれば十分。強いて言えば、デフォルトのスクロール・ズーム位置に影響しても良いが、viewBoxに指定できる全てのパターンに対応するのは大変かもしれないので別に必要ない。
エクスポート時にviewBoxをいじっていたような気がするので要確認。
** DONE image要素に対応できる？
CLOSED: [2022-12-15 Thu 23:03]
+少し試した限りimage要素は表示できない。+ +Emacs 26.3(Windows公式ビルド)はできた。Emacs 27以降はなぜか出来ない(Windows公式ビルド)。Emacs 28でbase uriを指定するプロパティが入るのでより使いやすくなるが、どうなるか。+ 解決方法判明。emacs-27.2-x86_64.zipを展開してできるディレクトリの下のbin/gdk-pixbuf-query-loaders.exe --update-cacheを実行するとlib/gdk-pixbuf-2.0/2.10.0/loaders.cacheというファイルが出来る。そうすると表示されるようになる。librsvgが画像を読み込む際にgdk-pixbufを使っているみたい。

- [X] edraw-shape-imageクラス作成
  基本的にrectみたいなもの。
- [X] edraw-editor-tool-imageクラス作成
  クリックまたはドラッグで位置または範囲を指定する。
  ファイル名を読み込む。
  位置だけを指定した場合は画像のサイズで範囲を確定させる。
  image要素を追加する。
- [X] アイコンとツールリストの変更
- [X] edraw-svg-dom.el内にimage要素のコードを足す。ほとんどはrectと同じだと思う。
  - hrefがある
  - fillとかstrokeとかは効かないので削除する
  - preserveAspectRatio属性が欲しい
- [X] クリックでも配置
- [X] ファイル名を入力する
** DONE ズームインしたときに座標の判定が大きすぎる問題を修正する
CLOSED: [2022-12-16 Fri 13:49]
imageツールアイコンを描いている時にうまくアンカーポイントが選択出来なくて難儀した。
おそらく拡大してもドキュメントの座標系で許容ピクセル数が計測されている。
↑それだけでは無く、マウスの座標がピクセル単位でスナップ(整数座標に限定)されている所も問題だった。両方に対処した。現状でも物体検索はedraw-mouse-event-to-xy、図形座標に関わるところはedraw-mouse-event-to-xy-snappedが使われている。-to-xyはto-xy-rawと名前を変えて、整数に限定されない生の座標を返すようにした。ピクセル単位のスナップはedraw-snap-xyで行うようにした。ポイントの反応半径(edraw-anchor-point-input-radiusとedraw-handle-point-input-radius)は拡大率で割るようにした。
** DONE ズーム時(に限らず?)にエディタを大きくする
CLOSED: [2022-12-16 Fri 17:46]
編集時の画像のサイズを元の大きさよりも大きくした方が良い。
100x100程度の小さなSVGを編集したいとき、どんなにズームイン出来ても編集する領域が小さいので使いづらい。

[[edraw:data=H4sIAMCjmWMAA3VPQQ6CMBD8SrNeka5ICBjKC/AD3tCWtgFbUqrV39sgGi8edrKTyczs1vNdkqC5Vwx2iECU0FL5ldyFm7U1kaU7II/raGYGyvvpQGkIIQ371DpJM0SkMQia2omL/5/3YBDxuWCvx5HBpu97ILN3dhAMjDUCiOYMBHdd2J67yyCdvRkOhDa1/JUsf8a+qfPqa99UVfUJ265H5J+md3b0HzNMcmxzTDJsS0wKbAtMSmyzZV/U09JHZZz4V/MCx2/D5CYBAAA=]]

やるなら[[elisp-function:edraw-scroll-view-screen-width][edraw-scroll-view-screen-width]]や[[elisp-function:edraw-scroll-view-screen-width][edraw-scroll-view-screen-width]]が大きな値を返せば良い。[[elisp-function:edraw-update-root-transform][edraw-update-root-transform]]等各所はすでにこの関数を使うようになっている。

ただ、最大サイズを制限する必要がある。 +例によってフレームの大きさから自動的に最大サイズを算出すべきか。その場合、元々大きな画像は縮小するべきなのか。+ 設定で自動で大きくする最大サイズを指定出来るようにした。デフォルトは(560 . 420)

サイズを手動で指定出来るような機能があっても良い。

+設定でデフォルトの大きさを指定出来ても良い。+ 設定で自動で大きくする最大サイズを指定出来るようにした。

適当にview-screenなんて付けちゃったけど、本当は何と呼べば良いんだろう。このサイズは自動スケーリングを適用する前のサイズ。編集領域？　単にビューで良いんじゃないかと。強いて言うなら編集用ビュー。

自動ビューサイズ変更設定が欲しい。拡大したときに自動的にビューも大きくする。縮小時には小さく *しない* 。大きくするのはあらかじめ設定されている大きさまで。

ビューサイズを直接指定するコマンドが欲しい。これは自動ビューサイズ変更を無効化する。
** DONE 矩形や楕円をパスに変換できるようにする
CLOSED: [2022-12-16 Fri 23:33]
** CANCELLED カスタムシェイプ/shape pickerで変形を指定出来るようにする
CLOSED: [2022-12-16 Fri 23:13]
任意の点を原点にしたり拡大縮小できるようにする。
*エディタがルーペに対応すれば不要だけど。*
shapeエントリーに次のプロパティを追加する。
- :origin-x
- :origin-y
- :scale
sectionやlayoutでは次のようにする。
- :shape-origin-x (:thumbnail-ではない)
- :shape-origin-y
- :shape-scale
カスタムシェイプツールでは貼り付け前のどこかでその変形を適用する。
やろうと思えばshape picker側で変形することも可能か？ edraw-dom-svg.el内の関数を使えば。

[2022-12-16 Fri 23:13]ズーム・スクロール機能を実装したので不要とする。こういった仕組みで過度に複雑になるのもどうかと思うので。
** DONE グリッドを数ピクセルにしたときに座標がずれているのを直す
CLOSED: [2022-12-17 Sat 01:46]
極端な話1ピクセルにしたときに位置が1ピクセルずれている。
2～3ピクセルくらいにしても、明らかにグリッドの間より前で次の座標にグリッドに飛んでします。
何か計算がおかしいはず。
ついでに小数点以下の間隔に対応したい。

グリッド非表示の時は問題ない。
原因:
- edraw-grid-round関数で整数除算(/2)による誤差
- edraw-snap-xyでグリッド表示時でもroundしていることによる誤差
** DONE グリッド表示が細かくなりすぎないようにする
CLOSED: [2022-12-17 Sat 02:09]
ズームアウトしていったときに一定よりも表示が細かくならないように適度に間引く。
スケールした間隔が8ピクセル未満なら、整数倍して8ピクセルを越える間隔で描画する。
** DONE 数値の.0を省略する
CLOSED: [2022-12-19 Mon 00:06]
出力したSVGの中の数値に意味の無い.0が付かないようにする。
結構根深い問題。

まずedraw-util.elに(edraw-to-string ((n number)))を追加する。floatが整数なら.0を省く。
formatで数値を文字列化しているところを全てこれで置き換える。
** CANCELLED edraw-shape-textのアンカーポイントの座標を属性とは別に保持する？
CLOSED: [2022-12-19 Mon 00:10]
(属性値の完全文字列化は取りやめ逆に数値型の維持を推進したので、以下は不要)

rectやellipseとは違いtextはアンカーポイントの座標を属性値とは別に保持しない。
これには属性値と別途保持した値との同期が不要になり一貫性を保ちやすいというメリットがある。また、以前はDOMツリー内で属性値を数値で持つことが出来たのでどこで保持しようが誤差に変わりは無かった。

属性値は必ず文字列で持つように変更したので、数値型で持つよりも変形等の編集時に誤差が生じやすくなってしまった。

- ~(/ 2 3.0)~ = 0.666666666667
- ~(* (/ 2 3.0) 100)~ = 66.66666666666666
- ~(* (string-to-number "0.666666666667") 100)~ = 66.6666666667

ちなみにstroke-width等の属性値は元から属性値のみが使われている。

問題は同じ座標値なのに他の形状と差が生じても良いのかどうか。同じ量だけ変形しても結果が図形によってわずかに変わってしまう。ただ、それを言ったらwidthやheightも似たような問題がありそうではある。あちらは文字列化では無く、右下座標や中心座標との変換で誤差が生じる。

また、undoが絡むと状況はより面倒になる。undoはプロパティを保存・復元するので、undoすると文字列でバックアップした値を再設定することになるので厳密には同じ値に戻らない。これはpathのd=にも当てはまる。それを言い出したら、セーブしてロードしたら厳密には元に戻らない。

一貫性のある挙動を保証するなら、変形のたびに文字列化すべきだろう。誤差の大きさも一貫して数値よりも悪くなるが、図形毎の差は小さくなる。

それより、現状を推し進めて積極的に数値型で属性値を持ち続ける方が良いのではないか。
** DONE shapeプロパティ(DOMツリー内の属性)における数値型を極力維持する
CLOSED: [2022-12-19 Mon 00:12]

プロパティ値の取得・設定は文字列型への変換を含んでいるが、数値誤差の改善のためこれを取りやめる。数値で設定した物は出来る限り数値のままの状態を維持する。

edraw-shape-textはx=やy=をキャッシュしていないので、他の形状よりも誤差が生じやすくなっていた(他の形状は座標値をアンカーポイントオブジェクトにキャッシュしている)。

edraw-svg-element-get-propertyやedraw-svg-element-set-propertyは文字列型への変換を含んでいるが、これを取りやめる。デフォルトプロパティまわりにも文字列化をしている所がある。

dom-set-attributeの代わりにedraw-svg-set-attr-stringやedraw-svg-set-attr-numberを使用することでどちらの型で属性値を設定するのかを明確にする。

edraw-get-propertyは数値型か文字列型かどちらが返ってくるか分からないので、edraw-svg-length-string-to-numberを使用して数値型を取得するべき。直接dom-attrで取得しているところも注意が必要。

これに合わせてプロパティエディタも修正した方が良い。edraw-get-property-info-listが返す情報をもっと充実させ、プロパティエディタがプロパティ値の型を正確に変換できるようにすべき。:to-string, :from-string, :to-numberのような変換関数をプロパティ情報で提供しても良い。
** DONE プロパティエディタ/編集終了時にプロパティエディタを閉じる
CLOSED: [2022-12-19 Mon 01:59]
複数のエディタで同時に開いている場合にどうなるか。
↑気にせず閉じよう。また開けば良い。何かデータを持っているわけでも無いし。
** DONE プロパティエディタ/プロパティエディタを中クリックで閉じる
CLOSED: [2022-12-19 Mon 03:00]
** DONE rectやellipseでwidthやheightに誤差が生じる問題を何とかする
CLOSED: [2022-12-19 Mon 05:40]
edraw-shape-rectはx=, y=, width=, height=へのset-propertiesをオーバーライドしてアンカーポイント座標の変更に置き換えているので、これらのプロパティ値がset-propertiesでの設定値とはわずかに変わってしまう問題がある。

例えばx=360のときにwidth=100.01を設定したとする。右のアンカーポイントの座標が ~(+ 360 100.01) => 460.01~ に設定されるが、360を引いてwidthに戻したときに ~(- (+ 360 100.01) 360) => 100.00999999999999~ となり元の100.01に戻らない。これはellipseやcircleのような中心・半径モデルでも同様。一般的に浮動小数点数の加減算は誤差が生じうるので。

widthやheightの値を確実に保持することでアンカーポイントがドラッグされるまでは直接指定された値を維持するようにすることは可能。

従来の流れ: set-properties → set-rectでアンカーポイントの座標を変更 → edraw-on-anchor-position-changedで属性を変更

これからの流れ: set-properties → set-rect-ltwhでアンカーポイントの座標を変更 → edraw-on-anchor-position-changed-ltwhで属性を変更

set-propertiesで指定されたx=, y=, width=, height=を確実に属性変更の場所まで伝える。これによって確実に指定値(といっても数値型に変換する。加減算の誤差は無い)と同じ値が属性にセットされる。

set-propertiesでの変化判定も現在の属性値に基づいて行う。わざわざ現在のアンカーポイントの座標からx=, y=, width=, height=を求める必要は無い。現在の属性値はUNDOデータに格納されるくらいなので、現在の正しい値を示している。
** DONE プロパティエディタでwidget値を更新しない条件を追加する(同一数値)
CLOSED: [2022-12-19 Mon 07:20]
現在はwidget値文字列が同一かどうかで判定している。これだと100、100.、100.0が全て別と判定されてしまう。200.00001の末尾の1を消したときに一気に200にまで変わってしまう。200.0000と200は同一視してwidgetを更新しないべき。

1e-8くらいの非常に小さい差も無視した方が良いかもしれないが、そのような状況があるのか不明。入力した数字を数値化してまた戻して再度数値化したときに、二つの数値が異なる場合があるかどうか。 ~(str-to-num input-str)~ と ~(str-to-num (num-to-str (str-to-num input-str)))~ が一致しないケース。おそらく無いと思うけど……｡
** DONE Image要素の右クリックメニューからSet FillとSet Strokeを消す
CLOSED: [2022-12-19 Mon 18:21]
Setが空になってしまうので代わりにSet Hrefを追加する。
** DONE textの文字列や属性値の文字列をエスケープ処理する
CLOSED: [2022-12-19 Mon 19:52]
edraw-svg-printにtodoあり。
例えばstyleプロパティに次のように書けてしまう。
: " /><rect x="20" y="20" width="100" height="100" fill="red
text要素でも同じ問題がある。
** DONE rectやellipseの辺の中心にあるアンカーポイントの位置ずれを直す
CLOSED: [2022-12-20 Tue 01:09]
整数に丸められているので、ズームすると中心がずれているのが気になる。
** DONE edrawリンクから中身の図形をコピーする機能を追加する           :ORG:
CLOSED: [2022-12-20 Tue 09:48]
リンクの上でコマンドを実行したらクリップボードにコピーされて他のedraw-editorでペーストできると部品の切り貼りが捗る。カスタムシェイプ機能でも良いが、org文書自体がシェイプカタログになるというのも面白い。

edraw-org-shape-picker-modeなんてものがあると面白い。org文書がshape-pickerとして機能する。
** DONE edrawリンクのfile-data形式を相互に変換できるようにする        :ORG:
CLOSED: [2022-12-20 Tue 09:48]
+editorに変換するメニュー項目があっても良いし+ 、edrawリンクの右クリックメニューにあっても良い。
** DONE edrawリンクのメニューにSVGエクスポートを追加する              :ORG:
CLOSED: [2022-12-20 Tue 09:49]
リンクを右クリックして出るEdraw Link Menuに、中身のSVGを表示する機能を追加する。
エディタの d e b 相当。ファイルリンク時も一応表示する。
専用のバッファに表示してファイルへ保存したければ自分でしてもらう。
** DONE .edraw.svgファイルに対するfileリンクを編集できるようにする    :ORG:
CLOSED: [2022-12-20 Tue 20:33]
通常のfileリンクを直接編集できるようにする。
: [[file:somefile.edraw.svg] ]
edraw-org-edit-regular-file-linkを追加した。
** DONE transform属性があるrect要素等をpathへ変換すると起きる問題を修正する
CLOSED: [2023-03-10 Fri 18:08]
transform属性は残ったままtransformが適用されたpathへ変換されるので、二重に変形された結果になってしまう。
** DONE 変形の意味を整理する
CLOSED: [2023-03-12 Sun 15:50]
現在(edraw-transform shape matrix)は別々の方式が混在している。
- グループはtransform属性を変更する。
- それ以外は座標、長さ値を変更する。
どちらにも有用性があるのがやっかい。
基本的には後者は全ての図形が正しく変形できない。rectやellipseは軸に沿った形状しか表現できず、それ以外はtransform属性を使用する必要がある。線の太さといったものをどうするかも問題。

→次のようにする:

- edraw-transformはオブジェクト自身が決める方式で変形する。
  - rect, ellipse, circle, imageは回転成分を含むときtransformプロパティを使う。
  - textはスケーリングまたは回転成分を含むときtransformプロパティを使う。
  - いずれの場合もすでにtransformプロパティがある場合はtransformプロパティを使う。
  - それ以外の場合(path、平行移動のみ等)はアンカーポイント座標を使う。
- edraw-transform-anchor-pointsは座標に行列をかけて変形する。
- edraw-transform-prop-multiplyはtransformプロパティを変更する。
** DONE transform属性をアンカーポイント座標に適用出来るようにする
CLOSED: [2023-03-12 Sun 21:02]
transform属性をアンカーポイント座標に適用してtransform属性を削除する。
もちろん線の太さなどはtransform属性の拡大の影響を受けなくなる。

- edraw.el
  - edraw-apply-transform-prop-to-anchor-points
  - edraw-transform-anchor-points
  - edraw-transform-anchor-points-local
** DONE シェイプピッカー/折りたたんでいるところが見えてしまうのを修正する
CLOSED: [2023-03-13 Mon 14:17]
上にスクロールすると折りたたんでいるところが見えてしまう。
outline-modeやorg-modeのように不可視領域の始点は行末じゃないとダメ？

隠す範囲にdisplayプロパティ(文字列だろうと画像だろうと)があると、そこがinvisible(overlayだろうとtext propertyだろうと)にも関わらず表示されてしまう事がある模様。
おそらくEmacsのバグではないか。
隠すためのオーバーレイにdisplay ""を指定することで回避できた。
** DONE グループをアンカーポイントのドラッグで変形できるようにする
CLOSED: [2023-03-17 Fri 09:56]
選択時、角や辺にアンカーポイントを表示する。
内部の範囲を境界矩形にして操作できるようにする。
回転した場合でもローカルな軸に沿って変形する(rect等と同じような挙動で良い)。

懸念:
- ローカルなAABBで変形すべきか否か => カスタムシェイプにグループ化した図形(ラベルなど)を入れて、それを変形することを目的にしている。なのでローカルなAABBで変形した方が直感的。回転してからも、元の図形の軸に沿ったスケーリングがしたい。
- どの方式で変形すべきか => ラベルで使うことを考えると線が太くならないようにしたい。極力アンカーポイントの変形で済ませたい。ただ、図形によっては線の太さも含めて変形したい場合もあるかもしれない。オプションで変更できても良い。
- 幅や高さが0になったらどうするか => 元々幅高さが0の場合はその軸方向に拡大するのは不可能。ドラッグ中に0になるとそれ以降変形できなくなるので、マウス移動時は直前の変形を元に戻してから(UNDOしてから)再変形すべき。
- ドラッグ中に誤差が累積しないか => UNDOしてから再変形することで回避。
- 左右上下反転時に何が起こるか => edraw-shape-with-rect-boundaryは反転を考慮していないので特別な手当て(オーバーライド)が必要。AABBは左右上下反転を表現できないので、元のp0p1からの変化を見る必要がある。
- 特別な仕組みが必要か => とりあえずedraw-shape-with-rect-boundaryで対処可能。

工程:

1. edraw-shape-with-rect-boundaryを継承する。(必然的にローカル座標系での変形になる。edraw-shape-with-rect-boundaryはrect等transformプロパティの影響を除いた矩形を制御するための物なので)
2. (edraw-get-rect group)を実装する。アンカーポイントを配置する基準となる矩形を求める。edraw-shape-aabb-localを作成してそれを呼び出す。
3. (edraw-on-anchor-position-changed group old-p0p1)を実装する。アンカーポイントが変化したときの処理を書く。p0p1の変化を変形行列にしてedraw-transform-localを呼び出す。edraw-transform-localは子孫のedraw-transformを呼び出す。元の幅や高さが0のときはその軸方向には移動できないようにし、スケールも1にする(ゼロ除算も回避)。
4. 図形の変化を祖先要素に伝搬する仕組みが必要。edraw-on-shape-changedで祖先要素のedraw-on-descendant-changedを呼び出す。
5. グループの子孫の内容が変化したときの処理を書く。UNDO等で子孫の内容がグループオブジェクトの介在無しに変化することがある。グループの子孫が変化したら、edraw-set-p0p1-without-notifyでアンカーポイントの位置を更新する。グループ自体も変化イベントを発生させる(選択UIを更新するため)。
6. (edraw-set-p0p1-without-notify group l t r b)を上書きする。デフォルトの実装だと左右上下反転したときに正しく動作しないので。
7. アンカーポイントの移動処理において、UNDOを使用する。edraw-mouse-down-anchor-pointを修正する。移動の繰り返しでは幅高さが0になったときにそれ以上変形できなくなってしまう。誤差も累積する。マウスを動かすたびにUNDOしてから再度移動すべき。
8. 選択中、ローカルな軸に沿った境界線を表示する。

本質的にグループが角や辺のアンカーポイントを持っているわけでは無いので、edraw-groupがアンカーポイントを持つ実装はあまり良くないのかもしれない。複数図形を選択してその全体を変形するような操作を実装する場合は、アンカーポイントとは別の仕組みが必要になる(マニピュレータ)。本来はその仕組みを使うべきかもしれない。とは言え、比較的簡単に(大がかりな仕組みを追加せずに)実装できたのでとりあえずこれで。
** DONE edraw-get-rectをedraw-get-rect-localへ改名する
CLOSED: [2023-03-17 Fri 10:32]
edraw-shape-with-rect-boundaryが持つedraw-get-rect関数はローカル座標系での矩形を返すので。
edraw-shape-aabb-localと意味が被っているような気もしなくはないが、あくまでedraw-shape-with-rect-boundaryが必要とするアンカーポイントを決めるための矩形を返すという位置づけ。そういう意味で言えばもっと名前を変えるべきかもしれないが、それはとりあえず置いておく。最低限ローカルであることは示す。
** DONE 変形方式設定を追加する
CLOSED: [2023-03-17 Fri 17:40]
transform-method
- auto : Auto
- transform-property : "transform" Property
- anchor-points : Anchor Points

edraw-transformはそれに従う。
groupに対するedraw-transformは子孫に対する個別のtransformにする。

次の問題は他のTODOにする。
- local or not?
- edraw-translateはどうすべきだろう。

正直この方法が適切なのかはよく分からない。コマンド毎のオプションにすべきのような気もする。

切り替えメニューの位置もあちこちに分散させて良い物かよく分からない。
** DONE edraw-translateも変形方式設定に従うようにする
CLOSED: [2023-03-17 Fri 21:41]
図形のドラッグ時にedraw-push-undo-translateを使う方法は止めて、アンカーのドラッグでやったように移動のたびにUNDOする方式にする。

edraw-translateはedraw-transformで処理するように変更する。
** DONE UI要素の更新を遅延する
CLOSED: [2023-03-17 Fri 23:49]
UI要素の更新はedraw-update-imageの直前に一回やれば済むはず。
UNDO等で一度に大量の変更が発生したときに連続して edraw-on-selected-shape-changed → edraw-update-selection-ui が呼ばれてしまう場合がある。

edraw-update-all-ui-svg では次の関数を呼んでいる。
- edraw-update-root-transform
- edraw-update-scroll-transform
- edraw-update-transparent-bg
- edraw-update-grid
- edraw-update-selection-ui
それぞれを個別にInvalidateできるようにしてはどうか。
** DONE パスのアンカーポイントを移動できなくなったのを直す
CLOSED: [2023-03-18 Sat 15:17]
ドラッグによるアンカーポイントの移動時にUNDOするようにしたのが原因。
UNDOするとパスのアンカーポイントオブジェクトは無効になってしまう。
UNDOするとdプロパティ全体を復元するので。
dプロパティ全体を戻すのでは無く、「先頭から何番目のアンカーポイントの位置を何へ移動する」というようなUNDO情報を作れば回避できると思う。
ついでにハンドルも直す。ハンドルの場合は反対側のハンドルも一緒に動くことがあるので注意が必要。
** DONE textに対するコンテキストメニューにSet→Font Sizeを追加する
CLOSED: [2023-03-18 Sat 20:58]
** DONE ラベルのカスタムシェイプを追加する
CLOSED: [2023-03-18 Sat 21:50]
右下が折り曲げられているようなラベルの形状を追加する。
グループ化された物を登録する。
色や線幅はグループのプロパティで変更できるようにする。

二重線のラベルも追加する。
** DONE グループのアンカーポイントをドラッグして0サイズにするとエラー
CLOSED: [2023-03-18 Sat 22:43]
ドラッグして幅高さを共に0にすると何かエラーが出る。
: Error running timer ‘edraw-update-image-on-timer’: (wrong-type-argument number-or-marker-p nil) [18 times]
edraw-update-image-on-timerということはUI要素から出てる？　でもimage要素の場合は出ないみたい。

アンカーポイント座標がnilになってしまっている。
edraw-shape-aabb-localがnilを返している。
pathをsegment listへ変換する部分で、長さ0のセグメントを破棄してしまっている。
長さ0のセグメントを破棄しないdefvarを追加した。
どのみちaabbがnilになることはあり得るので(グループ内に何も無くなったときなど)、その時は(0,0,0,0)として処理することにする。
** DONE group化を解除するときに変形属性を適用出来るようにする
CLOSED: [2023-03-19 Sun 11:09]
適用するかy/nで聞いてyなら適用してからグループ化を解除する。
(fill系やstroke系の属性は適用しなくて良いのか)←うーん切りがないので止めておく。
** DONE テキストの文字列を空に出来ない問題を修正する
CLOSED: [2023-03-19 Sun 13:50]
空にするとプロパティエディタはtextプロパティをnilに設定しようとする。
textのtextプロパティは属性ではなくinner-text。
(edraw-svg-text-set-text element text)はtextがstringpの時以外は何もしない。
stringpの時はいったん全ての子孫を削除してからtextを子ノードとして追加する。
stringpでなくてもとにかくいったんすべての子孫を削除するようにすることで解決。
** DONE ペーストや複製時のZ順序はどうなっているべきか
CLOSED: [2023-03-19 Sun 15:37]
edraw-create-shape-without-default関数にindex引数を追加しているときに気がついた。新しく生成した図形はどのZ順序にあるべきか。
+ペーストなら一番上？　新しい図形は一番上に追加することになっているし。+

複数ある場合に順番が滅茶苦茶だけど良いの？　選択順なのかな？
単体の複製時は元の順序の次になっていた方が良くない？

基本的には、最前面かまたは選択している図形の中で最前面より手前に挿入すべき。
複数ある場合は元の順序を維持するべき。
最低限元の順序を維持していれば、選択オブジェクトを最前面や最背面へ移動することは簡単。となるとデフォルトでは「現在選択している図形」の前にペーストするのが良さそう。選択が無ければ最前面。

とにかくコピー時にshape-descriptorのリスト内が順番通りになっていなければ話にならない。

関係する操作:
- edraw-copy-selected-shapes : ソートする
- edraw-shape-from-shape-descriptor-list : index引数を追加する
  呼び出す物:
  - edraw-paste : 選択している図形の一つ前にペーストする。選択が無ければ最前面。
  - edraw-create-selected-custom-shapes (今回とは無関係)
- edraw-clone : 複製元の一つ手前に生成する
  呼び出す物:
  - edraw-duplicate-and-select
  - edraw-split-path-at (pathを分割して出来るpathの順序に影響)
** DONE エディタ全体の拡大率を設定できるようにする
CLOSED: [2023-03-19 Sun 22:39]
環境によってはimage-scaling-factorをいじらず、エディタだけ若干大きくしたいことがある。
変数edraw-editor-image-scaling-factorを追加して、nilの時はimage-scaling-factorを使用し、数値の時はそれを使う。
** DONE カラーピッカーで:color-name-schemeオプションが効かないのを直す
CLOSED: [2023-03-19 Sun 23:13]
letでedraw-color-name-schemeに束縛して、同じ場所でedraw-color-from-stringを呼び出している。let*にするかletを分けるかすべき。
** DONE プロパティエディタやシェイプピッカーをフレーム表示できるようにする
CLOSED: [2023-03-25 Sat 12:29]
条件:
- 別フレームに表示できるようにする。
- 操作中にフレームにしたりウィンドウに戻したり出来るようにする。
- 最後に表示したフレームの状態を記憶して、再びフレームを表示したときに復元する。
- ウィンドウに戻したとしてもフレームの状態は保持する。

独立したフレームで任意の位置に固定したい。フラフラ動かれると困る。
child frameはおそらく適切ではない。フレームによってキャンバスが隠れてしまうから。

結構大がかりな変更になる。

1. edraw-property-editor-open内の処理を整理する。
   バッファの取得・作成、オブジェクトの作成、内容の作成、オープン。
2. edraw-buffer-displayクラスを作る。
   オープンの時、frame-modeならフレームを作成し、そうでないならウィンドウを作成(いままで通り)する。
3. 切り替えUIを作る。
4. 状態をファイルにセーブする。

プロパティエディタは右クリックでメニューを表示する。そこにフレーム操作を加える。
** DONE 図形クラスを拡張可能にする
CLOSED: [2023-03-25 Sat 19:14]
SVGに無い新しい図形を定義できるようにする。

data-edraw-type=属性によって、生成するオブジェクトを切り替えられるようにする。もちろん指定が無ければタグ名をtypeにして生成する。

例えば <path data-edraw-type="edraw-star" d="..." /> で edraw-shape-star クラスのオブジェクトを生成する。頂点数(?)プロパティと半径プロパティがあって、それを変更すると自動的にd=が再計算されるというような。

図形タイプリスト(edraw-shape-types)を作成する。タイプ毎にSVGノードの作成(:create-element)とSVG→オブジェクト変換(:from-element)を定義する。

tagという表記を使っている部分を確認して可能な限りtypeに置き換える。
** DONE 手書きツールを改善する
CLOSED: [2023-03-27 Mon 20:33]
もっと点の数を減らしたい。
** DONE 選択ツール 図形をM+ドラッグで複製しつつ平行移動する
CLOSED: [2023-03-28 Tue 15:26]
+Ctrl+の方がいい？+ Ctrl+は複数選択で使うので。
** DONE 選択図形の複製機能を追加する
CLOSED: [2023-03-28 Tue 15:55]
コンテキストメニューにDuplicateを追加する。
** DONE SHIFT+ドラッグで水平垂直45度移動に限定する
CLOSED: [2023-03-28 Tue 21:46]
最初にSHIFTが押されていれば分かるが、それ以降のmodifierの変化は分からない。
S-mouse-movementが来たりは *しない* 。現在のキー状態を直接取得する方法も無い。
read-eventで何かキーが押されたらモードを切り替えるというようなことなら出来る？
Emacsではこの辺りは難しいので、とりあえずS-down-mouse-1、つまりSHIFTを最初に押しているときだけ45度単位移動にする。
また、rect, ellipse, image, customツールはSHIFTが押されている場合は正方形に限定する。

45度単位のスナップ。

[[edraw:data=H4sIADrpI2QAA7VWUZPaNhD+KxplppN0jJFWki0nmIfeQ/tAnpP0zcUCPOezb4zugA4/vivZJmBz6XFtmDtWK6H9vt2VP3m2fV6TXZHbTUoVY5RsTLHe2JQKic6zabZFXaWUh5yS/UNZbVO6sfbx43S62+3CnQjrZj0FxtgUA9H5LDerLSnylJq8yXYT5+LsQ9bcm4a05kuLFtHO/6NDxInnwux+q/cpZYQR7v4oaczqK3Lzg29+UDeFqXBD9mRrSra2qe9NSqu6MpSsirJM6bskSegljQmbZE1T75DNY2Y3BNc+s4CHirBA43ccskD9Scl0Ppu2vHDg6M9njVnal2vk2FJy8N8d+mq1GvL6zuWvbHm/buqnKvdg6/OlOj/0/PrtbSpt4DaUYy6ResQWoL3tKzkxFS4+NeX7d6O8P/SMJl0mwsO/AgsBAgRaOCt/MpZMQi6kVBFLdIRGBsBUmAAwzrUWmjO9gJiFOlJKioRxoaSUAecyZHGcaM15xHUCYsiAf2fgcxptCEZhF0PoOA6G/C4zuMzthwRiFXIZcx2BiiMuBQQgZagVaC5iCUKrWCxGU8Fw25vxRwWIhrkpHY0qoGFcpjdTGNYyHrWRX232qC3/YxMGMxCPexCNOhWpWxmYsiwet6bXizxHLViikPhneXnoBo2bcfbQ2lPcaKnwc+Uhc/Em9WO2LKwTpFB5NGv2lqzqyk5W2UNR4sq3J/J7bTfFkrbz2+JvjMuBEvfbSVYtN3WT0q3NGntSNQDwOse58KoHsaLzQ2qz6j1AqHKz/vDrfjZ1EW7A1APMhyLPS3MJ6sCSVmQ5Fnv+01Dw1HkUwTCzm0GG5XspFaU9SKxd+U65nKnj2WH5sVxiVQIO7E5wb4n3I0a8H7G7cx8vab8O7gY7fwpwwun7nbMCf9Tpvbfo35186NbB+7ee+VeXUf77KcQqCugPBPbqeDiSX0r7iVwcxuP+eHMPh+AvHpQWXeCGOeI48Evsw/FKY1/sI5aYS7zPnVXRm+5YeO0dC9IflgUADzjj/wGslzEnXSB76YJOusDJj9MuP+gKyPxn+HZ0Fuvq61y/ywOdNFJeBXIvcGv8x/fR+T/iN+hE3goAAA==]]

まずはx軸にスナップすることを考える。x軸から+-22.5度の範囲はx軸にスナップする。つまり、 ~abs(y) < tan(22.5deg)*abs(x)~ ならx軸にスナップする。そのときy座標は0とし、x座標だけ残せば良い。

y軸にスナップするときも同じようにすれば良い。

45度の線にスナップするのは、上の条件に合致しなかった場合。xとyの負号だけを取った方向の線にスナップする。

クリック座標(x,y)から一番近い45度線上の点へスナップしなければならない。

[[edraw:data=H4sIAL/2I2QAA71WXZOaMBT9K5nri05BkoCIHfGhfWgfts/t9o1K+BiR7IQo2l/ffEBl6+7UjmUH4ebDnHNuci66bo45astUFjH4GAMqWJkXMgYaqs6RiabkdQxkTgCd9lXdxFBI+fTe89q2nbf+nIvcoxhjTwHBZp2yrEFlGgNLRdK6uqtG94nYMYFs+GrZQuj6nztGNXAsWfuBn2LACCOiP4AEy77FsDCNR9PgomS1WpAcJAfUSMF3LIaa1wxQVlZVDJNwEW6zFTxX4mI3EYK3StBTIguk5r5gh8wXCDuRei7n2Fl8B+Rt1p6Vpho6g81asK18fZu0YEBn8+wEZFn2p7SLlh/JdpcLfqhTQ5YPp3h67vX1yyer1aoHtlBaeYAdte8P1MaezO1FGuQbYEK1nOIHHf4O0k8EL8tROOp2AnxJfbLE+voHII1AFBKJfCfye5O4rFaTB1FNJ1fnORvQ9Qd/W/KGa2VVU3KVP70VhwQWR8d7cBY29aUJ96AEBiR4BUOyk0QZr6WbJfuyUsZ9PKBPXBblFux4U/5U8CQCpL/rJvW24CKGfZmm1aXKKKXG/CSw9qc+hg1de3rN/2ehdMASjMXSpaL3f7xUOpJgmMgtNos6m0V32hV3OPh+u4bWruFdKJEBid7KrtHASP5YZ0zwgIWMbdfwDUiiMbeLDgtvGjh0NtrBhJZpqYl8x589q8CrWlG/jOooTc0pbR+7iCg24318wbkX12f6GsfK4eVNMj29O8+83+8sL1e3+lO2+QWRRQVS4wkAAA==]]

** DONE 日本語に翻訳する
CLOSED: [2023-04-01 Sat 00:06]
地味によく分からないのが言語、国をどのように割り出すか。
- 環境変数
- current-language-environment
- 手動設定

Emacsのtutorialと似た方法を採るべきだと思う。

tutorialは次の方法で言語に対応したファイル名を取得している。

#+begin_src elisp
(get-language-info current-language-environment 'tutorial)
#+end_src

#+RESULTS:
: TUTORIAL.ja

get-language-infoはlanguage-info-alistから情報を取得している。

language-info-alistから日本語に関する部分を抜き出してみる。

#+begin_src elisp
("Japanese"
 (documentation . t)
 (sample-text . "Japanese (日本語)	こんにちは, ｺﾝﾆﾁﾊ")
 (features japan-util)
 (input-method . "japanese")
 (coding-priority iso-2022-jp japanese-iso-8bit japanese-shift-jis iso-2022-jp-2004 euc-jis-2004 japanese-shift-jis-2004 iso-2022-jp-2)
 (coding-system iso-2022-jp japanese-iso-8bit japanese-shift-jis japanese-iso-7bit-1978-irv iso-2022-jp-2004 japanese-shift-jis-2004 euc-jis-2004)
 (charset japanese-jisx0208 japanese-jisx0212 latin-jisx0201 katakana-jisx0201 japanese-jisx0213\.2004-1 japanese-jisx0213-1 japanese-jisx0213-2 japanese-jisx0208-1978)
 (tutorial . "TUTORIAL.ja")
 (iso639-language . ja)
 (exit-function . use-default-char-width-table)
 (setup-function . setup-japanese-environment-internal))
#+end_src

iso639-languageが使えるのではないか。

#+begin_src elisp
(get-language-info current-language-environment 'iso639-language)
#+end_src

#+RESULTS:
: ja

ただ、iso639-languageが設定されている言語は非常に少ない。
tutorialファイルの拡張子から取ってみてはどうか。
もしくは大人しく current-language-environment の値自体を使うか。
いや、自分で対応表を持てば十分か。
("Japanese" . "ja") => edraw-msg-ja.el
もちろん言語ファイル名を設定で直接指定出来るようにする。

current-language-environmentの変化を監視するかどうかは微妙。一応set-language-environment-hookでできるけど。とりあえずやらないでおく。起動した後に切り替える人なんて少ないからね。

後の課題はメッセージを収集する方法。gettextユーティリティのようなものが欲しい。
elファイルからメッセージを収集してメッセージカタログを更新するコマンドが必要。メッセージ使用箇所へジャンプするコマンドも欲しい。
** DONE プロパティエディタをフレーム化したときに図形が作れないのを直す
CLOSED: [2023-04-01 Sat 10:25]
フレーム化していると矩形ツールや楕円ツールで図形が作れない。
ドラッグ中にフレームがセレクトされるからだと思う。
** DONE プロパティエディタの順序に関する機能を改善をする
CLOSED: [2023-04-01 Sat 10:24]
- 何個中何番目の図形かを表示する(図形の時のみ)。
- 前、次ボタンを適切にdisable(:deactivate)する。ボタンの位置を動かないところにする。
** DONE M-矢印キーは複製にしたい
CLOSED: [2023-04-01 Sat 22:53]
連続するM-矢印キーも一つ一つ複製してから移動する。
M-S-は10ピクセル単位の複製移動。
数値入力は「C-u 数値 矢印キー」で既に出来る。単体の「C-u 矢印キー」の時にプロンプトを出す(現在は4ピクセル移動)。
** DONE パス編集/パスツールのSHIFT+クリックで点を追加するときに45度単位にすべき
CLOSED: [2023-04-01 Sat 23:46]
** DONE 一番最初に選択するツールを変更できるようにしたい
CLOSED: [2023-04-02 Sun 00:21]
rectよりもselectの方が間違いが無い。
カスタマイズ変数を追加するくらい？
デフォルトもselectの方がいいのでは？

edraw-editor-default-toolを追加。
** DONE ドキュメントの切り抜き機能を追加する
CLOSED: [2023-04-02 Sun 10:14]
ドキュメントを内容に合わせてリサイズしたい
トリミングしたい。内容にフィットするようにリサイズしたい。
最低限平行移動せずに全て収まるようなサイズに変更したい。
ドラッグで範囲選択させるのが一番分かりやすいのでは？
edraw-read-rectangleで範囲を指定させて平行移動とサイズ設定をする。
edraw-cropコマンドを追加する。
** DONE パス編集/アンカーポイントやハンドルポイントの座標を数値入力したい
CLOSED: [2023-04-02 Sun 11:08]
現在の座標をプロンプトに表示しつつ座標を入力したい。
+キー割り当てもしたい。+ キー割り当てはとりあえず保留。
** DONE 矢印キーで何かを移動したとき等にその座標を表示する
CLOSED: [2023-04-02 Sun 12:08]
それぞれについて何を表示すべきか。
- 複数の選択図形
- rect
- ellipse
- text
- path
- image
- group
- アンカー
- ハンドル
アンカーとハンドルは点の座標を表示すれば良いとして、他はとりあえずAABBの左右上下中心を表示しておく。テキストはちょっと問題ありかもしれないが必要なら対応する。

他にも、アンカーやハンドルを選択したときにも座標を表示する。
** DONE 点を他の図形に接続する機能を追加する
CLOSED: [2023-05-28 Sun 19:02]
1. 図形と直線の交点を求める
  - edraw-svg-element-and-line-intersections (内外判定関数を流用)
2. 接続関係を表すクラスを追加
  - edraw-point-connectionクラス(srcとdstを持つ)
  - edraw-point-connection-srcクラス(接続元を表す)
  - edraw-point-connection-src-anchorクラス
  - edraw-point-connection-src-attrsクラス
  - edraw-point-connection-dstクラス(接続先を表す)
  - edraw-point-connection-dst-shapeクラス (接続元の方向を使う)
  - edraw-point-connection-dst-shape-dirクラス (方向を角度で指定する)
3. edraw-shapeクラスに対する修正
  - 新規スロット
    - point-connections
    - point-connection-referrers
  - 新規メソッド
    - 内部ID管理
      - (edraw-internal-id shape) 接続先を表すのに必要。edraw専用の内部ID
    - スロットのアクセッサ
      - edraw-get-point-connections
      - edraw-set-point-connections
      - edraw-get-point-connection-referrers
      - edraw-set-point-connection-referrers
    - 接続オブジェクトの検索、追加、削除
      - edraw-find-point-connection
      - edraw-add-point-connection(connection版)
      - edraw-add-point-connection(list版)
      - edraw-remove-point-connection(connection版)
      - edraw-remove-point-connection(src版)
      - edraw-remove-point-connection-referrer 内部的に使用
      - edraw-remove-all-point-connections 基本的には必要ない
      - edraw-remove-all-point-connection-referrers 接続先が削除されたとき使用
    - 接続点座標の更新
      - edraw-update-point-connection-referrers 接続先が変化したときの処理
      - edraw-update-all-point-connections 接続した直後の最初の更新で使用
    - 接続状態の保存・復元
      - edraw-update-point-connections-attribute 属性を更新する。この際IDが必要
      - edraw-restore-point-connections エディタ起動時に使用
      - edraw-point-connection-parse-* 属性の解析に使用
      - edraw-point-connection-skip-* 属性の解析に使用
  - 動作の修正
    - edraw-on-shape-changedでedraw-update-point-connection-referrersを呼ぶ
4. edraw-shape-point-pathに対する修正
  - (edraw-anchor-index-in-path shape-point-path)を追加
  - (edraw-get-actions shape-point-path)に接着コマンドを追加
  - edraw-glue-to-selected-shape(接着コマンド)を追加
  - edraw-unglue(接着解除コマンド)を追加
  - edraw-glued-p
5. edraw-editorに対する修正
  - edraw-initialize-svg-documentのタイミングでedraw-restore-point-connections
  - (edraw-restore-point-connections editor)を追加
  - (edraw-find-shape-by-internal-id editor id)を追加
  - (edraw-find-shapes-by-xy list xy)を追加
6. UNDOがまとまらない問題を修正
  - 図形に対するほぼ全ての変更のUNDOをグループ化(edraw-on-shape-changedで追加の変更がされる可能性があるから。merge問題は保留)
  - プロパティエディタでプロパティ名をドラッグしたときの冗長な更新を抑制

やり残し
- [X] 全選択移動すると線がズレる
- [X] 日本語化
- [X] 接着解除コマンド
- [ ] 不要な内部IDの削除
- [ ] 距離を調整する機能
- [ ] 接続ツール
- [X] 接続されている点を削除したときの処理

  edraw-delete-pointでanchorを削除したとき、そのアンカーに対するconnectionがあるならそれも削除する。
- [ ] 接続されている点を移動したときの処理 (OBJDIRに切り替えたい)

  edraw-moveでconnectionがあるanchorを移動するときにそのような処理をする？
  いや、ツールの方で対処した方が良い。全体の平行移動等と区別が付かない。
- [X] 接続されている図形を移動したときの処理(その図形に設定されている全接続を更新してしまうのが手っ取り早い)

*** 座標の計算手順

下図PATH1オブジェクト内のA0(先頭)とA-1(末尾)の座標を求める。

[[edraw:data=H4sIAA2acmQAA81WXW+jOBT9K5b70koh+AMIGYVI3dVq52FGGo1G2p15o8EkqAQqQ5tmf/342oTy2TZpqq5oQ8D2OcfX996TRfGwRrskKjcBdj2C0UYk600ZYIephwchiyTPAkynFKPHbZoVAd6U5d0n297tdtMdn+ZybTNCiK2A8HIRibhASRRgEclwZ8GjersN5a2QyNz+MWwerp4/V4zqxUMidn/kjwEmiCAKfxhJEf+rtOkvP/WXXCYiUwvC+zLHqChlfisCnOWZwChO0jTAFx6BC7eVWMQKpcx3StBdWG6QGvtKJnTqIjLx1edsSibuL4zs5cI20v43ymlfOTXSqdHOpu7Ha49viE/8rnZ2fNRtyJvlQopVOZ6cIBijvf48CIjjrrQnLTfh6nYt8/ss0mTr5lAe7Q/6DJRZrOPsKrUO+UJn6u6bO2PqPld3EGX4rEonexJwQWO4NJveSj3APbhq2VGkJEm1Hx35vbnDIzcbBJYK3m9GgbwdmpOXsWG64+rplLv1dNqYThtn4MLVDQtvhOWQJk18r8KfHYkPUXbgGiAcwGf0DPoPhE18v8J3zxuf4YxUGchZlYmcNFYemoepI0tkavq9TC8vej3wqhYQhcVGvQr3usp7yWw3Ww6UwMwQ+/WOjLBn0PrCijKUZU8a7Urrq+iFwiOTuRLkK2G0V4t0uBZHkRSEhpofhXRYzSohnA6GprGyh92F4pUQNj8Z6pkUYEemQC9UpvOpNHCNwtHMbfVPzzVnNJA13d7ZUXTEXtoiSvFYojjPSisOt0mq0H7eo7/zcpOssHlfJP8JKF+MYK4VZqtNLgOsE7QuWcaYbpqMmKaptoSX1wRdXlvO1cKGlRVXc5I+u7NwL68pcPFRLt0FzsXFgIuNc83OyMWBi9ZcIk2Tu0KgFbRU4FntjS01cwbcjBszG+nKgzCcHY1T5zD3TA47pPL8I2qStYyCOy9aetetm07es/kB6Ocs/WRs9339n8/f0T/1CfrGM7lHJ9RlIyd4sKk3t6Unl22JmM8nzPG/gJhh/zxVw0uG2lIxY+CZfM7G+vFrrQqQwDMB6nSnMgXma//kvv9W/wQo8E+AeoN/AlRV7grKGYN6N+vq9R4+8z7GP1V5OrTyNMc/X+8nwz5z4GKed2b/HPYZ7jd8pu0Jw5kz7DM1jPaZ43BO/pmyTaIoFbj7O8U1EfQ9vPz+158/aDfE1ThnJ0Z4gFYTsRbR+TfEiNrRt+sfn+mriF71i85EwidtXS5W2MVdmKFVGhZFgDVWmsAJmmVGx1RlcYCSrBSyUFaW5NklTLrUYZ+uBAxMUDWVXk2QGRDRWkAyAsNLRCiCwhPbmtGio5SsS6nqy3CyDmcVP3ut/ouH9fI3C4hlwAgUAAA=]]

A0はRECT1に接続すべきPATH1内のアンカー点である。A0の座標は、RECT1の中心からA0の次の点(A1)へ向かう線上にある。また、RECT1の辺の上でもあるので、両者の交点がその座標となる。A-1も同様に考える。これら各点、各オブジェクトの関係を仮に次のように表す。

- ~PATH1.A0 = intersection(line(RECT1.CENTER, PATH1.A1), RECT1.edge)~
- ~PATH1.A-1 = intersection(line(RECT2.CENTER, PATH1.A-2), RECT2.edge)~

長いので略して次のようにも書く。

- ~PATH1.A0 = connect-obj(RECT1, PATH1.A1)~
- ~PATH1.A-1 = connect-obj(RECT2, PATH1.A-2)~

PATH1.A0のconnect-obj(RECT1, PATH1.A1)はどのように計算すべきか。

- A1が存在しない場合、RECT1の中心点とする。または点を更新しなくても良い。(PATH1に点が一つしか存在しないケース)
- A1が固定座標の場合、問題なく計算できる。(上図左のケース)
- A1が計算で求めるべき点(接続されている点)の場合。(上図右のケース)
  - ~PATH1.A-1 = connect-obj(RECT2, PATH1.A-2)~

    インデックス番号を正規化する。上図右のケースだとA-1はA1、A-2はA0なので

    ~PATH1.A1 = connect-obj(RECT2, PATH1.A0)~

    A1の座標は今まさに求めたいPATH1.A0に依存しているので循環していることが分かる。

    ~PATH1.A0 = connect-obj(RECT1, PATH1.A1) = connect-obj(RECT1, connect-obj(RECT2, PATH1, A0))~

    connect-obj(RECT2, PATH1.A0)は現在計算中のA0を含んでいるので、これではいつになっても計算が終わらない。そこでRECT2.CENTERに置き換える。

    ~PATH1.A0 = connect-obj(RECT1, RECT2.CENTER)~

    となり計算できるようになる。
  - それ以外のケースはひとまず非対応で良い。

*** data属性上での接続の表現

物体Aの任意のアンカー点pの座標を、「物体Bの中心から物体Bの任意のアンカー点qへの直線」と「物体Bの辺」との交点に接続したい。そのことを次のように書いた。

- ~A.p = intersection(line(B.center, A.q), B.edge)~
- ~A.p = connect-obj(B, A.q)~

通常A.qはA.pの次(0なら1、-1なら-2)なので省略して良い。

この関係をSVGに記録するため、物体Aのdata-edraw-point-connections属性を使用する。

#+begin_src svg
<rect data-edraw-id="bbbbbbbb" x= ... />
<rect data-edraw-id="cccccccc" x= ... />
<path data-edraw-id="aaaaaaaa" data-edraw-point-connections="ANCHOR(0):OBJ(bbbbbbbb),ANCHOR(-1):OBJ(cccccccc)," />
#+end_src

ANCHOR()は長いので単にA()と書いても良いことにする。

*** 方向指定接続先
物体の明示的に指定された任意の方向(角度)に接続する機能があると便利かもしれない。これは次のように書く。

- ~A.p = intersection(line(B.center, B.center + (cos(dir), sin(dir))), B.edge)~
- ~A.p = connect-obj-dir(B, dir)~
- ~ANCHOR(p):OBJDIR(B dir)~

** DONE できるだけedraw-set-node-positionを使う
CLOSED: [2023-05-28 Sun 21:18]
Z orderを変更する関数はできるだけedraw-set-node-positionを使うべき。
UNDOの処理などが重複しているので。

- edraw-bring-to-front
- edraw-bring-forward
- edraw-send-backward
- edraw-send-to-back
** DONE ハンドルのドラッグはedraw-editor-with-temp-modificationsを使うべき
CLOSED: [2023-05-29 Mon 15:33]
edraw-editor-with-temp-modificationsを使うようにする。
edraw-move(edraw-on-path-point-move)のマージ機能に頼らないようにする。

- [X] edraw-mouse-down-handle-point 単純にハンドルを移動するとき
- [X] edraw-drag-handle-on-click-anchor パスを継続したり閉じたりするとき
- [X] edraw-on-down-mouse-1 edraw-editor-tool-path 最初のアンカー
** DONE プロパティエディタ/プロパティ名のドラッグ時にスライダーを非表示にする
CLOSED: [2023-05-29 Mon 16:24]

元々イベントが文字単位でしか来ない問題を回避するために画像を表示したが、mouse-fine-grained-trackingという変数をtにすることでも回避できることが分かった。

edraw-property-editor-number-dragging-use-slider-barというカスタマイズ変数で従来通りの表示も出来るようにしておく。
** DONE プロパティエディタからUNDOデータのマージを制御する
CLOSED: [2023-05-30 Tue 12:37]
プロパティエディタが連続的にプロパティを変更するときにUNDOデータが適度に一つにまとまるようにする。

案:
- 何かフラグを立てて、その間だけマージ機能を有効にする。
  (問題: 今のままだと接着時にマージ出来ない)
- (edraw-undo-list shape)で先頭のUNDOデータを取得できるようにする。edraw-set-propertyの前後にそれを呼び出してUNDOデータが生成されたかを調べ、記録しておく。
次のset-property時に連続変更の条件が満たされたら、(edraw-undo shape)を実行する。

targetがshapeではない場合も考慮しなければならないが、後者で実装する。

edraw-property-editor-read-property-paint-colorだけが心配。こちらも同様の方法で対処する。

** DONE UNDOのマージ機能を作り直す
CLOSED: [2023-05-30 Tue 12:45]
同じ属性を変更するときではなく、同じコマンドが連続するときだけマージするべき。
コマンド側に必要に応じてUNDOしてから変更する機能を追加する。

新しいマージ機能を作る。
- [X] プロパティエディタ
  プロパティエディタはedraw.elに直接依存していないのでUNDOを直接制御できない所が難しい。
  - edraw-property-editor-read-property-paint-colorは非常の多くのedraw-set-propertyを実行してしまう。もしマージしなかったら大量にUNDOが生成されるはず。
  - 他は基本的にupdatorを介してedraw-set-propertyする。
    updatorが呼ばれるのは:
    - 色ボタンを押してカラーピッカーで色を選択した後(選択中は直接edraw-set-propertyが呼ばれる！)
    - プロパティ名をドラッグしたとき
    - プロパティ名の上でホイールを回したとき
    - フィールドを編集したとき
- [X] ドラッグ移動したとき(既に対応しているつもりだが漏れがないか確認する)
  - ハンドルのドラッグが未対応
- [X] キーで移動したとき(キー移動コマンドが連続するなら一つにまとめるべき)

今のマージ機能は全て廃止する。
- [X] edraw-push-undo-path-point-moveのmerge引数 => キー移動とドラッグ
- +[ ] テキストのedraw-set-anchor-position => set-propertiesを使うべき+
- [X] edraw-set-properties-internal(一般的なプロパティ設定) => プロパティエディタ

** DONE UNDOデータのマージに一貫性がない問題について考える
CLOSED: [2023-05-30 Tue 12:45]
edraw-merge-set-properties-undo-data等、同じ操作を連続して行ったときにUNDO情報のマージを行っているが、それらは機能したりしなかったりしている。

プロパティエディタでx属性をドラッグで変化させた場合は一つのUNDO情報にまとめられる。これはありがたい機能。

+キーボードによる選択図形の移動は現在の所マージされていない。当初はマージされていたかもしれないが、今は複数の選択図形を一度に移動するためにグループ化されているので、グループ同士はマージされない。+ [2023-05-29 Mon]連続するedraw-editor-move-selected-by-arrow-keyコマンドによる平行移動はUNDOして一つにまとめられるようにした。

右クリックで一つの図形を選んで平行移動する場合でも、edraw-set-properties-internalが無変化のプロパティを削除するので、マージされない場合がある。例えばrectの場合、最初はx,y,width,heightが文字列なので一回目の平行移動はx,y,width,heightの全てのプロパティが変化する。しかし二回目はxやyのみ変化するので、一回目のプロパティ列と一致しないのでマージされない。

図形のドラッグ移動についてはドラッグ操作側で edraw-editor-with-temp-modifications を使って確実に1回にまとめているので問題ない。

edraw-push-undo-path-point-moveによるパスのアンカーやハンドルの移動はキーボードでもマージされる。これは悪くないと思う。

他にもマージするケースがあるのかは不明。

これらの挙動には一部一貫性が欠ける動作があるように思えるがどうしたら良いか。

→対処法: UNDOデータのマージはもっと高レベルの場所で制御すべき。edraw-set-propertiesのレベルではマージすべきではない。
** DONE テキストのedraw-set-anchor-positionはプロパティ変更を使うべき
CLOSED: [2023-05-30 Tue 13:39]
その方がrect系などとの統一性を出しやすいはず。
UNDO等の挙動において。
** DONE パスのedraw-set-propertiesはdの変更を同時に行うべき
CLOSED: [2023-05-30 Tue 16:07]
現状はまずdの更新を完全に済ませてからその他のプロパティを更新している。
+UNDOをマージすることが前提になっている。+
UNDO登録やon-shape-changedを1回にまとめられないものか。
** DONE 点接続/AABBを基準にした接続元クラスを追加する
CLOSED: [2023-05-30 Tue 18:26]
~AABB(0.5 0.5):OBJ(somerectshape)~ のように指定出来るようにする。
1. edraw-point-connection-src-aabbクラスを追加する。
2. edraw-point-connection-parse-src-aabbを追加する。
3. edraw-point-connection-src-typesに登録する。
** DONE 点接続/選択または重なり図形と接着
CLOSED: [2023-05-30 Tue 18:52]
「選択図形と接着」を「選択または重なり図形と接着」へ変更する。
選択しなくても接着できて便利。
** DONE 点接続/任意の図形の中心位置を他の図形の中心に固定できるようにする
CLOSED: [2023-05-30 Tue 20:12]
特にテキストを他の図形の中心に固定したい。
~AABB(0.5 0.5):OBJ(somerectshape)~ のように指定出来るようにする。
AABBの中心だとわずかに上にずれるが、そこは今後の課題。
接着するコマンドが必要。

(edraw-glue-to-selected-or-overlapped-shape (shape edraw-shape-text))を追加する。
** DONE 点接続/場当たり的で良いのでtextの接着時に少し下に下げる
CLOSED: [2023-05-30 Tue 22:44]
descentの分だけ無理矢理にでも下に下げる。
edraw-point-connection-aabbを追加。textは最終行のdescentを含まない矩形を返す。
** DONE 矢印マーカーの形状がstartとendでわずかに異なっているのを直す
CLOSED: [2023-05-31 Wed 07:15]

修正前:

[[edraw:data=H4sIABpwdmQAA82TTXODIBCG/wqzubQzKh9t0iSjHnrqIT3342YjKqORDJKQ/PsimCat6aWnzijLsuy+DzsQd/sSGZHrKgF2TwBVXJSVHpw9V52QbQI0ooAOm6btEqi03i4xNsZE5i6SqsSMEIJtoWHL8tCItr62kS4WC+yikMY5Lzok8gR4rjIT9q5d3WSq5gp58+LBZjD4TwOcXdgLbh7lIQGCCKL9B0jx4jWBqZu8uYlUgrc2IdtpCajTStY8gVa2HFAhmiaBiUWC7xghCTOlpLE020xXyMaeSUCjKSLB3I4PEQmm74BwGmPP9T+w6Ribem7qwVk0HYHjvu9prPha/34Pel5ARzcO+kVR/CQ703xk67pUctfmTqy8DMn8CIPe1YPluU1SVtG15uitdZkn6M2Jk1xwzomTcic/1fVN8l74lXRS8qp9l2YkYIysrKF9Sd+akLc2tlPNzWR0M27/rkXnTmXVW8bOap3OlB7p0Us9XNrfPrP0EzRipxm1AwAA]]

修正後:

[[edraw:data=H4sIAIZ1dmQAA82TyW7DIBBAfwVNLq0UwtIoS2V86KmH9Nzl5ga8KI6JMAnJ3xeM06R1e+mpkvEwIHiPMU7aQ4FcJW0pgE8poFJVRWn75KBMW+lGAJswQMdt3bQCSmt394Q45ybubqJNQTillPiNIE2kyltUSQFKmszhkPrRbWY2yqAYniNtBn3+2BP9wKFS7kEfBWBGUWg8PICMyl8ExM5r19GmUo1flO2tBtRaozdKQKMbBSiv6lrAaLlcwlcVTHFmjHbeaJfZEvm5J08Z43mAjedoOqZvgEiakKj2f8zZ0DyKd954KE5C6dPEqLX9/fseO6NT9+7ZeZ5/t7qYvGfrTWH0vpEdrLie0vIEPe/HQ0npFxlPZKEapxh9yqNBCGdPeuW5oB2qO/V531igmOHPRWdSpIYKzeiYc7rygYUtY2mwavzc3tQ3o8HFuP07iy06yipEzi+01mbGDnjsmkcK3/zvk34A5j05w40DAAA=]]
** DONE 点接続/場当たり的で良いので矢印の位置を調整する
CLOSED: [2023-05-31 Wed 08:02]
矢印の大きさ(パスの線の太さ)と接続先の線の太さを考慮すべき。

~(cl-defmethod edraw-gap-distance ((src edraw-point-connection-src-anchor) dst-shape) ...)~ を追加。
** DONE パスのアンカーポイントを追加するときに接着できるようにする
CLOSED: [2023-05-31 Wed 11:02]
Ctrl+クリックで接着するとか？
二回目に接着したときはそこでパスを終わらせる必要がある。
コネクターツールを作るのは後でも出来る。
ツール選択時にヘルプを出す。
[Path] Click:Add anchor, Drag:Add anchor and handle, S-Click:45-degree, C-Click:Glue, C-u Click:Avoid connection
** DONE テキスト追加時に接着できるようにする
CLOSED: [2023-05-31 Wed 11:08]
- +カスタマイズ変数で何もしない、スナップ、接着を選べるようにする+
- Ctrl+クリックで接着・スナップしないようにする
- +接着したら接着したと表示する+
- ヘルプを表示する
[Text] Click:Add text, C-Click:Glue
** DONE 各ツールでマウス操作のヘルプを表示する
CLOSED: [2023-05-31 Wed 13:00]
すでにpath、textでは実装済み。
** DONE 親子関係のあるshapeの変更通知機構を直す
CLOSED: [2023-06-02 Fri 16:18]
edraw-transform等で子孫の変更を一回にまとめるための仕組みが必要。
現状だと子孫の一つが変化するたびに更新通知が発生してしまう。
更新通知で点接続の更新をしているので、子孫が一つ変形するたびに位置を更新してを繰り返しグループ内の形状がメチャクチャになってしまう。
ただ、将来子孫を直接選択出来るようにした場合、必ずしも悪くないかもしれない。

とりあえず子孫の変更が親を飛び越えて祖先要素へ通知される仕様は廃止した。
** DONE グループを他のshapeに接着すると動かしている間に崩れる
CLOSED: [2023-06-02 Fri 16:19]
次の図で矩形を移動するとりんごがバラバラになる。

[[edraw:data=H4sIAPnudmQAA52T32+bMBDH/xXLfWklYnz4dxUiNXmbNu19bzQ4gJpBRLzS/Pc7Aum8NJWmnWSMz+f7fu4My+NrRYamDHVOBeeU1L6p6pBTsLh49f2x6VpcMaDk7ee+Pea0DuHwmKbDMLBBsK6v0oxznmIiulr2fhs+z/eWU3yezs9ds9/n9G6321FyDH334nPadq2npClz6su+GBbPxfal6rtfbUlJulpW8VZXni56fx+fE5clHupREVCsP00zLu1EoHGaOUFGnKO/LEKxmGRGQedl8ey8nxmi3UPXtGGx7doWMbBR2J2np/X6njNFcDw8fl9/ub8cf0DcQxHqd9w759yl9sXMIt/5vRZeoCYCfINMJdYyoSMzm9GrDTNcS5XpjGdCZIqABBbHaZcYxfAu/hgQUPyjdwMKNWKDW0eN+sTrJLMuMrsZvQASu3Ej9WWDT2+bG+BzCNYJ3DAXV09u9uTH+Y7+vcvTF3NusTCM2whQJlYxiKvMEDFjqOqYkDEnFnGFrscgDnEzMOhKARKLHv3/yPJjQsmMiT1fQV41XiZaMXUWTat54L+7+g2BFNnVCgQAAA==]]

パスに限らずrectやellipseをグループ化したものでも起きる。

[[edraw:data=H4sIACjudmQAA32R0W6EIBBFf4VMnxVZN+26Ef9FBZFowSBd9O87Kk1sYvsgk2Hg3nOxnF+KBC18zyHPMiC91Kr3HNgDm5d0s7YGu5QBWT5HM3PovZ+elIYQ0pCn1il6y7KMolA88lxGbYarg6woCrpPoSqdbP3f1gsHXNd97fQ4cnjrug7I7J0dJAdjjQSiBQcpXB2Spm4H5eyXEUBoVarzyIr1x+/39SgsBF5y6MjQzK1HxfZxELxjiZzsfuLc9kXt6+Sw2Qxb0XzUTdFEhtN0str4pLXGIAa+KT4kMslx1NMsr7HyBxMCI7dLNG7Xg2lDvUXUrdL/wsmGCXadbxeNmjHgOd/9kKYqfviHq2/PW2uQMAIAAA==]]

あ原因分かった。子供が一つ動くたびに親のon-shape-changedが呼ばれるからだ。どうしよう。最低でもtransformするときは子供を全部transformし終わってから一回だけon-shape-changedを呼ぶようにしなければならない。それで問題ない？

他にも一括で要素全体を操作するものはできるだけ一回にまとめた方が無難かも。

その前に親子関係の通知の仕組みがメチャクチャなので徹底的に直した方が良い。

厄介なのはUNDO。transformを一つにまとめたとしても、UNDOは一つにまとまらない。UNDOはそれぞれの子孫のtransformのUNDOが個別に実行されるから。

対策案:

- ×UNDOも一つにまとめる(子孫のUNDO登録を抑制して、最後にgroup全体に対する逆transformを一つだけ登録する)
  => 誤差が累積しやすい(今更?) 逆行列が求められない場合がある(全く元に戻らない)
- △make-undo-group時に個別に変更通知がいかないようにする仕組みを作る
  => make-undo-group自体には手を加えたくない。
- ○make-undo-groupで出来たUNDOデータをさらに包んで更新通知を抑制する
- point-connection-src-aabbはtransformプロパティの変更によって移動する
  => 最終手段
- まとめなくても正しく動作するようにする
  => どうやって

一つ目をやろうとしたが無理があった。逆行列が求められない場合がある。そんな場合でも個別にUNDOすることはできることが多い。ほとんどの形状のtransformはxとかyとかのプロパティ値の変更になるので、元のプロパティ値に戻すUNDOが登録される。

make-undo-groupで一つにしたUNDOデータをさらに包んで通知を抑制するのが一番簡単そう。

1. (edraw-funcall-with-child-change-notification-suppressed group change-type fun args...)みたいな関数を作成する。
2. make-undo-groupと似たような方法で包む。
** DONE Set=>Fillでパスの塗りつぶし色を設定するときpreviewされないことがある
CLOSED: [2023-06-02 Fri 20:01]

パスに限らずfillが指定されていない図形で起きる。カラーピッカー内で最初の色をクリックしたときだけpreviewが反映されない。変化チェックが正しく機能していない？

[[edraw:data=H4sIACjFeWQAA3VPyw7CIBD8FbJeNNHysDWpKf2XWpASEQyg1L93NWq8eNiZTDY7M9ulmyHFqjxJEIwBmbQ1U5bABYqbjskGj6riQOaz80nClPNlT2kppSrbKkRD8ZBRNIK+i3rM//1mCYj3Fx6tcxKiOQxL0TTrz7BqWzd8BSTlGE5agg9eA7FKglZxKJvDMJ5MDFevgNC+M7+roO7YQTtnL0l/HRZC8Ja3QEbM589SI1bYIcf5zahr9sncvPvXrwBqcPC5/gGwADr4KwEAAA==]]

edraw-color-picker-read-color 内の on-color-change lambdaでpicker-color-strと同時にminibuffer-colorをコールバックに渡しているのが原因。なぜそんなことをしたんだろう。気が付かなかっただけ？
** DONE 点接続/パスを接着したときの位置が微妙にずれている
CLOSED: [2023-06-02 Fri 21:56]

最初にアンカーを置いた場所に引きずられているように見える。

[[edraw:data=H4sIACbpeWQAA52S226DMAyGXwW5N0UqkEDFoSJI3eW0ac+QkXBQuwSFrJS3nwuloheTplmKLSex/y+HvL/UztAK2zCIQgJOI9u6sZgQTC7S9K1WDKhPwbl+nVXPoLG2OwTBMAz+EPna1EFICAmwERS5kaX9vd+VAfpx8lV7PjPYVFUFTm+NPkkGSisJTisYSGH44H3y8lQb/a0EOEGR1+slLcZF77n83lgILDKoSFHMjHPENJ4JbuHOGZIV521ecMu9WeYmyKsyFQmRE8O/BWn6d0WZcLlPymhS7LhtHoqbLMuW+/Lu3fYLwoyD9e80Dn1Co/Rh2Y7SzM/WlrzROPbJHv1iuCt9pul0q6xXaqXw3PgV8P2PW4+6h4+X1+2C6e6OWzJPLXflTuhBjQM/RvEDJOB6hWcCAAA=]]

追加する前にコネクションを更新しているのが問題なのだと思う。
追加してから、コネクションを更新して、その後UNDOデータを登録する。
そのためにはadd-point-connectionにupdate引数を追加しなければならない。
** DONE 色/カラーピッカーの最近使った色を保存・復元する
CLOSED: [2023-06-03 Sat 19:37]
optionsに:recent-colorsを追加する。
単なるリストでは無くedraw-listというコンテナ構造体を作ってそれを使用する。
** DONE 色/カラーピッカーで最近使った色をキー操作で選べるようにする
CLOSED: [2023-06-04 Sun 13:16]
C-1のようなキー割り当てにする。
ミニバッファに割り当てるにはマイナーモードにするのが手っ取り早い。
color-picker-minibuffer-mode-map。
またはset-transient-mapのようなやり方でもいいのかもしれない。

さらにツールチップで色コードとキー割り当てを表示したい。
areaにhelp-echoを持たせて、svg-image :map image-mapに設定する。
** DONE プロパティエディタ/複数選択してプロパティを設定
CLOSED: [2023-06-04 Sun 23:19]
- +必須プロパティは除外+ (xを揃えるというような使い方もできるので維持)
- 全てnilで始めるか、全てが完全に一致しているものだけ埋めるか
- 例によって代理となるオブジェクトを作る
- コンテキストメニューに「Properties...」を追加する
** DONE 複数選択した図形に対してSetメニューを使えるようにする
CLOSED: [2023-06-05 Mon 16:37]
複数の図形に対して一括でSet=>FillやSet=>End Marker等を使いたい。
** DONE Ctrl+クリックで選択図形を追加したときにedraw-multiple-shapesを使う
CLOSED: [2023-06-05 Mon 17:04]
edraw-add-shape-selectionのtodo部分を参照。
** DONE プロパティエディタやシェイプピッカーの最近使った色問題
CLOSED: [2023-06-05 Mon 21:34]
プロパティエディタやシェイプピッカーで次のような実装にしてしまったのは問題では無いか。

#+begin_src elisp
,@(when (fboundp 'edraw-editor-recent-colors)
                (list
                 (cons :recent-colors (edraw-editor-recent-colors))))
#+end_src

プロパティエディタやシェイプピッカーをエディタから独立して使えるようにしたいのであれば、エディタから使うときにだけ明示的に(edraw-editor-recent-colors)を使うようにエディタから指定すべき。

edraw-editor-image-scaling-factorについても同じ事が言える。

何かオプションを引き渡す仕組みが必要。

とにかくedraw-editorへの依存を取り除くべき。
** DONE 選択図形をグループ化するキーを割り当てる
CLOSED: [2023-06-06 Tue 09:04]
gでグループ化、Gでグループ化解除。
選択図形のグループ化解除は新たに作る必要がある。
** DONE 選択図形のプロパティエディタを開くキーを割り当てる
CLOSED: [2023-06-06 Tue 09:25]
Alt+Enterとしたいところだが、Emacs的ではない？
fillとstrokeの設定をp f、p sにしたので、プロパティ一覧を開くのはp pにした。
ついでにAlt+Enter(M-RET)も追加した。その方が一般的だし。
** DONE TABとS-TABを図形選択の前後変更に割り当てる
CLOSED: [2023-06-06 Tue 09:31]
M-[やM-]に割り当てられているが覚えられないので。
** DONE 選択ツールにおいてCtrl+ドラッグで選択図形を追加・削除したい
CLOSED: [2023-06-07 Wed 18:07]
現状では選択ツールでCtrl+ドラッグ自体ができない。
矩形と交差している図形は選択状態が反転する。
** CANCELLED プロパティエディタ/ボタン類の表示を改善する
CLOSED: [2023-06-08 Thu 20:42]
バッファの上の方に表示できないか。バーのようにすると良い？
Prev, Nextを連続して押しづらい。
見た目もあまりよろしくない。

[2023-06-08 Thu]一応以前ボタンの位置を上に移動したので、今はそれほど不満は無い。
そもそもこのボタンで前後選択しないし。
** DONE プロパティエディタが開かない場合があるのを修正する
CLOSED: [2023-06-08 Thu 23:16]
すでにプロパティエディタのバッファが存在していて、それが非表示の時、同じターゲットでプロパティエディタを開こうとすると、バッファが表示されない。
ターゲットの変更処理は行う必要は無いが、バッファの表示は必ず行うべき。
** DONE プロパティエディタ/「Set as default」ボタンの条件非表示
CLOSED: [2023-06-18 Sun 14:04]
「Set as default」ボタンはshapeのときだけ出すようにする。
** DONE マーカーをカスタマイズできるようにする
CLOSED: [2023-06-18 Sun 13:51]
- (プロパティエディタで)矢印のサイズを調整したい。
- (将来的に)マーカーの種類を増やせるようにしたい。(最低限タイプ変数を用意する)

変更:
- edraw-dom-svg.el
  - defs、marker要素管理機構の整理。
  - edraw-svg-markerデータ構造を追加。(marker <type> <properties>)
  - edraw-svg-marker-types変数を追加。
    - marker要素作成・プロパティの反映
    - プロパティの取得
    - プロパティ情報の取得 (shapeと同じ形式にする)
    - はみ出し量の計算
  - marker型を追加。marker-start、marker-mid、marker-endに適用。edraw-svg-get-marker-propertyはedraw-svg-markerデータ構造を返す。edraw-svg-set-marker-propertyはedraw-svg-markerデータ構造を元にmarker要素を作成してdefsに加える。
- edraw-property-editor.el
  - edraw-alist-properties-holderを追加。alistをプロパティエディタで編集できるようにする。
  - edraw-insert-property-widgetsがサブプロパティを扱えるようにする。
    - prop-widgetリストを返す。
    - targetやmargin-left引数をとる。
  - edraw-property-editor-prop-widgetオブジェクトの作成はedraw-create-prop-widgetでは無く、各widgetタイプが行うようにする。派生クラスを作れるようにするため。
  - edraw-create-prop-widget-updatorのサブプロパティ対応。サブプロパティの更新時はUNDOを操作しない。
  - edraw-property-editor-prop-widget-create-widgetのmargin-left対応。
  - marker-widget追加。
    - edraw-property-editor-marker-widgetクラスを追加。
    - edraw-property-editor-create-marker-widget関数を追加。
- edraw.el
  - edraw-default-marker-properties変数を追加。デフォルトのマーカープロパティ。edraw-property-editor-open呼び出し時にそれをオプションとして引き渡す。
  - マーカー変更メニューは新しいマーカー管理機構を使う。
  - edraw-property-proxy-shapeクラスはedraw-alist-properties-holderを継承する。
  - 「Shape's Defaults」から「Default Config」へ変更。Shapeのデフォルトの他にMarkerのデフォルト設定を加える。
  - 点接続のedraw-gap-distanceは新しいマーカー管理機構を使う。より一般化された(arrow決め打ちでは無い)はみ出し量計算ができる。
- msg/edraw-msg-ja.el
  - 翻訳を追加。
** DONE 一つの図形に対するedraw-editor-edit-properties-of-selected-shapes
CLOSED: [2023-06-18 Sun 17:06]
edraw-editor-edit-properties-of-selected-shapesは図形が一つの時はedraw-multiple-shapesを使わないようにする。
** DONE 編集ツールを追加しやすくする
CLOSED: [2023-06-18 Sun 21:07]
現在はedraw-editor-tool-で始まることが前提になっている。サードパーティーの入る余地がない。
edraw-editor-tool-listにはedraw-editor-tool-を含めたシンボルを指定するようにする。

- edraw-editor-tool-*をtool-idとする。
- tool-idをそのままオブジェクトのコンストラクタとする。
- edraw-editor-tool-*--titleでタイトル取得。
- edraw-editor-tool-*--iconでアイコン取得。
** DONE edraw-read-rectangleをC-gで中断すると矩形が残るのを修正する
CLOSED: [2023-06-23 Fri 17:37]
コードを読んでいてunwind-protectのUNWINDFORMSが無いことに気が付いた。
一応全てのunwind-protectを調べたが、同じような所は無かった。
** DONE プロパティエディタ/即事反映でないときにカラーピッカーで色変更できない
CLOSED: [2023-06-25 Sun 15:47]
edraw-property-editor-apply-immediatelyがnilのとき、カラーピッカーで色を指定してもフィールドの値が変わらない(OKすると元に戻ってしまう)。preview自体も出すべきではない？
原因はpreviewをキャンセルするためのedraw-set-propertyがwidgetの更新タイマーをセットしてしまうこと。widgetの値(文字列)だけ変更しても、その直後にタイマーで更新が走ってtargetの現在値がwidgetに反映され元に戻ってしまう。
preview自体出さない方向で修正。
** DONE 変形/GUIで変形できるようにする
CLOSED: [2023-06-30 Fri 20:20]
transform属性を変更できるようにする(図形オブジェクト全体の変形)
edraw-read-rectangleのようにread-eventループに入ってしまうのも手かもしれない。

- edraw-interactive-scroll-and-zoom方式(つまりread-eventループ)でやる？　出来なくはないが、スクロールとかにも対応しなければならない。一時的なkeymapを使う方が楽では無いか？　まぁどちらでも良い。一時的なkeymapを実現する方法はいくつかありそう。エディタオーバーレイのキーマップを一時的に変えても良いし、set-transient-mapを使っても良い。transient-toolのような概念があっても面白いがやりすぎ？(PhotoshopではCtrl+tを押すとツール選択が一時的に解除されるので)　もしくはツールはスタック出来るべき？
- edraw-update-imageにフックを追加できるようにするか？　read-rectangle方式であれば必ずしも必要ない。キーマップを使うならできた方がいいかもしれない。
- 選択UIを非表示にする機能が必要。代わりに変形UIを表示するので。
- 選択図形のAABBから変形UIを作成する。
- キー操作: r回転 t平行移動 sスケーリング o原点指定 lローカル座標 gグローバル座標 RET確定 C-gキャンセル

とりあえず作るべきは
- edraw-interactive-transformコマンド
- 選択図形から選択UI SVGを作成する関数
- 変形モード中のマウスクリックハンドラ
  - +図形+ AABBの中→移動
  - +図形+ AABBの外→回転
  - +図形+ AABBの角や辺→スケーリング
** DONE UI用SVG図形の構築でedraw-dom-elementやedraw-svg-を使うようにする
CLOSED: [2023-07-01 Sat 13:45]
svg-circle、svg-rectangle、svg-line、svg-ellipse等は余計な処理が挟まっているのと親子関係の構築方法がイマイチなので。
あちこちにあるので全部直すのは案外大変かもしれない。
- アイコン
- edraw-svg-ui-*
- ツールバーまわり
- ドキュメントの背景
- その他
** DONE ORG/インライン画像の最大表示サイズを指定出来るようにする
CLOSED: [2023-07-01 Sat 20:18]
機能的には[[https://github.com/misohena/org-inline-image-fix#limit-inline-image-sizeorg-limit-image-sizeel][misohena/org-inline-image-fix]]と同じでよい。
edraw-org-link-image-max-size変数を追加する。
** DONE 図の再編集時にエディタが表示されない問題を修正する
CLOSED: [2023-07-30 Sun 10:56]
xmlns属性を必ず指定するようにしたら直った。
librsvgのバージョンによって動作が変わっているのかもしれない。
** DONE 画像の参照にはhrefではなくxlink:hrefを使う
CLOSED: [2023-07-30 Sun 10:56]
xmlns:xlink属性も指定する。
** DONE 画像ツールでクリック時にエラーが出る問題を修正する
CLOSED: [2023-07-30 Sun 10:53]
create-imageには絶対パスを渡さなければならない。

さらに、image-flushやimage-size等が失敗することがあるらしい。
「Invalid image specification」というエラーが出る。
画像ファイルでは無いファイルを指定すると必ず起きる。
念のためサイズを取得できなかった場合はその旨を報告して、100x100として扱う。
** DONE 画像ツールでのread-file-nameにMUSTMATCH=tを指定する
CLOSED: [2023-07-30 Sun 16:26]
MacでMUSTMATCHがnilの場合保存ダイアログが開いてしまう。
その場合、既存のファイルを開いても拡張子が入らない。二回選択すると拡張子が入る。
保存時は拡張子はプログラム側で補うべきと言う考え方なのかもしれない。
そもそも既存のファイルを指定するのでtであるべき。
** DONE iキーに画像ツールを割り当てる
CLOSED: [2023-07-31 Mon 08:30]
なぜか画像ツールだけキーが割り当てられていない。
たまに連続して何回も使いたいときに不便なので追加する。
** DONE ドキュメントのviewBox指定にキーを割り当てる
CLOSED: [2023-08-16 Wed 11:23]
調整するのに何度もメニューから選ぶのがつらかったので。
dvbで。dv～は他にも使えそうだからとっておく。
** DONE C-tを変形コマンドにしてしまう。
CLOSED: [2023-08-19 Sat 11:32]
何度も間違えるので、もうそれでいいや。
どのみちC-t (transpose-chars)はedrawエディタ上では使えない(エラーになる)ので。
** DONE マウスカーソルがチラつくのを修正する
CLOSED: [2023-08-19 Sat 11:30]
Emacs 29.1(Windows版)に移行してから妙にマウスカーソルがチラつくようになった。
Org-modeのedrawリンク部分を編集する時 +だけ+ によりチラつくので、背後のfaceの問題と推測。

調査の結果、mouse-faceプロパティが原因と判明した。
mouse-faceがあるとなぜかpointerが一瞬handマークになる。
オーバーレイにpointer arrowが指定されているのですぐにarrowになる。

+Org-mode以外でもあり得るので、edraw-initializeでmouse-faceをnilにする。+
オーバーレイのmouse-faceをnilにしてもテキストプロパティのmouse-faceの効果は消えないので無意味。
再現コード。

#+begin_src elisp
(let ((beg (point))
      (_ (insert "[THIS-IS-A-LINK]"))
      (end (point)))
  (put-text-property beg end 'mouse-face 'highlight)
;;  (put-text-property beg end 'pointer 'arrow)

  (let ((ov (make-overlay beg end)))
    (overlay-put ov 'evaporate t)
    ;;(overlay-put ov 'display "display")
    (overlay-put ov 'mouse-face nil)
    (overlay-put ov 'pointer 'arrow)
    ))
#+end_src

オーバーレイでmouse-faceをdefaultにしても意味が無い。見た目はハイライトでは無くなるが、やはりpointerがhandになる効果は同じだからだ。

ちらつきはポイントがリンクの中にあるときだけ起こるというのが興味深い。
あ、カーソルの点滅時にマウスカーソルもチラついている。

テキストプロパティにpointer arrowを指定すると改善する気がする。これは note_mouse_highlight 関数がpointerが指定されていないときだけQhandを使うからかもしれない。しかし完全には無くならない。

~(setq mouse-highlight nil)~ するとちらつきは完全に無くなる。しかしさすがにそうするわけにもいかない。

一番良さそうなのは、mouse-faceテキストプロパティを完全に消してしまうこと。

org-modeのインライン画像を編集中に非表示にしているように、編集中はmouse-faceプロパティを消去すれば良い。

[[elisp-function:edraw-org-link-remove-mouse-face]]と[[elisp-function:edraw-org-link-recover-mouse-face]]を追加した。
** DONE ドラッグ時にマウスカーソルがチラつくのを修正する。
CLOSED: [2023-08-19 Sat 16:49]
ドラッグでマウスが移動すると一瞬だけマウスカーソル(pointer)がIマークになる。
特殊なイベントループ中なので何かdrag-mouse-1に割り当てられたコマンドが呼ばれるということはないはず。
原因が分からない。
track-mouse変数を'draggingにするとarrowのまま変わらなくなるので、とりあえずそのようにして回避した。
[[elisp-function:edraw-track-dragging]]のkeep-pointer-shape-change-pをallow-pointer-shape-change-pに変更してデフォルトはpointerの形状が変わらないようにした。
ドラッグ中にポインタの形を変える必要がある場所は今のところ存在しない。
** DONE edraw-editor-auto-view-enlargement-max-sizeのデフォルト値
CLOSED: [2023-08-20 Sun 00:47]
(cons 560 420)ではなくedraw-default-document-propertiesの値を使うべき？　意図的に小さくしているときに困る。

それともフレームサイズにすべき？ ウィンドウ分割がどうなるかによって変わってくる。

それともimage-compute-scaling-factorを参考に
~(* (/ (float (window-width nil t)) (window-width)) 70)~ みたいにしてみる？
ただ、これはビューサイズなのでこれにimage-scaleを考慮しなければならないけど。

[2023-08-19 Sat]現在のウィンドウ幅までは広げたい。細かい図を編集する時はこれが案外重要。高さはあまり変なことはしない方がいいような気がする。

最大サイズを:
- 固定サイズで指定する
- ウィンドウサイズを使う
  (フレームサイズだと、左右2分割しているときに無意味に大きくなってしまう。あくまで操作時点のウィンドウサイズを元に決めたほうがいい)
  +その上で最小サイズと最大サイズを制限したい。+ いや、いらないか。最小サイズは、ウィンドウが縮むわけでは無いし。

edraw-editor-auto-view-enlargement-max-size はスケール前のサイズ。
最終的にedraw-update-root-transformで(oref editor image-scale)がかかる。

エディタのx位置をどう考えるか。y位置は別に考慮しなくて良いと思う。スクロールすれば済むだけだから。xはC-x <みたいな操作は知らない人もいるだろうし。truncate-linesなら別に考慮しなくてもいいんだろうけど。

edraw-editor-auto-view-enlargement-max-sizeの仕様:

- nil : 自動拡張しない
- (/w/ . /h/) : /w/ /h/ まで広げる

/w/ や /h/ の仕様:
- 整数値 : ピクセル数 (自動scaling前のサイズ?)
- (window /props/) : 現在のウィンドウサイズまで広げる。実際には、現在のエディタの左上からウィンドウ右下までのサイズを使う。すでにはみ出している軸は広げない。もちろん収まるように縮めたりもしない。あくまでズーム操作時点でどこまで広げるかの基準とする。

……いっそのこと式にしたら？ (max 300 (min 1000 (window-pixel-width))) みたいに。

まぁ、シンプルにこれでいいのでは。

(window /min/ /max/)

エディタの左上からウィンドウ右下までの寸法は測れるのか。

- 現在のポイントの位置は (window-absolute-pixel-position (point)) (537 . 291)
- ウィンドウの寸法は (window-absolute-body-pixel-edges)  (9 51 649 525)
  (ヘッダーラインやモードラインは含まない)

これらはディスプレイ左上からの座標。nilが返ってくる場合もある。

#+begin_src elisp
(if-let ((pt (window-absolute-pixel-position (point)))
         (edges (window-absolute-body-pixel-edges nil)))
    (cons
     (- (nth 2 edges) (car pt))
     (- (nth 3 edges) (cdr pt)))
  (let ((edges (window-body-pixel-edges nil)))
    (cons
     (- (nth 2 edges) (nth 0 edges))
     (- (nth 3 edges) (nth 1 edges)))))
#+end_src

うーんあまりよろしくない。エディタが一番上に来たときに、なぜかwindow-absolute-pixel-positionがエディタ右側の座標を返してくる。

window-text-pixel-sizeを使うのも無理。左にorg-indent-modeで空白を空けたら。

諦めて単純にウィンドウのサイズだけ考慮する。

edraw-editor-auto-view-enlargement-max-sizeの仕様:

- nil : 自動拡張しない
- (/w/ . /h/) : /w/ /h/ まで広げる

/w/ または /h/ の仕様:
- /integer/ : ピクセル数 (スケール前の)
- /float/ : フレームに対する比率
- (window /ratio/ /minus/ /min/ /max/) :
  clamp(ウィンドウサイズ*ratio-minus, min, max)

少し複雑すぎる気もするけど一応これで行く。
** DONE edraw-set-view-size-specの誤操作を防止する
CLOSED: [2023-08-20 Sun 11:24]
ビューのサイズを変更するときに、非常に大きな値を入力してしまいやすい。
Widthを入力するときに既に現在の幅が入力されているので、その後に続けて数字を入力してしまう。例えば現在の高さが300のときに400へ変更したい場合、300400と入力してしまう。400Enterと入力したら高さ300400にしようとしてしばらくフリーズする。

対策:
- 空文字列をこれまでと同じ値にし、指定クリアを別な方法にする
- 最大サイズを決める

指定をクリアする良い方法は何だろう。

v0、つまり、edraw-reset-view-sizeコマンドは ~(edraw-set-view-size-spec editor nil)~ と同じでありedraw-set-view-size-specコマンドで空文字列を入力するのと同じなのだから、そっちを使えば済む話。
edraw-set-view-size-specコマンドはinteractiveでリセットを指定出来る必要は無い。どうしてもと言うならprefix argを見るくらい(不要)。

「自動」という状態があることに気が付きにくいところが一番の問題だが、まぁ、しかたない。

ついでに、サイズは1からmax-image-sizeに限定する。
** DONE マウスカーソルのちらつきを抑えるためにmouse-faceをより抑制する
CLOSED: [2023-08-20 Sun 11:59]
orgのリンクにmouse-faceが設定されているせいで、マウスカーソルがチラつくことがある。
現在はedraw-org-link-remove-mouse-faceとedraw-org-link-recover-mouse-faceで制御しているつもりになっている。
しかし、エディタと同じ行をテキスト編集するとすぐに復活してしまう。
リンクパラメータの:mouse-faceをnilにすれば抑制できないか。org-activate-linksを見る限り、結果がnilならhighlightを設定してしまうので抑制できない。
リンクパラメータの:activate-funcで編集中を検出してmouse-faceを消すことはできそう。
** DONE 色/カラーピッカーのドラッグ中に左や上に外れて困るのを何とかする
CLOSED: [2023-08-20 Sun 16:38]
:PROPERTIES:
:CREATED: [2023-08-19 Sat 14:51]
:END:
左のフリンジや上のテキスト領域に差し掛かると色の選択が終わってしまうので、操作しづらい。
左や上のマージンを広げた方が極端な色を指定しやすい。

いや、それよりもドラッグ中に外に出ても継続される方がいい。出来る？

例えばエディタの右側からドラッグしてフレームの右外へ移動したときのイベント:

(mouse-fine-grained-trackingを使用している。使用しないと
fringeやscroll-barの中に入るとイベントが1回しか発生しない)

上下に分割にして下のウィンドウから右外へ出してみる。

: move          event=(mouse-movement (#<window 205 on todo.org<org>> 3521 (597 . 140) 606046812 nil 3521 (1 . 0) (image :type svg :data ...) (559 . 140) (560 . 420)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> 3531 (598 . 140) 606046875 nil 3531 (2 . 0) nil (0 . 140) (8 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> 3531 (599 . 140) 606047062 nil 3531 (2 . 0) nil (1 . 140) (8 . 424)))
: 略
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> 3531 (637 . 146) 606048765 nil 3531 (6 . 0) nil (39 . 146) (8 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> 3531 (638 . 146) 606048968 nil 3531 (7 . 0) nil (40 . 146) (8 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> 3531 (639 . 147) 606049062 nil 3531 (7 . 0) nil (41 . 147) (8 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> right-fringe (648 . 147) 606049125 nil 3531 (0 . 0) nil (8 . 147) (8 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> right-fringe (649 . 147) 606049609 nil 3531 (0 . 0) nil (9 . 147) (8 . 424)))
: 略
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> right-fringe (654 . 148) 606050281 nil 3531 (0 . 0) nil (14 . 148) (8 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> right-fringe (655 . 148) 606050375 nil 3531 (0 . 0) nil (15 . 148) (8 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> vertical-scroll-bar (656 . 148) 606050406 nil 3531 (8 . 0) nil (656 . 148) (17 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> vertical-scroll-bar (657 . 148) 606050531 nil 3531 (8 . 0) nil (657 . 148) (17 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> vertical-scroll-bar (658 . 148) 606050640 nil 3531 (8 . 0) nil (658 . 148) (17 . 424)))
: 略
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> vertical-scroll-bar (670 . 150) 606051578 nil 3531 (10 . 0) nil (670 . 150) (17 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> vertical-scroll-bar (671 . 150) 606051812 nil 3531 (10 . 0) nil (671 . 150) (17 . 424)))
: out of target event=(mouse-movement (#<window 205 on todo.org<org>> vertical-scroll-bar (672 . 150) 606051859 nil 3531 (10 . 0) nil (672 . 150) (17 . 424)))
: out of target event=(mouse-movement (#<frame todo.org<org> - GNU Emacs at YAMABUKI 000001db2c5c1560> nil (673 . 646) 606051968))
: out of target event=(mouse-movement (#<frame todo.org<org> - GNU Emacs at YAMABUKI 000001db2c5c1560> nil (673 . 647) 606052125))

- ドラッグ中はボタンを離すまでフレームの外でもモーションイベントが来る。
- ドラッグ中は他のフレームの上に来ても元のフレームからの座標が来る。
- fringeに出るところで明確なギャップが見られる。
- fringeとscroll-barでは同一系のように見える。
- frameに出るとyが大きく変わる。ウィンドウ左上基準がフレーム左上基準に変わるから。xは連続しているように見える。fringeやscroll-barの基準点はフレーム左端とほぼ同じだと推測できる。

座標の意味についてはマニュアル参照:
- [[https://ayatakesi.github.io/emacs/24.5/elisp_html/Click-Events.html#Click-Events][Click Events (GNU Emacs Lisp Reference Manual)]]
- [[https://ayatakesi.github.io/emacs/24.5/elisp_html/Coordinates-and-Windows.html#Coordinates-and-Windows][Coordinates and Windows (GNU Emacs Lisp Reference Manual)]]

pos-or-areaによってx,yの解釈が変わる。pos-or-areaが:
- point(integer) ::
  x,yはテキスト領域左上からの座標
- mode-line, header-line, tab-line, horizontal-scroll-bar ::
  ウィンドウ左上からの座標
- vertical-line, left-margin, right-margin, left-fringe, right-fringe, vertical-scroll-bar ::
  (ウィンドウ左, テキスト領域上)からの座標

マニュアルではvertical-line等の時はxは無意味と書かれているが、少なくともWindows実装ではウィンドウ左からの座標になっている。実際の所、画面外なので多少ずれていても構わない。最悪ウィンドウ左右端の座標で止めても構わない。

出来そうだ。

1. まずイベントを一律フレーム座標系へ変換する関数を書く。
2. 最初にdownしたときのフレーム座標から対象内座標への差を取っておく。
3. 対象から出たときは、フレーム座標にその差を適用することで対象内座標を割り出して、move関数をコールする。
** DONE テキストツールで既存のテキストを変更しやすくする
CLOSED: [2023-08-21 Mon 12:02]
クリック時に下にテキストがあれば、それを編集する。
+オプションでこの動作は無効に出来ても良い。+
また、C-uクリックでその動作を無効にしたい。
** DONE メインメニューに全選択・全選択解除を追加する
CLOSED: [2023-08-21 Mon 17:26]
コンテキストメニューの方にはあるがメインメニューの方にはない。
** DONE ツールバーの基本カーソル形状をarrowにする
CLOSED: [2023-08-21 Mon 17:30]
ボタン以外の所でI(テキスト選択)形状になる。これまではmouse-faceの影響があった？
** DONE デフォルトとして設定したときにツールバーの色が変わらない
CLOSED: [2023-08-21 Mon 17:44]
例えばrectツールを選択しているときに何かrectのプロパティエディタから「デフォルトとして設定」を選ぶと次に作るrectのプロパティが変わるがツールバー上の色が変わらない。
** DONE edraw-mode/find-fileで新しいファイルを開くとキャンバスが出ない
CLOSED: [2023-08-22 Tue 13:44]
多分バッファが空だと表示されない。
** DONE edraw-mode/編集中にある程度文字が入力できてしまう
CLOSED: [2023-08-22 Tue 13:44]
EnterやC-qで。
まず、バッファが空だとread-onlyテキストプロパティが設定できない。
次に、セーブ時にバッファテキストを更新するときにread-onlyテキストプロパティが消えてしまう。
** DONE edraw-mode/ファイルへ保存するときはUTF-8で保存する
CLOSED: [2023-08-22 Tue 13:47]
** DONE edraw-mode/カーソルを消す
CLOSED: [2023-08-22 Tue 13:50]
(setq cursor-type nil)で消せる。
** DONE edraw-mode/SVG要素のparseで問題が生じたらモードの切り替えをしない
CLOSED: [2023-08-22 Tue 20:06]
まず一番最初にparseして結果を検査する。
その後に切り替えの処理をする。
** DONE edraw-mode/ファイルの先頭のコメントを許容する
CLOSED: [2023-08-22 Tue 20:10]
モード指定コメント ~(-*- mode: edraw -*-)~ を許容したいので。
libxml-parse-xml-regionはコメントがあると ~(top nil (comment nil "コメント") (svg ...))~ のようなツリーを返してくる。コメントを除去するには昔は第四引数を指定したそうだが、現在それは廃止されてxml-remove-commentsを使用せよとのこと。しかし全体のコメントを消すか残すかは微妙な所。残して編集が継続できるならそれに越したことは無い。とりあえず最上位のtopとその下のコメントは削除して、top直下のsvgを使うようにする。
** DONE edraw-mode/svg要素のwidthやheightが存在しないときのエラーを防止する
CLOSED: [2023-08-22 Tue 20:12]
nilとの算術演算でエラーが発生する。
指定が存在しないときは警告を出しつつドキュメントのデフォルトのサイズで補う。
** DONE edraw-editorに引き渡されたsvgがちゃんとsvg要素か確認する
CLOSED: [2023-08-22 Tue 20:12]
違う場合は警告を出しつつnilとして進める。
エラーにしたいなら呼び出し側でちゃんと確認すること。
** DONE edraw-mode/メインメニューの「保存」を何とかする
CLOSED: [2023-08-22 Tue 21:17]
edraw-modeでは普通にsave-buffer(C-x C-s)が使える。
メインメニューの「保存」はテキストバッファに反映させるだけ。
他のメジャーモードに移行する前にも自動的に反映させるので、正直要らない。
完全に消すか、C-x C-sを載せるか。
** DONE edraw-mode/メインメニューにxml-modeへの切り替えを追加する
CLOSED: [2023-08-22 Tue 21:20]
** DONE edraw-mode/専用のウィンドウで独立して動作するエディタを作る
CLOSED: [2023-08-22 Tue 21:38]
M-x edraw-editor で起動するような。
起動してからファイルを読み込んだりする。
edraw-modeじゃダメなの？
switch-to-bufferで空のバッファを作ってからedraw-modeしても作図は出来る。
まぁ、同じでも良いけど、あくまで使い方の違い。
実際からのバッファを作ってedraw-modeを立ち上げるだけでも良い。

edraw-modeを再整備したので、 M-x edraw で新しいバッファを作ってedraw-modeを立ち上げる。
** DONE 色/カラーピッカーを必要に応じてフレーム化する
CLOSED: [2023-08-24 Thu 00:54]
エディタやプロパティエディタ、シェイプピッカーから使う時はミニバッファに表示するのでフレーム化は難しい。モーダルでなければならない。
カラーピッカー単体で使うコマンドはフレームにしてもよいのではないか。

次の関数は

- edraw-color-picker-insert-color
- edraw-color-picker-replace-color-at-point
- edraw-color-picker-replace-color-at (新規追加)
** DONE 色/カラーピッカーをポイントの近くに表示するときの拡大率をカスタマイズ
CLOSED: [2023-08-24 Thu 01:46]
0.75がハードコードされている。
変数edraw-color-picker-near-point-scaleを追加する。
** DONE 色/edraw-color-picker-replace-color-at-pointのキー入力を改善する
CLOSED: [2023-08-24 Thu 00:54]
C-c C-c や C-c C-kが効かない。
edraw-color-picker-insert-color共々set-transient-mapを使用する。
** DONE 色/rgba(?,?,?,1)のような出力を回避する
CLOSED: [2023-08-24 Thu 01:57]
alphaが1のときはrgbを使うようにする。
** DONE 色/edraw-color-picker-replace-color-atコマンドを追加する
CLOSED: [2023-08-24 Thu 02:02]
edraw-color-picker-replace-color-at-pointのposition指定版。
edraw-color-picker-replace-color-at-pointは内部でedraw-color-picker-replace-color-atを呼び出す。
** DONE 色/edraw-color-picker-replace-or-insert-color-at-pointコマンドを追加
CLOSED: [2023-08-24 Thu 02:10]
一つのコマンド(一つのキー割り当て)で置換または新規挿入を行う。
mhtml-modeには案外空いているキーが少ないので。
** DONE シェイプピッカーで図が表示されないのを修正する。
CLOSED: [2023-08-24 Thu 15:51]
一部でedraw-svg-decodeはsvg要素専門では無い！
svg要素専門だと勘違いして色々修正してしまったのが原因。
<g>要素をそのままdecodeすることもある。
そちらの使い方の方が正しい。

svg要素を期待して処理しているところを全て確認する。
- edraw-org-link-load-svg
  - edraw-org-link-html-link-to-svg エクスポート時
  - edraw-org-edit-link (edraw-editorに引き渡す)
  - edraw-org-link-copy-contents-at-point (edraw-get-document-bodyに引き渡す)
- edraw-mode
- edraw-svg-read-from-file
  - edraw-org-link-load-svg
  - edraw-org-edit-regular-file-link (edraw-edit-svgに引き渡す)

とりあえず、edraw-svg-decodeは単にxmlをデコードするだけにする。
コメント除去を期待する部分はedraw-svg-decode-svgという関数を呼び出すようにする。
** DONE 変形/GUI変形時にマウスの位置に操作種類記号を表示する
CLOSED: [2023-08-24 Thu 21:24]
拡大、回転、平行移動等。

[[edraw:data=H4sIAFbg5GQAA3VS226DMAz9Fct7bZsL0bRWTV947X5gb10JEJVCFbJC/34OSbuibUjh2D72MTli218rGM9N22/GxrYnjbX3lw1jwzCshmzVuYqJ9XrNJhZj619NknPOSAxhsIWvNSrFEWpjq9qn5Gpcb7tWo1gJ3G2dOXoYNRJzm97/DtpCoyncYVh+Ho6nynVfbYHQe9edjMa2aw1CaZtG40tZlghst62eh7riRvsuB18DFd8zyReS7yWBkDxPCBmfYR6QOAg8xSAi5uIpD3zCfSgThFTJ2KYSnakH5lLFnM5CJpzWRQQlZ7iPX/vxuCGfnvv1l8k08eNH8OBug2kae+kNOHJYvNGUG1NwDBUZgjEFUT+6+aTF+Sufac04JeeDYZGUadEU/F5EWqyiQ3/L7hun+cU+gAIAAA==]]

[[edraw:data=H4sIAGPf5GQAA3WRz26EIBDGX4VMr135oxc3ixev9gV6sysi0YUN0sV9+6Kia5OWBH75nJkPZryMD4mm26DH8zQo3XPonLufMfbeJz5NjJWY5nmOlyisqX8lMUIIDmaAvGpcxyHLCKBOKNm5KB7CjspoDjShUFysuDo0cQiR53L+W6gaDqKxtT991ddeWvOtG0Cjs6YXHLTRAlCrhoHDW9u2gHBxkcci0zzDfffadSh8/Aie74yRKg2kjJSRaGZoY2O5aUp+sTzquS6yWl1nlbI1K41Rlu0sN724v1gedcp2VvG1n3uLZFlb/6c4NfoayDyEbQ5Yhh1+S/EDBY9v8OkBAAA=]]

[[edraw:data=H4sIANDe5GQAA3WSzW6DMAyAXyXyrm0TSDS1VdOLr90L7NaVX8Gggqy0b7+QOCWVNiT4+IgTx8SH8Vay+3fbjft7W3eNhsqY657zaZo2k9z0Q8mT3W7H3Sj40L+CUiEEt4sBm+rMVBqUEsCqvC4rQ3LLh7HuOw3JJoHjYcgvht012JGHe/47sc405NlwntZf50tTDv1PlwEbzdA3uYau73JgRd22Gt6KogDGj4cyntRnD5vvejYVsx8/7JqrNBUn+S5WiRJIZDNtGYEYPFUvxNi3AUgmRQQks9lW9ET/nvhoDyRLRQSMzGUTlJ18GwMXmyvxOPkyrUgfISleBSCZW3Mhxm7/QiAGn/cbEYPPtSn1JAaXNI+IwVP1Qozd5Ve0H3J3IgsxdimePNEJfz7bQrgr9MyaOi1ZmmhunNA7vLS3beXjL3oE9dUdAwAA]]

#+begin_src xml
<svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="440" height="440" version="1.1"><g id="edraw-body"><path d="M320,20L220,120L300,120C300,220 220,300 120,300L120,220L20,320L120,420L120,340C240,340 340,240 340,120L420,120L320,20Z" fill="#000000" stroke-width="1" stroke="#ffffff" /></g></svg>
#+end_src

#+begin_src xml
<svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="440" height="440" version="1.1"><g id="edraw-body"><path d="M440,220L340,120L340,200L100,200L100,120L0,220L100,320L100,240L340,240L340,320L440,220Z" fill="#000000" stroke-width="1" stroke="#ffffff" /></g></svg>
#+end_src

#+begin_src xml
<svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="440" height="440" version="1.1"><g id="edraw-body"><path d="M440,220L360,140L360,200L240,200L240,80L300,80L220,0L140,80L200,80L200,200L80,200L80,140L0,220L80,300L80,240L200,240L200,360L140,360L220,440L300,360L240,360L240,240L360,240L360,300L440,220Z" fill="#000000" stroke-width="1" stroke="#ffffff" /></g></svg>
#+end_src
** DONE 選択図形の複製機能をメインメニューに追加する
CLOSED: [2023-08-25 Fri 10:33]
コンテキストメニューにあるのにメインメニューに無いので追加する。
** DONE メインメニューの選択オブジェクトに対する項目の:enableを修正する
CLOSED: [2023-08-25 Fri 10:38]
一部のコマンドが選択していないのに選べてしまうのを直す。
グループ化と変形に関するコマンド。
** DONE 図形の複製機能にキーを割り当てる
CLOSED: [2023-08-25 Fri 10:45]
コピー、ペーストやM-移動すれば良いのだが、一つのキーでやりたい。
Dとか？
** DONE edraw-mode/ファイルトップレベルのコメントをセーブ時に復元する
CLOSED: [2023-08-25 Fri 15:48]
svg要素内のコメントは復元するようにしたが、肝心のトップレベルのコメントはしていない。
~<!-- -*- mode: edraw -*- -->~ のようなコメントを維持したい。

簡単なように見えて実は結構難しい問題。
コメントがありうるのはedraw-modeに限らない。
org-modeのedrawリンクやfileリンクをインラインで編集したときにも生じうる。

かといって、全ての所をコメント対応にして良いのかも疑問。エクスポートするときはコメントを出力しない方が良さそう。

編集後のDOMツリーからedraw-body下の要素を取り出すような場所もある。topがあるDOMツリーが返ってくるとそこが動かなくなる。

方針としては、SVG DOMツリーを扱う各所では、読み書きそれぞれについて、コメントを受け入れるかをフラグなり関数名なりで明示すべき。コメントを受け入れる旨を明示したところだけ、コメント付きのDOMツリーを流通させる。

1. まずedraw-editorをトップレベルコメント付きSVG DOMに対応させる
   - (入力)svgの初期化時にコメントを待避させる (svgの前のコメントと後ろのコメントに分ける)
   - (出力)edraw-document-svg関数にwith-top-level-comments-p引数を追加する。
   これらをサポートするための関数 edraw-dom-split-top-nodes と edraw-dom-merge-top-nodes を追加する。
2. edraw-svg-printをトップレベルコメントに対応させる。
3. edraw-document-svg使用箇所を修正する。(出力系を対応させる)
   即edraw-svg-printしている所(export-to-buffer|file)はwith-top-level-comments-p引数を指定する。
   edraw-mode-save はその後結局svg-printするだけなので問題なし。
   問題は次の二箇所。
   - edraw-edit-svg--finish-edit
   - edraw-save
   この辺りは関数利用者がどうなっているかによる。
   edraw-editorに document-writer-accepts-top-level-comments-p というオプションを追加するくらいしか無い。
   その上で既知の関数利用者を調べる。
   ~:document-writer~ を指定しているところ。
   - edraw-org-edit-link : OK
   - edraw-edit-svg : 利用者次第
   edraw-edit-svgの利用者を調べる。
   - edraw-shape-picker-edit-shape-atとedraw-shape-picker-insert-new-shape-at : OK
     (どちらもedraw-shape-picker-editor-svg-to-stringでedraw-get-document-bodyをを使ってbody下の要素を列挙している)
   - edraw-org-edit-regular-file-link : OK
4. edraw-editorに:svgを引き渡しているところを調べる。
   - edraw-editor-create : OK コメントでしか使われていない。
   - edraw-edit-svg : 利用箇所による。
     - edraw-shape-picker-edit-shape-at : OK edraw-create-document-svg使用
     - edraw-shape-picker-insert-new-shape-at : OK edraw-create-document-svg使用
     - edraw-org-edit-regular-file-link :
       edraw-svg-read-from-file => edraw-svg-decode-svg
   - edraw-org-edit-link :
     edraw-org-link-load-svg => edraw-svg-read-from-file => edraw-svg-decode-svg
   - edraw-mode : 後でじっくり調べる。
5. edraw-org-link-html-convert-svg-for-embed-in-htmlをトップレベルコメントに対応させる。
6. 次の関数に accept-top-level-comments-p 引数を追加する。
   - edraw-svg-decode-svg
   - edraw-svg-read-from-file
   - edraw-org-link-load-svg
7. 次の関数は accept-comments-p をtにする。
   - edraw-mode--parse-svg
   - edraw-org-edit-regular-file-link
   - edraw-org-link-html-link-to-svg
   - edraw-org-edit-link
8. edraw-modeはコメントがあるかもしれない前提で検査をする

注意:コメントの前後の改行位置までは保持されない。コメントの前後は必ず改行で区切られる。これは最初の一行に ~<!-- -*- mode: edraw -*- -->~ と書かれている場合を想定した処置。
** DONE edraw-mode/拡張子を.edraw.svgとせず.svgでもedraw-modeで開くようにする
CLOSED: [2023-08-25 Fri 18:06]
セーブ時に.edraw.svgという拡張子を入力するのが煩わしい。

必ずedraw-modeで開くファイルコメントを追加するというのはどうか。
svgファイルの先頭に ~<!-- -*- mode: edraw -*- -->~ と入れればOK。コメントがある場合の解析は対策済み。
しかし本当にそれで良いのだろうか。迷う。
オプションを追加するくらい？

他の方法としては、magic-mode-alistで ~id="edraw-body"~ とか edraw-def? を検出するとか？　edraw-bodyはedraw-defが肥大化するとそこまで検索できないかもしれないので。 ~id="edraw-~ で十分かな?

両方の方法をREADME.orgに記載した。
** DONE 色/色を色名に変換する関数を追加する
CLOSED: [2023-08-25 Fri 23:25]
** DONE 色/edraw-color-picker-replace-color-atは色名を認識すべき
CLOSED: [2023-08-25 Fri 23:14]
** DONE 色/edraw-color-picker-replace-color-at等をCustom-modeで使えるようにする
CLOSED: [2023-08-25 Fri 23:16]
デフォルトのcolor-name-schemeをバッファローカル変数で指定出来るようにする。
キー割り当ては custom-field-keymap に追加しなければならない。
READMEに設定方法を書く。
** DONE Ubuntuで子フレーム表示のカラーピッカーがドラッグできないのを直す
CLOSED: [2023-08-26 Sat 02:00]
** DONE Emacs28～27でカラーピッカー文字置き換え・追加コマンドがエラーになる
CLOSED: [2023-08-26 Sat 02:20]
set-transient-mapの第四引数(message)はEmacs29からなので、その前はエラーになる。
** CANCELLED Ubuntuでメニューの日本語が化けるのを直す
CLOSED: [2023-08-26 Sat 12:50]
原因はEmacsなのかデスクトップシステム側なのか。
メニューに使うフォントの問題かも？

~/.XresourcesにEmacs*fontに対するフォント設定をしたら日本語が表示されるようになった。が、通常の文字も変わってしまった。メニューだけ変える方法が分からない。メニューバーとは違う。
まぁ、常用環境では無いし、設定で回避できそうだからユーザーの責任と言うことで。
** DONE パス編集/切り替えツールが欲しい
CLOSED: [2023-08-26 Sat 15:32]
パスで図形を書いていて、次の区間のハンドルだけを変えたい場合は沢山ある。
M-ドラッグでそのハンドルの位置だけを単独で移動させたい。

アンカーをM-ドラッグした場合は、両方のハンドルを直線上に同じ長さで反対向きに伸ばす。
アンカーをM-クリックした場合は、両方のハンドルを除去して完全な角にする。
** DONE Emacs 27.1で発生した警告を修正する。
CLOSED: [2023-08-26 Sat 19:49]
- (require 'seq)が必要。
- tab-bar-formatはEmacs 28.1以降。
- org-export-derived-backend-pはedraw-org.elからはox.elが必要なので何で大丈夫なんだろう。autoloadを足しておいた。
** DONE xlink:hrefがhrefになってしまうのを何とかする
CLOSED: [2023-08-26 Sat 19:55]
とにかくSVGを読み込んだら強制的にxlink:hrefに直す。
ついでにedraw-svg-version変数を追加して2.0用の入出力も出来るようにしておく。

libxml-parse-xml-regionを使うとxlink:hrefがhrefになってしまう。
Emacs27環境で試したらxlink:hrefでは表示されていたものが保存してエディタで開き直すと表示されなくなる。Emacs29環境ではどちらも表示されるが、xlink:hrefがhrefになるのは変わらない。

#+begin_src elisp :results pp
(with-temp-buffer
  (insert "<svg width=\"560\" height=\"420\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><image x=\"240\" y=\"220\" width=\"180\" height=\"120\" xlink:href=\"steak.jpg\" /></svg>")
  (libxml-parse-xml-region (point-min) (point-max)))
#+end_src

#+RESULTS:
#+begin_example
(svg
 ((width . "560")
  (height . "420")
  (version . "1.1"))
 (image
  ((x . "240")
   (y . "220")
   (width . "180")
   (height . "120")
   (href . "steak.jpg"))))
#+end_example

修正後のテスト。

#+begin_src elisp :results pp
(let ((edraw-svg-version "1.1"))
  (edraw-svg-decode-svg "<!-- test --><svg width=\"560\" height=\"420\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><image x=\"240\" y=\"220\" width=\"180\" height=\"120\" xlink:href=\"steak.jpg\" /></svg>" nil))
#+end_src

#+RESULTS:
#+begin_example
(svg
 ((xmlns . "http://www.w3.org/2000/svg")
  (xmlns:xlink . "http://www.w3.org/1999/xlink")
  (width . "560")
  (height . "420")
  (version . "1.1"))
 (image
  ((x . "240")
   (y . "220")
   (width . "180")
   (height . "120")
   (xlink:href . "steak.jpg"))))
#+end_example

2.0だと次のようになる。

#+begin_src elisp :results pp
(let ((edraw-svg-version "2.0"))
  (edraw-svg-decode-svg "<!-- test --><svg width=\"560\" height=\"420\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><image x=\"240\" y=\"220\" width=\"180\" height=\"120\" xlink:href=\"steak.jpg\" /></svg>" nil))
#+end_src

#+RESULTS:
#+begin_example
(svg
 ((xmlns . "http://www.w3.org/2000/svg")
  (width . "560")
  (height . "420"))
 (image
  ((x . "240")
   (y . "220")
   (width . "180")
   (height . "120")
   (href . "steak.jpg"))))
#+end_example
** DONE edrawコマンドで作ったバッファで画像ツールで挿入した画像が表示されない
CLOSED: [2023-08-27 Sun 14:27]
buffer-file-nameがnilなのでcreate-imageに(画像記述子に):base-uriを指定しないと外部画像は参照できないのは当然。

対処方法は二つ考えられる:

- 画像ツールを選択した段階で、ファイル名を付けて保存するように警告を出す。
- ファイル名を付けて保存するまでの間、:base-uriをdefault-directory(下のダミーファイル名)にする。

外部にある画像ファイルへの相対パスを埋め込むのだから、参照元のファイル名を確定させろというのは筋の通っている話。

とは言え、edrawコマンドを実行したときのdefault-directoryで問題ない場合もあるだろうし、その場合いちいちファイル名を決めなければならないのは不便。edrawコマンドは手軽に図を作成するのが目的なので、そこは何とかしたい。

なので後者で実装することにした。

base-uriに対応していないEmacs 27では画像が表示されない現象は残るがそこは諦める。時間とともに解決するだろう。
** DONE 既にテキスト以外の図形がある所にテキストを追加できないのを直す
CLOSED: [2023-08-27 Sun 17:02]
テキストをクリックで変更できるようにしたときに生じたバグ。
[[https://github.com/misohena/el-easydraw/commit/bd1d19271972a04c8fa3e6a3d892288cfc00faa2][Change existing text on click in text tool · misohena/el-easydraw@bd1d192]]
対象をテキストに限定していないのが原因。
** DONE 手書きツールのスムーズ化の方式を選べるようにする
CLOSED: [2023-09-01 Fri 23:37]
現在のベジェ曲線フィッティングは歪むのが気になるという人がいるようなので、とりあえず昔の挙動に戻せるようにする。
[[https://github.com/misohena/el-easydraw/issues/17][Improve path smoothing in the free hand tool · Issue #17 · misohena/el-easydraw]]

edraw-editor-tool-freehand-smoothing-method変数を追加した。
** DONE テキスト/縦書きが出来るようにしたい
CLOSED: [2023-09-10 Sun 09:35]
writing-modeプロパティを追加する。SVG1.1だとtbだがSVG2ではvertical-rl。

[[edraw:data=H4sIANOm9mQAA3WQUUrEMBCGrxLG527arsh2afrqGXysTZqGpomks5uuj907qAcQRUTwAN6moHgL02VZfNCHGRiG75s/yfutJF5xbBgsz2MgjVCyQQbpRRiGTpueQYN4s6bUe7/wy4V1kqZxHNOAAtkK1ytrGCSL5AisB61M+xeWZFlGD1socicqJAODcGd36P/GUJyB4K700XVZtdLZjeFAenS2FQyMNQJIrbRmcFbXNRBa5PI3ZPku3EMxYIB2OjDeKVRGRp3lYj2/AVVV6sjpQ5Y5QAi2ik/aNE2BzIKoNFVjHYMeS4dhbw1GvboNzmR1HOuyUzporjbk0mKjKig+796/Xsbv14dp/zbtP6b9/TQ+TePzND7mdPYWOZWhwpcWP7TPEl6TAQAA]]

ただし、現時点のlibrsvgでは正しく表示されない。
フォントは何を指定してもダメ。もちろんエクスポートすればブラウザで正しく表示される。

境界矩形を正しく計算したい。
text-anchorは縦書きでも本来はちゃんと機能する(librsvgは何かがおかしい)。
+writing-modeはどうやって取得するべきなのか。属性とスタイルの両方を見るべきだし、祖先も見るべきなのか。+ とりあえずwriting-mode属性のみ考慮する。
** DONE 編集開始時にグループ内のmarker使用が消える問題を修正する
CLOSED: [2023-09-10 Sun 10:05]
グループ内で矢印を使っていたときに、編集前には表示されている矢印が編集を開始したとたん消える。
おそらくグループ内まで検索していないのだと思う。
** DONE 非GUI環境でのエラーや警告を修正する
CLOSED: [2023-09-12 Tue 21:03]
最低限エクスポートだけはできるようにする。
エラー:
- mwheel.el
  - mouse-wheel-up-eventとmouse-wheel-down-event (変数)
警告:
- image.c
  - image-size
  - image-flush
  - max-image-size
- image.el
  - image-compute-scaling-factor
  - image-scaling-factor (変数)
** DONE エクスポート前の段階でedraw.elを読み込まないようにする
CLOSED: [2023-09-12 Tue 21:17]
ox-htmlやox-latexが読み込まれた時点でedraw.elが読み込まれてしまう。
実際にエクスポート関数が呼ばれた時点までedraw.elの読み込みを遅延する。
