

* Inbox
** TODO edraw-editor-auto-view-enlargement-max-sizeのデフォルト値
(cons 560 420)ではなくedraw-default-document-propertiesの値を使うべき？　意図的に小さくしているときに困る。

それともフレームサイズにすべき？ ウィンドウ分割がどうなるかによって変わってくる。

それともimage-compute-scaling-factorを参考に
~(* (/ (float (window-width nil t)) (window-width)) 70)~ みたいにしてみる？
ただ、これはビューサイズなのでこれにimage-scaleを考慮しなければならないけど。

** TODO edraw-set-view-size-specの誤操作を防止する
ビューのサイズを変更するときに、非常に大きな値を入力してしまいやすい。
Widthを入力するときに既に現在の幅が入力されているので、その後に続けて数字を入力してしまう。例えば現在の高さが300のときに400へ変更したい場合、300400と入力してしまう。400Enterと入力したら高さ300400にしようとしてしばらくフリーズする。

対策:
- 空文字列をこれまでと同じ値にし、指定クリアを別な方法にする
- 最大サイズを決める

指定をクリアする良い方法は何だろう。

** TODO UNDOデータのマージに一貫性がない問題について考える
edraw-merge-set-properties-undo-data等、同じ操作を連続して行ったときにUNDO情報のマージを行っているが、それらは機能したりしなかったりしている。

プロパティエディタでx属性をドラッグで変化させた場合は一つのUNDO情報にまとめられる。これはありがたい機能。

キーボードによる選択図形の移動は現在の所マージされていない。当初はマージされていたかもしれないが、今は複数の選択図形を一度に移動するためにグループ化されているので、グループ同士はマージされない。

右クリックで一つの図形を選んで平行移動する場合でも、edraw-set-properties-internalが無変化のプロパティを削除するので、マージされない場合がある。例えばrectの場合、最初はx,y,width,heightが文字列なので一回目の平行移動はx,y,width,heightの全てのプロパティが変化する。しかし二回目はxやyのみ変化するので、一回目のプロパティ列と一致しないのでマージされない。

図形のドラッグ移動についてはドラッグ操作側で edraw-editor-with-temp-modifications を使って確実に1回にまとめているので問題ない。

edraw-push-undo-path-point-moveによるパスのアンカーやハンドルの移動はキーボードでもマージされる。これは悪くないと思う。

他にもマージするケースがあるのかは不明。

これらの挙動には一部一貫性が欠ける動作があるように思えるがどうしたら良いか。

** TODO modifiedフラグの制御を厳密にする
現在次のような問題がある。
- UNDOを考慮していない。
- Previewによる変化でフラグが立ってしまう。

** TODO マニピュレータ機構を追加する

- 選択済みオブジェクトのように機能する。
- 任意のタイミングで一つだけ追加できる。主にツールやコマンドによって追加される。
  例:
  - 複数オブジェクトが選択されたとき追加され、解除されたときに削除される。
  - 変形コマンドが実行されたとき。
- マウスイベントはマニピュレータが優先的に処理する。
- マニピュレータがあるときは選択済みオブジェクト、アンカー、ハンドルは操作できない(?)

ある種のモードなのだろうか。モーダルであるべきか否か。

** TODO 点を他の図形に接続する機能を追加する
data属性でどの点をどの点へ接続するかを記述させてはどうか。

data-connect-beginning-point-to="nearest point on edge of obj123456"

もっと一般化した機能を作れないか。任意の点を任意の場所に追従させるような。例えばtextの(x, y)を指定した図形の中心に追従させたり。

ところでオブジェクトIDって維持されるのだろうか。id=を設定するようにしないとダメなのでは？

** TODO 別ファイルの内容をインポートする機能を追加する
別ファイルの#edraw-bodyの中身を現在のドキュメントに追加する。
#edraw-defsも何とかして更新すべき。

** TODO ズーム時にズーム倍率の逆数ピクセル数でスナップする

ピクセル以下のスナップをどうするか。

現在はグリッドを非表示にしているときでもピクセルにスナップしている。つまり図形作成や変形時に整数座標以外は指定出来ないようになっている。(点や図形をピックアップするときは正確な座標が必要なのでスナップしていない)

この仕様は切りの悪い座標値が無くなり計算誤差を防ぎ、SVGテキストが簡潔で小さくなる等の効果がある。また、高DPI環境では自動スケーリングによってエディタが常に非整数倍に拡大されており、マウスの入力座標が(ズームしていないときでも)整数にならない(整数座標がマウスで入力できない)という問題への対策でもある。

が、アイコンなど非常に小さな絵を描いているときは1ピクセル未満の座標が欲しくなる場合がある。もちろんグリッド間隔を1px未満にしたり、数値入力で平行移動したりすれば指定出来るが、グリッドが無いときでもズーム時にマウスで小数座標が指定出来ても良いのではないか。

解決策の案:

- 設定で一時的にピクセルスナップをOFFに出来るようにする
- +グリッド表示間隔とスナップ間隔を分けて1ピクセル以下のスナップ間隔を指定出来るようにする+ (←既に1ピクセル以下のグリッド間隔は実現した。問題はグリッドを表示していないときの挙動)
- ズーム拡大率の逆数間隔(2倍ズームなら0.5px間隔、4倍ズームなら0.25px間隔)にスナップする(自動スケーリングの影響を受けないこと)

ピクセルスナップをOFFにするのは高解像度環境かどうかで操作性が変わってしまうので避けたい。

+常にズーム拡大率の逆数間隔でスナップするのは、1ピクセル単位でスナップして欲しい時に困る気もする。+ (←それはグリッド間隔の指定でやれば良いのでは？)

+結局何らかの設定で小数単位グリッドスナップを行えるようにするしかないのではないか。+

やるなら、グリッド非表示の時はズーム倍率の逆数のピクセル数でスナップするのが良さそう。1px単位固定というのも魅力的だけど、それがやりたければグリッド間隔を1pxにすべき。

逆にズームアウトしていたらどうするのだろう。0.5倍の時は2px単位にすべき？　そうでなければ高解像度環境で整数値とは言え不規則な座標値になってしまいそうだけど。

1.5倍ズームの場合は0.666666666667ピクセル単位でスナップするの？　マジで？　まぁ、でも他にしようがない。ただ、edraw-grid-roundでは剰余を取っているので大きな座標で誤差が問題になるかもしれない((mod 10000 0.666666666667)=0.6666666616665555だから気にするほどでも無い？)。別な計算方法はある？

もしスナップを改良するなら edraw-snap-xy を修正すること。

** TODO 設定/デフォルトプロパティ設定をdefcustomにしたい
-userという変数を作って、変更時に本番変数に反映させるのはどうか。
もちろんプロパティ値がnilの場合はプロパティを削除する。
無指定の物は-initialという定数のものを採用する。

** TODO 設定/デフォルトプロパティ値は種類毎に持つべきでは無い？
カスタムシェイプツールでpath以外(rectやellipse)にも同一の属性を適用したくなる。
とは言えrectツールではstrokeを入れたくないし、pathではfillを入れたくない。
ひょっとして図形種類毎では無くツール毎にデフォルト値を持つべきなのでは？
とは言えやはりtextは同一視できないんじゃない？
カスタムシェイプにtextなんて入れることがある？

** TODO 変形/ローカル座標系変形機能を追加する
図形のtransformプロパティ適用前の座標系で、平行移動、伸縮、回転できるようにする。
transform-methodのような設定を追加すべきか、あるいは、コマンドを追加したり、コマンド内でのオプションにするか。

** TODO 変形/変形方式の設定方法を変える
メニューのあちこちに同じ設定に対する項目があるのは何かおかしい。
それらメニュー項目にある変形だけでなく、アンカーポイントのドラッグによる変形にも影響がある。
かといってどうしたら使い勝手が良いのかよく分からない。
メインメニューの直下に独立してあるべき？
** TODO 変形/変形方式にanchor points優先オートを追加する
現状ではtransform-methodが'autoの場合、transformプロパティが存在していたら一律transformプロパティに追加する形で変形する。

rect等(edraw-shape-with-rect-boundaryを継承したクラス)では回転にtransformが必要で、textではスケーリングにもtransformが必要なので、そのためにtransformを使うのは仕方が無い。

しかしtransformが設定されていても、transformを使わずに平行移動はできる。rect等の場合はスケーリングもできる。

** TODO 変形/変形時のtransformプロパティ使用を最小化すべきか考える
rect, ellipse, circle, imageは回転以外であればtransformを使う必要は無い。
textは回転とスケーリング以外(平行移動のみ)であればtransformを使う必要は無い。

edraw-transformメソッドは回転成分(textの場合はスケーリング成分も)にのみtransformプロパティを使用し、平行移動はxやyの移動によって表現すべきだろうか。

すでにtransformプロパティが使用されていても、平行移動はxやyを移動することで実現すべきだろうか。

scaleが0のときを考慮に入れるべきだろうか。

** TODO 変形/左右上下反転コマンドを追加する
ドキュメント全体と選択図形と図形単体で。
-1倍しても良いけど、簡単に反転できると良い。
dtfh dtfvとか?
要らないかも。
** TODO 変形/GUIで変形できるようにする
transform属性を変更できるようにする(図形オブジェクト全体の変形)
edraw-read-rectangleのようにread-eventループに入ってしまうのも手かもしれない。
** TODO 座標を表示する機能を追加する
何らかの方法で座標が知りたい場合がある。
問題はEmacsではモーションイベントを積極的に使いづらい所。
** TODO 編集開始時にグループ内のmarker使用が消える問題を修正する
グループ内で矢印を使っていたときに、編集前には表示されている矢印が編集を開始したとたん消える。
おそらくグループ内まで検索していないのだと思う。

** TODO アンカーポイントの複数選択・移動機能を追加する
図形を調整するときに無いと不便。

** TODO パス編集/pathはできるだけd全体をUNDOしないようにする
「@todo Avoid using edraw-push-undo-path-d-change?」の部分。
d全体をUNDOデータにすると実際にアンドゥしたときに全てのポイントが無効になり、選択状態を全て解除しなければならなくなるなどの弊害がある。
例えばポイントを追加したら、ポイントを削除するUNDOデータを登録すれば済むはず。ポイントの識別はインデックス番号で十分。
注意点:
- 選択状態の追跡部分は注意が必要。現在のedraw-on-selected-shape-changedは shape-path-data タイプの変更で deselectしているので。点を削除したら点をdeselectしなければならないはず。
- パスデータはLからCへ暗黙的に変換される場合がある。これが行われるとインデックス番号がずれてしまう場合がある。そもそもCからLにはどうやっても戻らないのでデータも戻らない。結局dを戻した方が簡単かもしれない。

** TODO パス編集/UNDOしたときに-forward-handle-pointが失われるのを何とかする
edraw-move-nth-pointで指定indexのポイントが見つかれない問題として表面化する。

ドラッグでアンカーを追加したときに((edraw-on-down-mouse-1 ((tool edraw-editor-tool-path)...)...)で)、次が呼ばれる。
- edraw-add-anchor-point
- edraw-create-forward-handle
- edraw-create-backward-handle
- edraw-move-with-opposite-handle-symmetry-on-transformed

もう一度同じようにアンカーを追加したとして

- edraw-add-anchor-point
- edraw-create-forward-handle
- edraw-create-backward-handle
- edraw-move-with-opposite-handle-symmetry-on-transformed

これをUNDOして、もう一回UNDOしたときに、1回目のedraw-move-with-opposite-handle-symmetry-on-transformedに対するUNDOは正しく動作しない。2回目のedraw-add-anchor-pointに対するUNDOはdを復元するが-forward-handle-pointまでは復元しないから、-forward-handle-pointに対する移動をUNDOできない。

現在はedraw-move-nth-pointで見つからなかったときに単に無視している。
dプロパティを復元する方式だとどうしても-forward-handle-pointは戻らない。

現状次の三つは全てUNDOでdを復元する。
- edraw-add-anchor-point
- edraw-create-forward-handle
- edraw-create-backward-handle

なので、これらをdプロパティUNDOをしないように改変すれば良い。

しかし話はそれほど簡単では無く、LをCに暗黙的に変換してしまう問題にも対処しなければならない。ちゃんとLに戻さないと番号がずれるしパスデータも変わってしまう。ちゃんとできるならポイントオブジェクトが無効にならないので良い。

それが出来ないならd復元時に-forward-handle-pointも復元するのが良いかもしれない。
edraw-push-undo-propertiesでdを保存するときに追加の処理を入れる感じ。
edraw-set-propertiesで復元するのでは無く、専用のシリアライズデータ形式で保存・復元したらどうか。そうすれば数値の文字列化による誤差も回避できる。

** TODO パス編集/パスなどの辺をドラッグできるようにする？
** TODO パス編集/既存パスからの継続は選択中のパスに限定しない方が良い？
** TODO パス編集/パスの始点を移動しようとして閉じてしまうミスを防げないか
** TODO パス編集/edraw-path-cmdに-backward-handle-pointタイプ(bhp)を追加する
reverseはfhpをbhpに変換する。
** TODO パス編集/cmdlistを複数のMやZに対応させる
- M .. L ..... Z M .. L ..... Z のように単純に閉パスが二つあるだけのケース。
- M .. L ..... Z L ..... Z L ..... Z のような書き方も出来る。一つのMを三つの閉パスが共有している形。

path-cmdはともかく、path-pointは前後のアンカーやハンドルの取得、削除、追加等様々な処理が正しく動かなければならない。Mを指しているときは、そのMの次がどこになるのかpath-point自身が持たなければならない。

** TODO パス編集/pathが1点以下になって見えなくなったらどうするか考える
rectやellipse、textにもそういった問題はある。
検出してshapeを消すべき。

** TODO gタグのshape descriptor変換についての問題
edraw-shape-descriptor-from-svg-element-without-editor関数にgタグに特化した処理がある。子孫の要素を再帰的にshape descriptorへ変換するためのもの。ここはこれでいいのだろうか。

将来的に <g data-edraw-type="edraw-complex-shape">...</g> のようなものを作るかもしれない。その際に子孫をshape descriptorとして保存する必要があるのだろうか。 edraw-shape-types の :create-element やその後にプロパティ設定で子孫の内容を生成すべきなんじゃないだろうか。

このshape descriptorにするところは問題ないのかもしれない。しかし、shape descriptorからshapeオブジェクトを作るところ(edraw-shape-from-shape-descriptor)では問題が生じる。子孫に対してもshapeオブジェクトを生成してしまう。

gタイプのみ子孫をshape descriptorに入れるべきで、それ以外では入れるべきでは無いのだろうか。しかし、Shape Pickerに登録したときに絵が出てこなくなってしまう。

子孫に対してオブジェクトを生成してしまうことが問題であれば、そうしないように生成することも出来なくはない。edraw-shape-typesに子孫展開の抑止フラグを追加するとか。

また、Shape Pickerが問題なのであれば、基本的にSVG文字列で処理すれば良いだけのような気もする。しかしコピーしたときはshape descriptorなのでその時点で情報が落ちてしまったらどうしようもない。

そもそもshape-descriptorという仕組みがあまり良くなかったのかもしれない。全図形はSVG文字列との相互変換が出来ることが前提なのだから、それで十分だったのかもしれない。

とりあえず ~(eq (dom-tag element) 'g)~ から (~(eq (edraw-shape-type-from-element element) 'g)~ へ変更しておいた。新しい図形タイプでg要素を使い、再帰的に処理したい場合は、何か対策をする。

** TODO shape-descriptorの不要な属性を削除する
あまりに冗長なので。デフォルトで埋めないので大丈夫だとは思うけど要確認。

** TODO テキストエディタでSVGを直接編集できるようにする
最終手段用。
中身の無いgを選択して消す方法が無いので(中身の無いgを消す機能があっても良いけど)。
非グラフィカル環境でリンクの中身を書き替えるのにも使えるかも。

edrawリンクのdata-file相互変換機能があれば十分かも？　dataリンクをfileリンクに変換してファイルを編集しdataリンクに戻せば良い。

** TODO 見えない要素を一括で消す機能を追加する
中身の無いgを消すのは困難。「次のshape」を使えば出来ないことは無いけど。
同様に中身の無いpathも消したい。
その他の形状は迷うところ。一応座標があるので選択は出来る。

** TODO グラデーションエディタを作る
** TODO デフォルト値を何度も設定しなくて良くなる機能
** TODO 色/edraw-color-picker-replace-color-at-pointのキー入力を改善する
C-c C-c や C-c C-kが効かない。
** TODO 色/カラーピッカーに固定のカラーパレットが欲しいかも？
特定の色集合を保持し続けられるようなやつ。
ファイルとの読み書きも出来ると良い。
** TODO 色/カラーピッカーを必要に応じてフレーム化する
エディタやプロパティエディタ、シェイプピッカーから使う時はミニバッファに表示するのでフレーム化は難しい。モーダルでなければならない。
カラーピッカー単体で使うコマンドはフレームにしてもよいのではないか。

** TODO オブジェクトを一覧から選んで選択できるようにする
** TODO オブジェクトを一覧から選んでプロパティエディタを開けるようにする
** TODO 日本語に翻訳する
地味によく分からないのが言語、国をどのように割り出すか。
- 環境変数
- current-language-environment
- 手動設定

** TODO ORG/org-modeでODTへのエクスポートに対応する
** TODO ORG/個別のedrawリンクにHTML属性値を指定出来るようにする
~[[edraw:html-attr-width=400;html-attr-alt=Title;file=example.edraw-svg]]~ のような形式？
それともhtml-attr=で一つにまとめる？
** TODO 表示改善/パスUIのハンドルや点が見づらいのを何とかする
ストローク色に応じて色を変えられないか。
グリッドを mix-blend-mode: difference にしたら激重だったので、そのやり方は避けたいかも。

** TODO 表示改善/選択中オブジェクトのアウトラインに線を入れる
** TODO カスタムシェイプ/貼り付け前に縮尺を指定できるようにする
あらかじめ大きさを指定したい。
問題はUI。ツールオプションを指定するGUIは可能か？
ドラッグで大きさが変えられるようになったので必要性が薄くなってはいる。

** TODO シェイプピッカー/ドラッグ&ドロップできるようにする
範囲選択したentryをドラッグして別の場所へ移動できるようにする。

** TODO シェイプピッカー/markerを使った図形の表示を改善する
矢印などのmarkerが表示されない。defsをSVG文字列に含めていないから。

edraw-shape-descriptor-to-svg-element にダミーのdefrefsを使っているので、そこに何か定義が入ったらそれもコピーしてはどうか？

** TODO シェイプピッカー/org-modeファイルをピッカーに出来るようにする
edraw-org-shape-picker-minor-modeが必要？

** TODO プロパティエディタ/ボタン類の表示を改善する
バッファの上の方に表示できないか。バーのようにすると良い？
Prev, Nextを連続して押しづらい。
見た目もあまりよろしくない。

** TODO プロパティエディタ/複数選択してプロパティを設定
- 必須プロパティは除外
- 全てnilで始めるか、全てが完全に一致しているものだけ埋めるか
- 例によって代理となるオブジェクトを作る
** TODO プロパティエディタ/エラーチェックを強化する
** TODO DOMツリーの文字列化は変更のあったサブツリーのみに限定する
** TODO パスの内外判定、パス全体(全セグメント一括)のAABBチェック
をした方が良いのでは？　速いし誤判定防止になる。
** TODO パスの内外判定、線のつなぎ目ですり抜けるケースがまだあると思う
** TODO dom.el/svg.elの代わりを作る
- dom.elは兄弟や親へリンクが無いので効率が悪い。いろんな関数の引数にいちいち親・祖先ノードが必要になってコードが見づらくなるし、いちいち探索処理が走る。
- svg.elの要素を作る関数の一部は正直dom-nodeで直接作った方が簡単。
- svg.elのグラデーションサポートは中途半端。
- svg-printは属性やテキストをエスケープしていない。
- svg-printにフィルタ関数を指定したい。-edraw-で始まるクラスを持つ要素を消したい。
- 親を隠し属性で持たせても良い。
** TODO edraw-path-cmdlist系をパスクラスに置き換える
edraw-path-cmdlist系はSVGパスコマンドの仕様に合わせすぎた気がする。
もっと抽象的なパスクラス(cmdlist相当)、パスセグメントクラス(cmd相当)を作った方が良かったかもしれない。パスセグメントはL、C、(可能なら)Aの線を表現する。cmdはMとかZがあって純粋にパスセグメントに相当しないから気持ち悪い。
SVGパスデータは複数のMが書ける(複数のサブパスを持てる)のが頭痛の種だけど、それは複数のパスオブジェクトに分割して表現するとか。
まぁ、結局どっちで書いても等価だし今更なんだけど。
** TODO el-easydrawをEmacs26に対応させる
次のあたりを修正すれば動くっぽい。
- (require 'seq)
- (require 'subr-x) when-let, if-let等
- svg-node関数を使わないようにする
ただ、Emacs26の時代はlibrsvgのバージョンも古いのであえて対応しない方が良いかも。

* Finished
** DONE パスの内外判定、直線のつなぎ目ですり抜けがある
   CLOSED: [2021-08-16 Mon 21:53]
** DONE オブジェクトを右クリックでコンテキストメニューを出す
   CLOSED: [2021-08-16 Mon 21:53]
** DONE オブジェクトを削除できるようにする
   CLOSED: [2021-08-16 Mon 23:34]
** DONE オブジェクトの前後順序変更機能
   CLOSED: [2021-08-16 Mon 23:33]
** DONE オブジェクトの属性を変更できるようにする
   CLOSED: [2021-08-17 Tue 23:16]
** DONE 矩形属性変更機能 (ストローク、フィル、角丸)
   CLOSED: [2021-08-17 Tue 23:17]
** DONE 楕円属性変更機能 (ストローク、フィル、xy半径)
   CLOSED: [2021-08-17 Tue 23:17]
** DONE パス属性変更機能 (ストローク、フィル)
   CLOSED: [2021-08-17 Tue 23:17]
** DONE テキスト属性変更機能 (フォント、等々)
   CLOSED: [2021-08-17 Tue 23:17]
** DONE パスのアンカー移動時に制御点も移動する
   CLOSED: [2021-08-18 Wed 12:17]
** DONE 後ろのセグメントのハンドルを前のアンカーより優先する
   CLOSED: [2021-08-18 Wed 12:17]
** DONE グリッドON/OFF機能
   CLOSED: [2021-08-18 Wed 12:18]
** DONE ツールバーにメインメニューボタンを付ける
   CLOSED: [2021-08-18 Wed 13:38]
** DONE カンバスサイズ変更機能
   CLOSED: [2021-08-18 Wed 17:19]
** DONE 背景指定機能(指定色、透明)
   CLOSED: [2021-08-18 Wed 17:19]
** DONE グリッド間隔設定機能
   CLOSED: [2021-08-18 Wed 17:20]
** DONE デフォルトフォント設定機能
   CLOSED: [2021-08-20 Fri 01:36]
** DONE 選択ツールを追加する
   CLOSED: [2021-08-20 Fri 01:37]
** DONE 既存の矩形や楕円を再編集できるようにする
   CLOSED: [2021-08-20 Fri 01:36]
** DONE 既存のテキストの位置を再編集できるようにする
   CLOSED: [2021-08-20 Fri 01:36]
** DONE オブジェクトを選択できるようにする
   CLOSED: [2021-08-20 Fri 04:20]
- 選択したオブジェクトはアウトラインに細い線を入れ、コントロールポイントを表示して分かるようにする。
- ドラッグで選択・移動する。複数候補がある場合は、選択中のものがあればそれを使い、選択中のものが無い場合は一番上を選択する。そして移動する。重なり選択メニューを出してしまうと移動できなくなってしまうので。
- 選択中に表示されるコントロールポイントをドラッグした場合、リシェイプを行う。
  - 矩形の場合、四隅がコントロールポイント。矩形の位置幅高さが変わる。
  - 楕円の場合、四隅がコントロールポイント。楕円の位置半径が変わる。
  - パスの場合、各アンカーポイントがコントロールポイント。アンカーの位置が変わる。

** DONE アンカーポイントを選択できるようにする
   CLOSED: [2021-08-21 Sat 06:15]
** DONE 既存のパスを再編集できるようにする
   CLOSED: [2021-08-21 Sat 06:17]
** DONE パスデータのA以外のコマンドに対応する
   CLOSED: [2021-08-21 Sat 19:13]
edraw-path-cmdlist-from-dで全部LとCに変換する。
** DONE パスポイントの移動はグリッドの交点へスナップさせる
   CLOSED: [2021-08-22 Sun 19:33]
** DONE 選択状態をエディタの状態へ引き上げる
   CLOSED: [2021-08-22 Sun 19:33]
選択ツールはあくまでエディタオブジェクトの状態を変更するだけ。
パスツールはアンカーを追加するたびに選択状態を更新する？。

** DONE パスツールにおいてアンカーを右クリックでコンテキストメニューを出す
   CLOSED: [2021-08-22 Sun 19:33]
** DONE 全クリア機能
   CLOSED: [2021-08-24 Tue 03:35]

** DONE shapeクラスを作る
   CLOSED: [2021-08-23 Mon 03:25]
- [X] pathのcmdlistはオブジェクトが管理する
- [X] 要素に対する変更は全ていったんshapeクラスを通す

** DONE 各ツールは選択状態を正しく制御する
   CLOSED: [2021-08-23 Mon 06:53]
矩形、楕円、テキスト各ツールは図形生成直前に選択を解除し、生成した図形を選択する。

** DONE パスツールを使いやすくする
   CLOSED: [2021-08-23 Mon 17:16]
- [X] アンカーと同一点のハンドルは表示しないし選択できないようにする。
- [X] アンカーのハンドルを消せるようにする。アンカーと同一点にする。可能ならLに置き換える。
- [X] アンカーのハンドルを表示できるようにする。仮のポイントにハンドルを追加する。必要に応じてCに置き換える。→スムーズ化機能
- [X] 点対称の位置にあるハンドルは一緒に動かす。

** DONE クリックでハンドルを選択できるようにする
   CLOSED: [2021-08-23 Mon 17:17]
ハンドル選択中はそのハンドルだけを単体で動かせる。
アンカー選択中は直線状のハンドルは直線状を維持する。
** DONE パスツールにおいてアンカーを左クリックで選択する
   CLOSED: [2021-08-23 Mon 18:33]
ただし選択アンカーがどこになろうと続きからパスを伸ばせること。
** DONE edraw-editor-toolとedraw-editor-tool-selectのmouse-3は同じ？
   CLOSED: [2021-08-23 Mon 19:08]
なので消す。
** DONE shape-point-pathはd属性の変更をshape-pathへ依頼すべき
   CLOSED: [2021-08-24 Tue 00:07]
** DONE 矩形や楕円の辺にも制御点を付ける
   CLOSED: [2021-08-24 Tue 00:07]
** DONE shape-pointオブジェクトができるだけ無効にならないようにする
   CLOSED: [2021-08-24 Tue 00:32]
- 矩形や楕円はshape毎に一つのrectを参照するべき。というかshape毎に四つのpointオブジェクトを固定すべき。
- テキストは一つのpointオブジェクトを共有するべき。
- パスは別途調査する。

** DONE 変更通知/最低限の変更通知の仕組みを作る
   CLOSED: [2021-08-24 Tue 03:18]
- 全ての変更時にedraw-on-shape-changedメソッドを呼ぶようにする。
- editorにはedraw-on-document-changedメソッドを追加する。
- 末端の変更は次の流れで変更をドキュメントへ知らせる。
  edraw-on-shape-point-changed, edraw-on-anchor-position-changed
  → edraw-on-shape-changed → edraw-on-document-changed

** DONE 変更通知/editorに変更済みフラグを追加する
   CLOSED: [2021-08-24 Tue 03:30]
** DONE 画像の更新を遅延させる
   CLOSED: [2021-08-24 Tue 04:22]
何かイベントをポストするかタイマーを使って後で更新すべき。もちろんエディタ(オーバーレイ?)の削除後に更新することはあってはならない。
** DONE 変更通知/全ての変更で自動的に画像更新を行う
   CLOSED: [2021-08-24 Tue 04:22]
遅延更新の仕組みが欲しいところ。
** DONE 変更通知/shapeクラスに変更通知の機能を付ける
   CLOSED: [2021-08-24 Tue 06:39]
** DONE 変更通知/図形を削除したときに選択も解除する
   CLOSED: [2021-08-24 Tue 06:39]
選択中の図形の変更を監視する。
** DONE 変更通知/shapeクラスにset-propertiesを追加する
   CLOSED: [2021-08-24 Tue 11:35]
update-propertiesを廃止する。set-propertyで細かく変更通知を出すのが嫌なので。
** DONE 変更通知/プロパティエディタで編集中のshapeが変更・削除されたとき
   CLOSED: [2021-08-24 Tue 11:35]
- 内容を更新する
- エディタをクローズする
** CANCELLED 変更通知/パスツールで編集中のpath shapeが他から変更・削除されたとき
   CLOSED: [2021-08-24 Tue 12:06]
- 削除されたら編集ターゲットを解除する
- アンカーの追加については、末尾にコマンドを追加しているだけなので問題ないはず。add-commandはMも追加するはず(要再確認)
→(edraw-removed-p shape)で判定できるようにする。変更フックより軽量なので。
** DONE 変更通知/選択状態の変更通知の仕組みを作る
   CLOSED: [2021-08-24 Tue 17:40]
** DONE 変更通知/shapeクラスのset-propertiesで値の変化チェックを確認する
   CLOSED: [2021-08-24 Tue 17:40]
値が変化したときだけon-shape-changedを呼ぶ。
** DONE 機能追加/shapeコンテキストメニューにfillやstrokeの変更を追加する
   CLOSED: [2021-08-25 Wed 00:56]
** DONE 機能追加/矢印キーで選択中のものを移動する
   CLOSED: [2021-08-25 Wed 00:56]
数値引数で移動量を指定。
** DONE shape-point-pathオブジェクトができるだけ無効にならないようにする
   CLOSED: [2021-08-25 Wed 16:27]
矩形や楕円、テキストは修正済み。要調査。
これが出来ると(右クリック等)アンカー操作後にアンカー選択を解除しなくてもよくなる。edraw-unselect-anchorで検索。

edraw-path-cmdはargsとして座標のリストでは無くedraw-path-pointオブジェクトを持つようにする。座標はedraw-path-pointオブジェクトが持つようにする。これによってアンカーやハンドルを一意に識別できるようになる。パスに変更を加えるときはedraw-path-pointオブジェクトを極力引き継ぐようにすることで不必要な無効化を避ける。例えばCを分割するときは新しいCを前に挿入して元のCのハンドル0を新しいCに移す。アンカーとその二つのハンドルだけ新しく作る。

これでも削除等で無効化は避けられないので、それをどう検出するか。shapeの変更通知で無効化の可能性がある変更で選択を解除する。それだと過剰なので、現在選択中のアンカーやハンドルが選択中のshapeに属しているか調べる。

** DONE 選択されているアンカーやハンドルが削除されたときに選択を解除する
   CLOSED: [2021-08-25 Wed 16:27]
@todoあり。削除されたオブジェクトを通知する機能があると便利？ pathの場合同一性判定に難あり。
** CANCELLED rect、ellipse、textツールでアンカーポイントを動かせるようにする
   CLOSED: [2021-08-26 Thu 02:34]
アンカーが表示されているのにドラッグできないのは違和感があるので。
ツールの邪魔になるという判断だが、ドラッグできないならいっそ選択を解除した方が良い。→選択しないようにした。
** DONE 右クリックメニューにSelectを追加する
   CLOSED: [2021-08-26 Thu 02:34]
** DONE パスツール/始点のクリックでパスを閉じる
   CLOSED: [2021-08-27 Fri 13:03]
- [X] マウスで押し下げたアンカーがMコマンドによるものなら、その点へ線を引いてZで閉じる。
- [X] そのままドラッグでハンドルを調整できる。まずは修正箇所を洗い出す。
- [X] Mのbackwardハンドルを取得できるようにする。
- [X] マウスボタンを離したら編集中のshapeをクリアして新しいパスを引けるようにする。

** DONE パスを閉じられるようにしたことによる問題を解決する
   CLOSED: [2021-08-27 Fri 13:03]
- [X] Z命令を末尾に追加する。
- [X] ただし -forward-handle-point が末尾にある場合は、MまでのCを生成してからZを入れる。可能であればMのforward handleと対称の位置にbackwardハンドルを追加する。
- [X] prev-anchorとnext-anchorでMとZを挟んでアンカーを取得できるようにする。
- [X] Zで閉じた点の前後ハンドルを取得できるようにする。
- [X] Zで閉じた点の前後ハンドルを作成できるようにする。
- [X] Zで閉じた点をスムーズ化できるようにする。
- [X] Zで閉じた点のハンドルを削除(コーナー化)できるようにする。
- [X] Zで閉じた点の移動に対応する。
- [X] backward handleからparentアンカー点を探したときはMの点を返す。→handleのnext anchorでMの点を返すようにしたら直った。
- [X] 念のためclosing segmentでforward handleを求めたときにMの先を返す。
- [X] Zで閉じた点の前にアンカーを挿入できるようにする。
- [X] Z直前のMと同一位置のアンカーは取得できないようにする。
      edraw-path-cmd-anchor-point-arg-indexはclosing segmentを無視すべき。
- [X] Zで閉じた点の削除に対応する。
  - 先頭のMを消したとき、対応するZがあり、その前に消したMと同じ座標のCがあるならCのアンカーポイントとその前ハンドルをMの次のアンカーのものにする。
  - Zの前のCやLを消そうとするとき、そのアンカーポイントがMと同じならMを消すものとして処理する。
- [X] closing segmentの始点(Zの前の前のアンカー)を削除するとMのforward handleが表示されなくなる。ハンドルに関する操作も色々受け付けなくなる。
- [X] 平行移動すると閉じた点のハンドルが正しく動かない(隣接の点を消した後)。
- [X] 閉じて点のmake smoothでハンドルは生成されるが0距離になる。

** DONE shapeの右クリックメニューからパスを閉じられるようにする
   CLOSED: [2021-08-27 Fri 14:11]
** DONE 閉じたパスを解除できるようにする(shapeの右クリックメニュー)
   CLOSED: [2021-08-27 Fri 14:22]
** DONE パスの閉じた点を削除したときのハンドルの位置を直す
   CLOSED: [2021-08-27 Fri 21:16]
** DONE SVG要素の属性をできるだけ文字列で扱う
   CLOSED: [2021-08-30 Mon 07:26]
- 数値で取得したい場合はdom-attrではなくedraw-svg-attr-coordやedraw-svg-attr-lengthを使用する。
- get-property、set-property系は極力文字列のまま扱う。そもそもHTMLの属性は元々文字列なのだからそのまま扱う方が間違いが無い。inner-textも文字列で問題ない。nilで属性無し、空文字列はそのまま空文字列として格納する。プロパティエディタ側で必要に応じて空文字列をnilに変換する。requiredじゃない属性は空文字列をnilにしてset-propertyすべき。

** DONE shape-circleを追加する
   CLOSED: [2021-08-30 Mon 11:06]
手動で書き替えたSVGを読み込んだときに一応操作できるようになる。
** [8/8] org-mode統合
*** DONE edrawリンクタイプを登録する
    CLOSED: [2021-08-28 Sat 10:10]
*** DONE インライン画像表示する
    CLOSED: [2021-08-28 Sat 10:10]
*** DONE インライン編集できるようにする
    CLOSED: [2021-08-29 Sun 19:46]
- [X] インライン画像を消してエディタを表示する。
- [X] エディタに保存ボタンと終了ボタンをつけられるようにする。
- [X] エディタが終了したらエディタを消してインライン画像を表示する。

*** DONE エクスポート対応
    CLOSED: [2021-08-30 Mon 16:53]
*** DONE インライン画像の右クリックでメニューを出す
    CLOSED: [2021-08-30 Mon 16:53]
description部分にedrawがあるとリンクを開く操作では開けないので。
*** DONE インライン画像上のC-c C-oで編集するかどうか聞く
    CLOSED: [2021-08-30 Mon 16:54]
*** DONE バッファが閉じるときに未保存を警告する
    CLOSED: [2021-08-30 Mon 17:24]
*** DONE 編集中のedraw-org-link-image-modeの切り替えに対応する
    CLOSED: [2021-08-30 Mon 17:34]
インライン画像表示をONにするとエディタが消えてしまう。
** DONE 単体の図形ファイルを編集できるようにする(edraw-mode)
   CLOSED: [2021-08-31 Tue 12:24]
** DONE 図形の中心にテキストを配置する機能
   CLOSED: [2021-08-31 Tue 18:00]
テキストツールにおいて、 +SHIFT(CTRL?)+クリックで図形の中心にtextを置くとか？+
変数edraw-snap-text-to-shape-centerを追加。図形の中心近くをクリックしたら中心にtextを置く。
SHIFT+クリックだとedraw-snap-text-to-shape-centerの効果を反転させる。
** DONE 複数行テキストに対応する
   CLOSED: [2021-08-31 Tue 19:47]
SVGでは直接的には実現出来ないがtextの下にtspanを作れば出来なくも無い。
#+begin_src svg
<text y="100">
<tspan x="10" dy="0" class="edraw-tline">TEST1</tspan>
<tspan x="10" dy="1em" class="edraw-tline">TEST2</tspan>
<tspan x="10" dy="1em" class="edraw-tline">TEST3</tspan>
</text>
#+end_src
のように書けば複数行になる。

x=はtextに付いたものをtspanに分配しなければならない。
textプロパティエディタとのやりとりでは、プロパティ設定時は\nがあればこのようにtspanで分ける。取得時はtspanで分けられた行を\nで結合する。各tspanにはクラス名でも付けて行に対応することを記録する。tspanは他の用途(テキストの部分装飾等)にも使うかもしれないので。

svg-imageには文字列化の際に不要な空白文字を入れてしまう問題がある。それによってテキストの位置がずれることがある。

#+begin_src emacs-lisp
(insert-image
 (let ((svg (svg-create 400 300))
       (text (dom-node 'text '( (y . 100) (fill . "white") (font-size . 30) (text-anchor . "middle"))
                 (dom-node 'tspan '((x . 100) (dy . "0"))
                           "TEST1")
                 (dom-node 'tspan '((x . 100) (dy . "1em"))
                           "TEST1")
                 (dom-node 'tspan '((x . 100) (dy . "1em"))
                           "TEST1"))))
   (dom-append-child svg text)
   (svg-image svg)))
#+end_src

#+begin_src emacs-lisp
(image :type svg :data "<svg width=\"400\" height=\"300\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <text x=\"10\" y=\"100\" fill=\"white\" font-size=\"30\" text-anchor=\"middle\"> <tspan x=\"100\" dy=\"0\"> TEST1</tspan> <tspan x=\"100\" dy=\"1em\"> TEST1</tspan> <tspan x=\"100\" dy=\"1em\"> TEST1</tspan></text></svg>" :scale 1)
#+end_src

** DONE 機能追加/パスに矢印を付けられるようにする
   CLOSED: [2021-09-01 Wed 18:37]
markerを使うにしても色が問題。
context-fillが使えれば簡単にできそうだが、最新のlibrsvgじゃないとダメみたい。
- [[https://gitlab.gnome.org/GNOME/librsvg/-/issues/618][Support SVG2 context-fill and context-stroke (#618) · Issues · GNOME / librsvg · GitLab]]
- [[https://github.com/GNOME/librsvg/blob/master/NEWS][librsvg/NEWS at master · GNOME/librsvg]] (2.51.4)
なので、必要に応じてmarkerを生成する。
shapeのstrokeプロパティが変化したらmarkerを更新する必要がある。
#marker-arrow-ff0000みたいにできればいいんだけど、色指定の方法が色々あって案外面倒くさい。
pathにmarker-start, marker-endプロパティを追加する。値はnil, arrow, circle。
全部のshapeを確認して必要なマーカー定義を作成し、各shapeのIDの番号部分を更新する。
** DONE 表示改善/High DPI環境での画質を改善する
   CLOSED: [2021-09-02 Thu 11:52]
画像全体のサイズをどうするかがネック。
svg要素のwidth= height=で決まるが、これは今のところドキュメントのサイズと一致しなければならない。
image-scaleを適用すると誤差が生じるので、セーブ時に元のサイズに戻らないかもしれない。
editorに元のサイズを記録しておくしか。
現在は暫定的にcreate-imageのscaleに頼ることにしてある。
解決するならtoolbarの画像サイズも直すこと。こちらは誤差があっても問題ない。
** DONE エディタ内からオブジェクトのデフォルト値を設定できるようにする。
   CLOSED: [2021-09-02 Thu 18:12]
とりあえずお手軽に、メインメニューにShape Defaultを追加し、その下にrect、ellipse、path、textを追加。選択するとプロパティエディタが開いて設定できる。次にその形状を作ったときのプロパティがそれになる。保存する必要は無い。あくまでその時の一時的なもの。
** DONE 背景にマットや指定色を(一時的に)表示できるようにする
   CLOSED: [2021-09-03 Fri 09:15]
背景を透明にしたいときにEmacsの背景では見づらい場合があるので。
** DONE カラーピッカー・パレットを作る
   CLOSED: [2021-09-08 Wed 10:03]

[[file:screenshot/color-picker-minibuffer.png]]


[[file:screenshot/color-picker-inline.png]]

** DONE デフォルト値を変更したときにツールバーの色を更新する。
   CLOSED: [2021-09-08 Wed 10:03]
** DONE ツールバーにツールのデフォルト値を変更するボタンを追加する
   CLOSED: [2021-09-08 Wed 11:47]
クリックするとそのツールのプロパティエディタが出る。
とりあえずrect, ellipse, path, textのデフォルトの形状を編集できるようにする。
** DONE カラーピッカーで彩度が0のときに色相が選択できないのを直す
   CLOSED: [2021-09-08 Wed 17:55]
- NG (edraw-color-picker-read-color)
- OK (edraw-color-picker-insert-color)
なのでミニバッファ文字列との相互作用に問題がありそう。
(さらに色相を一番上にドラッグして離すと一番下になる問題も見つけた)
** DONE テキストのデフォルトを変更すると作成時にエラーが出るのを直す
   CLOSED: [2021-09-08 Wed 19:06]
フォントサイズが文字列化されたせいだと思う。
** DONE オブジェクトのクローンを作る機能を追加する
   CLOSED: [2021-09-08 Wed 21:25]
** DONE 選択中のオブジェクトを削除するキーを追加する(DEL)
   CLOSED: [2021-09-09 Thu 08:12]
** DONE 機能追加/メニューから数値指定で全体移動
   CLOSED: [2021-09-09 Thu 11:52]
** DONE 全てのオブジェクトをスケーリングする機能を付ける
   CLOSED: [2021-09-09 Thu 11:43]
edraw-translateのような操作で全ての点に対して行列を適用出来るようにする。
とりあえず作ったけど問題がいくつか。
- path以外(rect, ellipse, circle, text)では平行移動と拡大縮小以外の変形(回転等)はできない
- 長さを表す属性(font-sizeやstroke-width等)は変形できない(縦横均等なスケーリングまでなら行う余地はあるが、縦横の比率が異なるスケーリングなら単体の属性では表現できない)
全オブジェクトのスケーリングはあくまで全体のレイアウトを微調整したいという目的で欲しかったので、形状を変形すること自体が目的では無かった。とりあえずアンカーポイントが指定比率で動かせれば良かっただけなのでこれでも十分。
本格的な変形はtransform属性を導入して行うべきだが、それはそれで問題点は多い。例えば移動の際にtransformとx, y属性のどちらを操作すべきか分からなくなる。グループ化がないと扱いが大変だけどグループ化のUIが難しい(別ビューでツリーでも表示するか)。当たり判定は十分変形に対応可能だと思う
** DONE 背景色設定時にカラーピッカーを使う
   CLOSED: [2021-09-09 Thu 19:04]
** DONE カラーピッカー使用時にできるだけプレビューしたい
   CLOSED: [2021-09-09 Thu 19:27]
** DONE オブジェクトの名前を取得できるようにする
   CLOSED: [2021-09-10 Fri 08:39]
実はeieioではオブジェクトIDを生成してくれている。
例: #<edraw-shape-ellipse edraw-shape-ellipse-2367ee4>
eieio-object-name-stringとeieio-object-nameがあるが、前者の方が単体の名前になる。
(edraw-name shape)でedraw-shape-以降を返す。あくまで名前であって一意性は保証しない。
edraw-property-proxy-shapeはdefault rectのような名前を返す。

** DONE プロパティエディタに編集対象の名前を表示する
   CLOSED: [2021-09-10 Fri 08:39]
** DONE 選択しているオブジェクトを前後に移動するキーを追加する
   CLOSED: [2021-09-10 Fri 08:39]
** DONE プロパティエディタは選択中のオブジェクトのプロパティを常に表示する
   CLOSED: [2021-09-11 Sat 12:44]
迷う。切り替えボタンを追加するのも捨てがたい。Selected Shape, Next Shape, Previous Shape
** DONE プロパティエディタは変更をプレビューまたは即時適用する
   CLOSED: [2021-09-11 Sat 12:44]
変更の検出をどうするか。widgetの:notifyを使う？
https://www.gnu.org/software/emacs/manual/html_mono/widget.html
** DONE プロパティエディタの細かい改良をする
   CLOSED: [2021-09-11 Sat 16:21]
- [X] テキストフィールドの幅指定を無くして行末までフィールドにする。入力した文字の最後にカーソルを合わせづらいので。
- [X] 左右ドラッグで数値を変更する。
- [X] メニュー選択などで範囲選択してしまうのを抑制する。
- [X] ホイールで数値を変更する。
- [X] 対象が削除されてもプロパティエディタを閉じない。
- [X] 選択shapeの切り替えに追従する。
- [X] 入力の即時適用。
- [X] 次前を表示ボタン。
- [X] デフォルトとして設定するボタン。
- [X] カラーピッカーでプレビュー。
** DONE SVG出力を短くする
   CLOSED: [2021-09-13 Mon 18:29]
- パスデータの無駄な空白を削除する。座標のxとyの間は,で区切る。
- XML空要素タグを使う。
** DONE パスツール/path-cmdlistに順番を反転する機能を追加する
   CLOSED: [2021-09-12 Sun 19:07]
パスを結合したり先頭から伸ばしたりするときに必要になる。
** DONE パスツール/既存のパスの末尾から編集を再開できるようにする
   CLOSED: [2021-09-12 Sun 19:08]
** DONE パスツール/既存のパスの先頭から編集を再開できるようにする
   CLOSED: [2021-09-12 Sun 19:08]
パスの方向を反転するか、始点(Mコマンド)から伸ばせるようにするか。
** DONE パスツール/他のパスの端点と連結できるようにする
   CLOSED: [2021-09-13 Mon 12:35]
パスツールで伸ばしているときに、他のパスの端点をクリックしたら、その二つのパスを連結する。
** DONE パスツール/パスを任意アンカーで切断できるようにする
   CLOSED: [2021-09-14 Tue 09:50]
アンカーを右クリックで「Split Path」を選ぶ。
- M(サブパス始点)の場合
  - 閉パスの場合 : 全てのサブパスを開パスにする。closing segmentがあるならZをMに置換するだけで良い。最後のZは次にMがあるなら消して良い。closing segmentが無いならMまでの線を追加する。
  - 開パスの場合 : 不可(始端)
- LかCの場合
  - サブパス最後のアンカー
    - 閉パスの場合
      - closing segmentの場合     : 不可(Mで分割せよ)
      - closing segmentでない場合 : Zを取り除く。アンカーからMまでの線を先頭に追加する(Mがなお他のZで使われている(閉サブパスの一部)なら諦める)。
    - 開パスの場合 : 不可(終端)
  - 途中のアンカー
    - 閉パスの場合 : cmdlistを二つに分割する。Mを追加する。
                     MとZをくっつける。
    - 開パスの場合 : cmdlistを二つに分割する。Mを追加する。
** DONE ホイールの方向を逆にする
   CLOSED: [2021-09-14 Tue 16:16]
** DONE パスの向きを逆にする機能を追加する
   CLOSED: [2021-09-14 Tue 18:17]
連結機能で勝手に反転するようになってしまったので。
あまり必要ではないがとりあえず矢印の向きに関係がある。
** DONE ファイルエクスポート機能
   CLOSED: [2021-09-14 Tue 21:29]
** DONE バッファエクスポート機能
   CLOSED: [2021-09-14 Tue 21:29]
** DONE SVGツリーのデバッグ出力機能
   CLOSED: [2021-09-14 Tue 21:40]
** DONE edraw-update-imageはeditor終了後には更新をしないようにする
   CLOSED: [2021-09-15 Wed 10:50]
「終了後」がまだ定義されていないのでなんとも。
オーバーレイオブジェクトのdisplayプロパティを書き替えるだけなので、最悪特に問題は起きない。
終了時にタイマーをキャンセルするのでも良い。
→(edraw-close editor)でキャンセル
** DONE アンカーとハンドルの選択時に親をチェックする。
   CLOSED: [2021-09-15 Wed 12:19]
@todoあり。アンカーを選択したときはシェイプを、ハンドルを選択したときはアンカーをチェックする。関連するものが選択されている必要がある。選択されていなければ選択すべき。
** DONE 複数選択機能
   CLOSED: [2021-09-16 Thu 14:59]
C-downで選択追加、削除する。
影響箇所:
- edraw-selected-shape
- edraw-select-shape
- edraw-unselect-shape
- edraw-on-selected-shape-changed
- edraw-select-anchor
- edraw-unselect-anchor
- edraw-select-handle
- edraw-unselect-handle
- edraw-update-selection-ui
- edraw-svg-ui-shape-points

- edraw-translate-selected
- edraw-delete-selected
- edraw-bring-selected-to-front
- edraw-bring-selected-forward
- edraw-send-selected-backward
- edraw-send-selected-to-back
- edraw-select-next-shape
- edraw-select-previous-shape
- edraw-main-menu
- edraw-mouse-down-anchor-point
- edraw-mouse-down-shape
- edraw-on-mouse-3
- edraw-mouse-down-continue-path
** DONE 複数選択移動機能
   CLOSED: [2021-09-16 Thu 14:59]
** DONE 表示改善/パスアンカー選択時は前後のアンカーのハンドルも表示する
   CLOSED: [2021-09-16 Thu 15:00]
down-mouse時の選択(検索)にも影響するので注意。
** DONE コピー、ペースト機能
   CLOSED: [2021-09-17 Fri 18:48]
** DONE 複数選択時の選択中shapeに対する右クリックを改善する
   CLOSED: [2021-09-17 Fri 20:53]
選択オブジェクト全体に対する操作を出すべき。
** DONE 何も無いところで右クリックしたときにメニューを出す
   CLOSED: [2021-09-17 Fri 21:11]
- Paste
- ドキュメントへの操作
** DONE オーバーレイの下のテキストをread-onlyにする？
   CLOSED: [2021-09-17 Fri 22:51]
org-modeで使うとき、オーバーレイのmodification-hooksプロパティでerrorを投げて変更を阻止する。edraw-modeの方はテキストプロパティで対策済み。
** DONE コピー、カット、ペーストにキーを割り当てる
   CLOSED: [2021-09-17 Fri 23:02]
** DONE エクスポート時にATTR_HTMLが効かない問題を何とかする
   CLOSED: [2021-09-18 Sat 12:18]
imgの時は何とかするとしてsvgのときにどうするか。widthとheightはまずい。
** DONE UNDO/REDO機能
   CLOSED: [2021-09-20 Mon 13:20]
- editorにundo-listを追加する
- undo-listにundo dataを追加できるようにする
- undo dataは関数と引数のリスト
- undo dataを実行できるようにする
- 実行時に生じた(undo-listに追加された)undoデータはredo-listに入れ替える
- 複数のundo dataをまとめる機能を追加する
- 全ての変更を行う場所で、元に戻すundo data(関数と引数のリスト)を生成する
  変更する場所は edraw-on-document-changed から辿る。
  - 直接呼び出しているのはドキュメントの属性を変更する部分。
  - edraw-on-shape-changedを呼び出している部分はshapeの変更。基本的に元のプロパティ値に戻すundo dataを作る。
  - edraw-on-shape-point-changedを呼び出している部分はハンドルかアンカーに対する変更。本来はポイント毎に詳細なデータを作るべきだが、とても面倒なのでdプロパティ全体を保存する。
  - Zオーダーは現在のインデックスを調べる関数とそこに戻す関数を追加して対処する。
- 連続する変更に対するundo dataを必要に応じて一つにまとめる。ドラッグによる移動やプロパティエディタでの値調整はまとめる。
** DONE パスツールで C-u クリック で必ず点を追加する
   CLOSED: [2021-09-20 Mon 15:13]
既存の点を移動したり接続したりしない。
** DONE ATTR_HTML指定時に重複する属性を削除する
   CLOSED: [2021-09-20 Mon 17:21]
widthを指定したら本来のwidthは削除したい。
** DONE カラーピッカーでプレビュー中は変更フラグと +変更通知+ を抑制する
   CLOSED: [2021-09-21 Tue 22:19]
** DONE エクスポート時にSVG内のidを変換する
   CLOSED: [2021-09-22 Wed 21:36]
複数のSVGを一つのHTMLに埋め込むとIDが重複してしまう。
edraw-body, edraw-defsはもとよりmarkerのidが被ると他の文章の定義を参照してしまう。
** DONE 矩形で選択できるようにする
   CLOSED: [2021-09-23 Thu 15:20]
** DONE 非常に小さい図形でも選択ツールで選択できるようにする
   CLOSED: [2021-09-23 Thu 15:34]
範囲選択で実現した。
** DONE fileリンクの初回編集で終了後に画像がインライン表示されないのを直す
   CLOSED: [2021-10-07 Thu 08:20]
image-refreshで更新しても意味は無く、オーバーレイを作らなければならない。
** DONE 編集開始時に不正なリンクフォーマットはエラーにする
   CLOSED: [2021-10-07 Thu 09:24]
** DONE オブジェクト単独でのtransform属性に対応する
CLOSED: [2021-12-05 Sun 17:56]
rect, ellipse, circle, path, textに対するtransform属性に対応する。

- [X] 当たり判定に対応する
- [X] 平行移動に対応する
- [X] アンカーポイントの位置を変形させる・入力も何とかする。問題はどの段階で変換するか
  表示はedraw-update-selection-ui、入力はedraw-shape-point-findあたり？
  →edraw-get-xyやedraw-moveの変形後座標系版であるedraw-get-xy-transformedやedraw-move-on-transformedを作成する。
** DONE グループ化出来るようにする
CLOSED: [2021-12-05 Sun 20:19]
描いた物体を一つのものとして扱えるように。
- [X] edraw-shape-groupを作る。
- +子要素たちを元にAABBを計算する。それを矩形アンカーポイントとする。+
** DONE HTMLタグをリンク毎に指定できるようにする
CLOSED: [2022-03-26 Sat 22:32]
~[[edraw:html-tag=img;file=example.edraw-svg]]~ のような形式。
** DONE ATTR_HTMLが効かない不具合を修正する。
CLOSED: [2022-09-19 Mon 00:22]

#+begin_src org
,#+ATTR_HTML: :viewBox 0 0 640 480
[[edraw:.....
#+end_src

:viewBoxがそのままdom-set-attributeに渡されている。 :を取り除かなければならない。
** DONE SVGエクスポート時にviewBoxを使うようにする
CLOSED: [2022-09-19 Mon 00:48]
width="640" height="480"だけだとレスポンシブにするのが面倒。
viewBox="0 0 640 480"があれば比率を保ったまま拡大縮小するのが容易。

edraw-org-export-html-use-viewboxオプションを追加。
** DONE org-modeでLaTeXへのエクスポートに対応する。
CLOSED: [2022-09-23 Fri 01:37]
** DONE groupで指定できる属性を増やす
CLOSED: [2022-11-27 Sun 12:03]
fillやstroke系の属性を指定できるようにする。
中の図形には色を指定せず、g要素で一括指定出来ると便利。
** DONE group化を解除できるようにする
CLOSED: [2022-11-27 Sun 13:53]
transform属性で平行移動しているのをどうするか。
変換が平行移動だけならば子要素の内容を平行移動すれば良い。
それ以上の変換ならば、子要素のtransform属性にグループのtransform属性を掛け合わせる必要がある。
** DONE opacity属性を追加する。
CLOSED: [2022-11-27 Sun 14:03]
fill-opacityやstroke-opacityとは別に指定出来て良いはず。
特にgroupに対するopacityは有用。
** DONE groupをコピーできるようにする。
CLOSED: [2022-11-27 Sun 14:46]
- edraw-shape-descriptorが子孫の情報を持つようにする。
- edraw-shape-from-shape-descriptorが子孫も復元するようにする。
** DONE edraw-insertの引数順を変更する
CLOSED: [2022-11-27 Sun 17:16]
できれば(edraw-insert parent shape pos)にしたい。
ただ、parentはedraw-shape、edraw-dom-element-p、nilのいずれかなのでcl-defmethodでどう書くのか知らない。特にedraw-dom-element-pは先頭がnilではないシンボルであるリストというだけなので注意が必要。
→複数の型にマッチしたり指定の述語にマッチする関数を書く方法が分からないのでparentはそのままにした。
** DONE groupを複製できるようにする。
CLOSED: [2022-11-27 Sun 21:09]
edraw-cloneで子孫を複製する。すっかり忘れてた。
** DONE textやgroupは選択時に境界ボックスを表示する
CLOSED: [2022-11-29 Tue 12:38]
選択時に何か表示しないとgroupが分からない。
ついでにtextはアンカーポイントを表示した上で境界ボックスも表示したい。
** DONE 編集終了時にツールを非選択にする
CLOSED: [2022-12-01 Thu 17:29]
カスタムシェイプツールにおいてシェイプピッカーとの接続終了処理が実行されないので。
複数のエディタで同時に開いている場合にどうなるか。hookの数でチェックする？
** DONE 選択図形を数値入力で良いからとにかく変形したい
CLOSED: [2022-12-07 Wed 18:24]
回転できないとある種の作図が著しく困難なため。
** DONE 90度単位回転で誤差が出ないようにする
CLOSED: [2022-12-08 Thu 18:26]
90度単位回転だけは誤差が出ないようにしたい。
(= (sin pi) 0)がnilになる所を見ると現状はダメそう。
(= (cos pi) -1)はtになる所が興味深い。
いずれにせよ(360で割った余りが。負数注意)度数0、90、180、270は特別扱いすべき。
** DONE 全選択・選択解除機能を追加する
CLOSED: [2022-12-08 Thu 18:26]
** DONE カスタムシェイプ/定義済み図形を貼り付ける機能を追加する
CLOSED: [2022-12-08 Thu 21:51]
1. 定義済み図形挿入ツールを追加する。
2. ツールを開いている間は定義済み図形(プリセットシェイプ)ピッカーを表示する。
   - プロパティエディタと同じようなバッファをポップアップさせる。
   - バッファの中には定義済み図形を図形毎に画像にして並べ、通常のバッファ・ウィンドウの機能でスクロール出来るようにする。
   - 図形のサムネイル画像を生成する。
     - 図形の境界を求めてpaddingを足す。
     - 原点より左上(座標負方向)にも図形がある可能性があるので注意。
     - 大きすぎる図形は縮小して表示する。
3. 図形を選択してからキャンバス上でクリックしたらその位置に図形を追加する。
   - 単独の図形は平行移動して配置する。グループはtransformする(しかない)。
   - バラバラの図形を一度に配置できるようにする機能は要らないと思う。

改善点
- [X] ピッカー内の操作
  - [X] セーブ
  - [X] 図形の編集
  - [X] 図形の削除
  - [X] 図形のコピー/カット/ペースト
  - [X] 図形の新規追加
    - document-writerは使わない(Saveメニューが消える)
    - 何らかのプロパティでeditorに終了時コールバックを持たせる
    - finishまたはcancel時にコールバックを呼び出す。(edraw-document-svg editor)の結果を引き渡す
    - 空図形チェックが必要
  - [X] 図形の前後位置移動
- [X] UNDO
- [X] 右クリックメニュー
- [X] 文字列SVGに対応する(文字列で複数図形に対応するならgでまとめてばらすしかない)
- +shape-descriptor-listに対応する+
  +(edraw.elに依存しなければならないので迷うところ。正直SVG文字列だけで十分。変換関数にautoloadを通すくらいか？)+
  懸念していたmarkerもSVG文字列で問題なく動くので必要が無くなった。とりあえず保留。
- [X] エディタでコピーしてshape-pickerにペースト
- +選択図形をカスタムシェイプに追加+ shape-pickerでペーストできるのでいいや。右クリックメニューにあまり使わない項目が増えるのも嫌だし。
- [X] エントリーリストのファイルへの保存・読み込み
- [X] shape-descriptorからSVG表記に変換する機能を増やす
- [X] 正確に閉じる(複数のエディタから開いたときにフックへの登録数を見て閉じるか決める)
- [X] buffer-read-onlyではなくテキストプロパティread-only(とfront-sticky, rear-sticky?)を使用して禁止した方が分かりやすい。
- [X] 自動保存の問題に対処する。hexl-modeでの情報を収集する最悪自動保存は禁止。
- [X] セクションの追加
- +layoutの追加+ UI化しなくてもいいかな。
- +サムネイルレイアウト指定の変更+
- [X] プロパティ設定
- [X] 別ファイルのインポート
- [X] セクションを別ファイルへエクスポート
- [X] 初期化
- [X] リージョン対応
     (C-w, M-wだけリージョン対応にする。wやWはそのまま。コンテナを跨ぐときにどうするか。リージョンに完全に含まれる部分木だけを対象として抽出する。子孫がリージョンからはみ出すセクションやレイアウトは例え見出しがリージョンの中に入っていても対象にしない。子孫の完全にリージョンに含まれる部分だけを個別に抽出してコピー・カット対象とする)
- [X] ルートの見出しで挿入できない

以下は積み残し。別途TODOにする。
- [ ] ドラッグ・アンド・ドロップ
     (マウスで選択範囲を別のセクションへ?)
     いや、マウスドラッグでの選択範囲は諦めて、Shift+クリックか？
     単純な順番の入れ替えもしたい。
- [ ] 貼り付け時の属性調整指定(fill系やstroke系をデフォルトのものにするための指定)
- [ ] 貼り付け時のデフォルト変形指定(任意の点を原点にしたり、拡大縮小したりできるようにする。エディタがルーペに対応すれば不要だけど)
- [ ] 貼り付け時のユーザーによる縮尺指定
- [ ] 貼り付け時にクリックでそのまま貼り付け、ドラッグで大きさ指定
** DONE カスタムシェイプ/shape pickerでセクションの見出しを色づけする
CLOSED: [2022-12-09 Fri 18:41]
- 見た目を水平バーにする。
- マウスカーソルを +hand+ arrowにする。
- +折りたたみできるようにする。outline-minor-modeを使う。見出しのクリックで折りたたみを切り替える。+ 今回のケースではoutline-minor-modeでは正しく折りたためない！　sectionの末尾とshapeとの間に何も目印が無いので。
** DONE カスタムシェイプ/shape pickerでセクションの兄妹移動できるようにする
CLOSED: [2022-12-09 Fri 20:23]
entry-backwardとentry-forwardだとかなり特殊な移動になってしまう。
M-up、M-downで移動できた方が良い。
** DONE カスタムシェイプ/shape pickerでセクションの見出しを折りたたむ
CLOSED: [2022-12-09 Fri 23:03]
今回のケースではoutline-minor-modeでは正しく折りたためない！　sectionの末尾とshapeとの間に何も目印が無いので。
やるならエントリーツリーを見てちゃんとやらないとダメ。
** DONE ドキュメント全体の回転機能を追加する
CLOSED: [2022-12-10 Sat 00:04]
+特に90度単位の回転は矢印シェイプを作っているときに欲しくなった。+
全選択と選択図形の回転をサポートしたので不要だが、一応ドキュメントの回転・拡縮も追加したい。選択図形と同じように dtt dts dtr で変形できると良い。
反転は-1倍すれば良い。
** DONE パスを拡大縮小回転できるようにする(図形内容の変形)
CLOSED: [2022-12-10 Sat 00:05]
矩形や楕円、テキストはtransformを使わないと出来ないけど、パスだけは元データのレベルで変形できる。
↑一応出来るようにはなっている。出来ない要素も回転できてしまうけど。
** DONE 変形時にデフォルトの原点を図形の中心にする・その他変形入力改善
CLOSED: [2022-12-10 Sat 02:23]
ついでにleft, right, top, bottom, centerと入力できるようにする。
プロンプト:
- Origin X(left=100.0, center=150.0(default), right=200.0):
- Origin Y(top=100.0, center=150.0(default), bottom=200.0):
ドキュメント全体、選択図形、図形単体で対処する。
変形不要時(angle=0, scale=1)は即時終了。
対象図形無しは即時終了。
** CANCELLED カスタムシェイプ/～file-mode-exitでエディタとの接続が切れてしまう
CLOSED: [2022-12-11 Sun 00:20]
再びedraw-shape-picker-file-modeにして選択した後に配置しようとしても以前選択した図形が配置されてびっくりしてしまう。
+やはりカスタムシェイプツールはクリックのたびにバッファから選択図形を取得すべき。+
+メジャーモードを変えてもバッファオブジェクト自体は変わっていないので。+
閉じてfind-fileで開いてモードを有効にしたときは、知らないｗ

バッファが死んでいるとき(buffer-live-pがnilを返したとき)はどうするか。
+再び開く。+

基本的に、ユーザーが閉じた物を配置のたびにいちいち開くべきではない。ユーザーはshape pickerが邪魔なので閉じたのかもしれない。閉じた状態で選択した図形を次々に配置したいのかもしれない。しつこく開くべきではない。

現在選択中の図形はあくまでエディタ側が持っているべき。接続していないpickerで何を選択しようとエディタ側は関知しない。必要なら再度ツールを起動して接続すれば良い。
** DONE カスタムシェイプ/ドラッグで大きさを指定して貼付できるようにする
CLOSED: [2022-12-12 Mon 10:45]
クリックしたらデフォルト貼り付け。ドラッグでその範囲に内接するように貼り付け。shape-picker側に基準範囲指定プロパティが必要かも。
:shape-ref-box ((l . t) . (r . b))
:ref-box ((l . t) . (r . b))
指定が無ければ境界矩形で代用するしか無いけど。
** DONE カスタムシェイプ/貼り付け時にfillやstrokeを調整する
CLOSED: [2022-12-12 Mon 14:50]
あらかじめ指定した色で貼り付けたい。

図形定義中のfillやstroke等の属性を上書きする。

一部の図形は属性を上書きして欲しくない。カラーのクリップアートなど。
保持対象属性を
:shape-keep-properties (fill stroke stroke-width) みたいに指定する？
:shape-keep-properties t でいいのでは？
shape-picker-entryのプロパティ値にnilは使いづらいので'all 'noneあたりか。

保持対象ではない属性はエディタのデフォルト値で上書きする。
+どのデフォルト値で上書きすべきか。path、rect、ellipse、text、それぞれのデフォルト値で上書きするしかないのではないか。それぞれのデフォルト値を指定してから図形を配置するのは面倒すぎる。図形は基本的にpathだけで作成すべき。それ以外は全て属性保持対象扱いでも良いのではないか。この機能を使いたい図形は全てpathかgroupだけで作成すること。+
暫定的にpathのデフォルト値を全ての図形に適用する。おそらくツール毎にデフォルト値を持つべき。
** DONE カスタムシェイプ/選択がクリアされて使いづらいのを何とかする
CLOSED: [2022-12-12 Mon 20:28]
ピッカーでqを押して閉じたとき、ピッカーの選択状態は失われる。ただし、ツールの方は失われない。

カスタムシェイプツールを再選択して再びピッカーを出したとき、以前の選択状態はツール、ピッカー共に失われている。ツールはいったん非選択状態になってツールオブジェクトが破棄されてから新しいツールオブジェクトが生成・選択されるので。

本来的には、ツールがエディタやその外に共通な情報を保存する場所が必要となる。

その他の論点:
- ピッカーのqでバッファをkillすべきか
  (邪魔なのでkillしたいが、選択状態をできるだけ維持するには残して置いた方が多少有利)
- ピッカーを再び開いたときに以前の選択状態を復元しようと試みるべきか
  (出来るなら上の問題はどうでも良くなる。ただ、やり方が難しい。ルートからインデックス番号を辿って結果が同じ図形ならそれを選択するくらいか)
  (やるなら、無選択状態の時のみ起動したツールの選択図形を選ぶようにすべき。既に選択中のピッカーと接続したときはピッカーを優先すべき)
- クリック時(配置時)にピッカーから選択状態を取得し直すか
  (プロパティを変更した後だったりするので取得し直すのが望ましい)

別な方法。ピッカー側に選択状態を維持する仕組みを追加する。少なくともEmacs起動中は維持。グローバル変数にファイル名と選択状態を持たせる。
↑この方法で実装。
** DONE エディタの上では基本的に全てのself-insert-commandは禁止すべき
CLOSED: [2022-12-12 Mon 21:39]
このキーだったかな？　違った、という時に文字を挿入してしまうので。
** DONE コピー、ペーストのキーを変更する
CLOSED: [2022-12-12 Mon 21:39]
普通に[remap kill-ring-save]や[remap kill-region]、[remap yank]で良いのでは？
久しぶりに使ったらC-c C-x M-wとか全然分からなかった。
C-/とかもよく間違えるのでundoにしたいが……。
** DONE 選択オブジェクトに対する操作をメインメニューにも追加する
CLOSED: [2022-12-12 Mon 21:44]
少なくともグループ化が登録されていない。
他にもあるかも。
** DONE スクロール・ズーム機能(一時的な拡大、縮小、スクロール)
CLOSED: [2022-12-14 Wed 15:01]
C-wheelを使うべき。C-ドラッグでスクロール? ツールで使っている？ 中ボタン？

- まず、root transformをviewBoxを使うように修正すべき。基本的に高解像度用のスケーリングなので、全ての部分に一様に適用したい。グリットの線等も太くなった方が良い。
  viewBoxはちゃんと元に戻さないとダメ？　そもそもこれまであるとちゃんと編集できなかったのでは？
  高解像度モニターでしっかりチェックが必要。
- root transformが居なくなったら、view-transformという仕組みを追加する。
  - g#edraw-bodyはtransform属性で変形する。
  - それ以外のUIは座標だけ変形する。グリッドの線等が太くなってはダメなので。
  - 当然マウス入力も調整する。
- キーで拡大、縮小できるようにする。次にマウスホイールでできるようにする。
- キーでスクロール出来るようにする。マウスでスクロールを試す。
- 座標軸を表示する。
- エディタ画像全体の最大サイズを決める仕組みも必要かもね。
** DONE カラーピッカーでnoneを選べるようにする
CLOSED: [2022-12-15 Thu 02:12]
いちいちキーで打たなければならないのは地味に面倒くさい。
斜線が入ったボタンをキャンセルの下あたりにでも表示したい。
パレットの端っこでも良いが、パレットは案外目立たないのでどうか。
** DONE viewBoxを変更できるようにする
CLOSED: [2022-12-15 Thu 18:37]
もちろん編集には何も影響しなくて良い。あくまで編集後のSVGのviewBoxの値(文字列)を直接指定できれば十分。強いて言えば、デフォルトのスクロール・ズーム位置に影響しても良いが、viewBoxに指定できる全てのパターンに対応するのは大変かもしれないので別に必要ない。
エクスポート時にviewBoxをいじっていたような気がするので要確認。
** DONE image要素に対応できる？
CLOSED: [2022-12-15 Thu 23:03]
+少し試した限りimage要素は表示できない。+ +Emacs 26.3(Windows公式ビルド)はできた。Emacs 27以降はなぜか出来ない(Windows公式ビルド)。Emacs 28でbase uriを指定するプロパティが入るのでより使いやすくなるが、どうなるか。+ 解決方法判明。emacs-27.2-x86_64.zipを展開してできるディレクトリの下のbin/gdk-pixbuf-query-loaders.exe --update-cacheを実行するとlib/gdk-pixbuf-2.0/2.10.0/loaders.cacheというファイルが出来る。そうすると表示されるようになる。librsvgが画像を読み込む際にgdk-pixbufを使っているみたい。

- [X] edraw-shape-imageクラス作成
  基本的にrectみたいなもの。
- [X] edraw-editor-tool-imageクラス作成
  クリックまたはドラッグで位置または範囲を指定する。
  ファイル名を読み込む。
  位置だけを指定した場合は画像のサイズで範囲を確定させる。
  image要素を追加する。
- [X] アイコンとツールリストの変更
- [X] edraw-svg-dom.el内にimage要素のコードを足す。ほとんどはrectと同じだと思う。
  - hrefがある
  - fillとかstrokeとかは効かないので削除する
  - preserveAspectRatio属性が欲しい
- [X] クリックでも配置
- [X] ファイル名を入力する
** DONE ズームインしたときに座標の判定が大きすぎる問題を修正する
CLOSED: [2022-12-16 Fri 13:49]
imageツールアイコンを描いている時にうまくアンカーポイントが選択出来なくて難儀した。
おそらく拡大してもドキュメントの座標系で許容ピクセル数が計測されている。
↑それだけでは無く、マウスの座標がピクセル単位でスナップ(整数座標に限定)されている所も問題だった。両方に対処した。現状でも物体検索はedraw-mouse-event-to-xy、図形座標に関わるところはedraw-mouse-event-to-xy-snappedが使われている。-to-xyはto-xy-rawと名前を変えて、整数に限定されない生の座標を返すようにした。ピクセル単位のスナップはedraw-snap-xyで行うようにした。ポイントの反応半径(edraw-anchor-point-input-radiusとedraw-handle-point-input-radius)は拡大率で割るようにした。
** DONE ズーム時(に限らず?)にエディタを大きくする
CLOSED: [2022-12-16 Fri 17:46]
編集時の画像のサイズを元の大きさよりも大きくした方が良い。
100x100程度の小さなSVGを編集したいとき、どんなにズームイン出来ても編集する領域が小さいので使いづらい。

[[edraw:data=H4sIAMCjmWMAA3VPQQ6CMBD8SrNeka5ICBjKC/AD3tCWtgFbUqrV39sgGi8edrKTyczs1vNdkqC5Vwx2iECU0FL5ldyFm7U1kaU7II/raGYGyvvpQGkIIQ371DpJM0SkMQia2omL/5/3YBDxuWCvx5HBpu97ILN3dhAMjDUCiOYMBHdd2J67yyCdvRkOhDa1/JUsf8a+qfPqa99UVfUJ265H5J+md3b0HzNMcmxzTDJsS0wKbAtMSmyzZV/U09JHZZz4V/MCx2/D5CYBAAA=]]

やるなら[[elisp-function:edraw-scroll-view-screen-width][edraw-scroll-view-screen-width]]や[[elisp-function:edraw-scroll-view-screen-width][edraw-scroll-view-screen-width]]が大きな値を返せば良い。[[elisp-function:edraw-update-root-transform][edraw-update-root-transform]]等各所はすでにこの関数を使うようになっている。

ただ、最大サイズを制限する必要がある。 +例によってフレームの大きさから自動的に最大サイズを算出すべきか。その場合、元々大きな画像は縮小するべきなのか。+ 設定で自動で大きくする最大サイズを指定出来るようにした。デフォルトは(560 . 420)

サイズを手動で指定出来るような機能があっても良い。

+設定でデフォルトの大きさを指定出来ても良い。+ 設定で自動で大きくする最大サイズを指定出来るようにした。

適当にview-screenなんて付けちゃったけど、本当は何と呼べば良いんだろう。このサイズは自動スケーリングを適用する前のサイズ。編集領域？　単にビューで良いんじゃないかと。強いて言うなら編集用ビュー。

自動ビューサイズ変更設定が欲しい。拡大したときに自動的にビューも大きくする。縮小時には小さく *しない* 。大きくするのはあらかじめ設定されている大きさまで。

ビューサイズを直接指定するコマンドが欲しい。これは自動ビューサイズ変更を無効化する。
** DONE 矩形や楕円をパスに変換できるようにする
CLOSED: [2022-12-16 Fri 23:33]
** CANCELLED カスタムシェイプ/shape pickerで変形を指定出来るようにする
CLOSED: [2022-12-16 Fri 23:13]
任意の点を原点にしたり拡大縮小できるようにする。
*エディタがルーペに対応すれば不要だけど。*
shapeエントリーに次のプロパティを追加する。
- :origin-x
- :origin-y
- :scale
sectionやlayoutでは次のようにする。
- :shape-origin-x (:thumbnail-ではない)
- :shape-origin-y
- :shape-scale
カスタムシェイプツールでは貼り付け前のどこかでその変形を適用する。
やろうと思えばshape picker側で変形することも可能か？ edraw-dom-svg.el内の関数を使えば。

[2022-12-16 Fri 23:13]ズーム・スクロール機能を実装したので不要とする。こういった仕組みで過度に複雑になるのもどうかと思うので。
** DONE グリッドを数ピクセルにしたときに座標がずれているのを直す
CLOSED: [2022-12-17 Sat 01:46]
極端な話1ピクセルにしたときに位置が1ピクセルずれている。
2～3ピクセルくらいにしても、明らかにグリッドの間より前で次の座標にグリッドに飛んでします。
何か計算がおかしいはず。
ついでに小数点以下の間隔に対応したい。

グリッド非表示の時は問題ない。
原因:
- edraw-grid-round関数で整数除算(/2)による誤差
- edraw-snap-xyでグリッド表示時でもroundしていることによる誤差
** DONE グリッド表示が細かくなりすぎないようにする
CLOSED: [2022-12-17 Sat 02:09]
ズームアウトしていったときに一定よりも表示が細かくならないように適度に間引く。
スケールした間隔が8ピクセル未満なら、整数倍して8ピクセルを越える間隔で描画する。
** DONE 数値の.0を省略する
CLOSED: [2022-12-19 Mon 00:06]
出力したSVGの中の数値に意味の無い.0が付かないようにする。
結構根深い問題。

まずedraw-util.elに(edraw-to-string ((n number)))を追加する。floatが整数なら.0を省く。
formatで数値を文字列化しているところを全てこれで置き換える。
** CANCELLED edraw-shape-textのアンカーポイントの座標を属性とは別に保持する？
CLOSED: [2022-12-19 Mon 00:10]
(属性値の完全文字列化は取りやめ逆に数値型の維持を推進したので、以下は不要)

rectやellipseとは違いtextはアンカーポイントの座標を属性値とは別に保持しない。
これには属性値と別途保持した値との同期が不要になり一貫性を保ちやすいというメリットがある。また、以前はDOMツリー内で属性値を数値で持つことが出来たのでどこで保持しようが誤差に変わりは無かった。

属性値は必ず文字列で持つように変更したので、数値型で持つよりも変形等の編集時に誤差が生じやすくなってしまった。

- ~(/ 2 3.0)~ = 0.666666666667
- ~(* (/ 2 3.0) 100)~ = 66.66666666666666
- ~(* (string-to-number "0.666666666667") 100)~ = 66.6666666667

ちなみにstroke-width等の属性値は元から属性値のみが使われている。

問題は同じ座標値なのに他の形状と差が生じても良いのかどうか。同じ量だけ変形しても結果が図形によってわずかに変わってしまう。ただ、それを言ったらwidthやheightも似たような問題がありそうではある。あちらは文字列化では無く、右下座標や中心座標との変換で誤差が生じる。

また、undoが絡むと状況はより面倒になる。undoはプロパティを保存・復元するので、undoすると文字列でバックアップした値を再設定することになるので厳密には同じ値に戻らない。これはpathのd=にも当てはまる。それを言い出したら、セーブしてロードしたら厳密には元に戻らない。

一貫性のある挙動を保証するなら、変形のたびに文字列化すべきだろう。誤差の大きさも一貫して数値よりも悪くなるが、図形毎の差は小さくなる。

それより、現状を推し進めて積極的に数値型で属性値を持ち続ける方が良いのではないか。
** DONE shapeプロパティ(DOMツリー内の属性)における数値型を極力維持する
CLOSED: [2022-12-19 Mon 00:12]

プロパティ値の取得・設定は文字列型への変換を含んでいるが、数値誤差の改善のためこれを取りやめる。数値で設定した物は出来る限り数値のままの状態を維持する。

edraw-shape-textはx=やy=をキャッシュしていないので、他の形状よりも誤差が生じやすくなっていた(他の形状は座標値をアンカーポイントオブジェクトにキャッシュしている)。

edraw-svg-element-get-propertyやedraw-svg-element-set-propertyは文字列型への変換を含んでいるが、これを取りやめる。デフォルトプロパティまわりにも文字列化をしている所がある。

dom-set-attributeの代わりにedraw-svg-set-attr-stringやedraw-svg-set-attr-numberを使用することでどちらの型で属性値を設定するのかを明確にする。

edraw-get-propertyは数値型か文字列型かどちらが返ってくるか分からないので、edraw-svg-length-string-to-numberを使用して数値型を取得するべき。直接dom-attrで取得しているところも注意が必要。

これに合わせてプロパティエディタも修正した方が良い。edraw-get-property-info-listが返す情報をもっと充実させ、プロパティエディタがプロパティ値の型を正確に変換できるようにすべき。:to-string, :from-string, :to-numberのような変換関数をプロパティ情報で提供しても良い。
** DONE プロパティエディタ/編集終了時にプロパティエディタを閉じる
CLOSED: [2022-12-19 Mon 01:59]
複数のエディタで同時に開いている場合にどうなるか。
↑気にせず閉じよう。また開けば良い。何かデータを持っているわけでも無いし。
** DONE プロパティエディタ/プロパティエディタを中クリックで閉じる
CLOSED: [2022-12-19 Mon 03:00]
** DONE rectやellipseでwidthやheightに誤差が生じる問題を何とかする
CLOSED: [2022-12-19 Mon 05:40]
edraw-shape-rectはx=, y=, width=, height=へのset-propertiesをオーバーライドしてアンカーポイント座標の変更に置き換えているので、これらのプロパティ値がset-propertiesでの設定値とはわずかに変わってしまう問題がある。

例えばx=360のときにwidth=100.01を設定したとする。右のアンカーポイントの座標が ~(+ 360 100.01) => 460.01~ に設定されるが、360を引いてwidthに戻したときに ~(- (+ 360 100.01) 360) => 100.00999999999999~ となり元の100.01に戻らない。これはellipseやcircleのような中心・半径モデルでも同様。一般的に浮動小数点数の加減算は誤差が生じうるので。

widthやheightの値を確実に保持することでアンカーポイントがドラッグされるまでは直接指定された値を維持するようにすることは可能。

従来の流れ: set-properties → set-rectでアンカーポイントの座標を変更 → edraw-on-anchor-position-changedで属性を変更

これからの流れ: set-properties → set-rect-ltwhでアンカーポイントの座標を変更 → edraw-on-anchor-position-changed-ltwhで属性を変更

set-propertiesで指定されたx=, y=, width=, height=を確実に属性変更の場所まで伝える。これによって確実に指定値(といっても数値型に変換する。加減算の誤差は無い)と同じ値が属性にセットされる。

set-propertiesでの変化判定も現在の属性値に基づいて行う。わざわざ現在のアンカーポイントの座標からx=, y=, width=, height=を求める必要は無い。現在の属性値はUNDOデータに格納されるくらいなので、現在の正しい値を示している。
** DONE プロパティエディタでwidget値を更新しない条件を追加する(同一数値)
CLOSED: [2022-12-19 Mon 07:20]
現在はwidget値文字列が同一かどうかで判定している。これだと100、100.、100.0が全て別と判定されてしまう。200.00001の末尾の1を消したときに一気に200にまで変わってしまう。200.0000と200は同一視してwidgetを更新しないべき。

1e-8くらいの非常に小さい差も無視した方が良いかもしれないが、そのような状況があるのか不明。入力した数字を数値化してまた戻して再度数値化したときに、二つの数値が異なる場合があるかどうか。 ~(str-to-num input-str)~ と ~(str-to-num (num-to-str (str-to-num input-str)))~ が一致しないケース。おそらく無いと思うけど……｡
** DONE Image要素の右クリックメニューからSet FillとSet Strokeを消す
CLOSED: [2022-12-19 Mon 18:21]
Setが空になってしまうので代わりにSet Hrefを追加する。
** DONE textの文字列や属性値の文字列をエスケープ処理する
CLOSED: [2022-12-19 Mon 19:52]
edraw-svg-printにtodoあり。
例えばstyleプロパティに次のように書けてしまう。
: " /><rect x="20" y="20" width="100" height="100" fill="red
text要素でも同じ問題がある。
** DONE rectやellipseの辺の中心にあるアンカーポイントの位置ずれを直す
CLOSED: [2022-12-20 Tue 01:09]
整数に丸められているので、ズームすると中心がずれているのが気になる。
** DONE edrawリンクから中身の図形をコピーする機能を追加する           :ORG:
CLOSED: [2022-12-20 Tue 09:48]
リンクの上でコマンドを実行したらクリップボードにコピーされて他のedraw-editorでペーストできると部品の切り貼りが捗る。カスタムシェイプ機能でも良いが、org文書自体がシェイプカタログになるというのも面白い。

edraw-org-shape-picker-modeなんてものがあると面白い。org文書がshape-pickerとして機能する。
** DONE edrawリンクのfile-data形式を相互に変換できるようにする        :ORG:
CLOSED: [2022-12-20 Tue 09:48]
+editorに変換するメニュー項目があっても良いし+ 、edrawリンクの右クリックメニューにあっても良い。
** DONE edrawリンクのメニューにSVGエクスポートを追加する              :ORG:
CLOSED: [2022-12-20 Tue 09:49]
リンクを右クリックして出るEdraw Link Menuに、中身のSVGを表示する機能を追加する。
エディタの d e b 相当。ファイルリンク時も一応表示する。
専用のバッファに表示してファイルへ保存したければ自分でしてもらう。
** DONE .edraw.svgファイルに対するfileリンクを編集できるようにする    :ORG:
CLOSED: [2022-12-20 Tue 20:33]
通常のfileリンクを直接編集できるようにする。
: [[file:somefile.edraw.svg] ]
edraw-org-edit-regular-file-linkを追加した。
** DONE transform属性があるrect要素等をpathへ変換すると起きる問題を修正する
CLOSED: [2023-03-10 Fri 18:08]
transform属性は残ったままtransformが適用されたpathへ変換されるので、二重に変形された結果になってしまう。
** DONE 変形の意味を整理する
CLOSED: [2023-03-12 Sun 15:50]
現在(edraw-transform shape matrix)は別々の方式が混在している。
- グループはtransform属性を変更する。
- それ以外は座標、長さ値を変更する。
どちらにも有用性があるのがやっかい。
基本的には後者は全ての図形が正しく変形できない。rectやellipseは軸に沿った形状しか表現できず、それ以外はtransform属性を使用する必要がある。線の太さといったものをどうするかも問題。

→次のようにする:

- edraw-transformはオブジェクト自身が決める方式で変形する。
  - rect, ellipse, circle, imageは回転成分を含むときtransformプロパティを使う。
  - textはスケーリングまたは回転成分を含むときtransformプロパティを使う。
  - いずれの場合もすでにtransformプロパティがある場合はtransformプロパティを使う。
  - それ以外の場合(path、平行移動のみ等)はアンカーポイント座標を使う。
- edraw-transform-anchor-pointsは座標に行列をかけて変形する。
- edraw-transform-prop-multiplyはtransformプロパティを変更する。
** DONE transform属性をアンカーポイント座標に適用出来るようにする
CLOSED: [2023-03-12 Sun 21:02]
transform属性をアンカーポイント座標に適用してtransform属性を削除する。
もちろん線の太さなどはtransform属性の拡大の影響を受けなくなる。

- edraw.el
  - edraw-apply-transform-prop-to-anchor-points
  - edraw-transform-anchor-points
  - edraw-transform-anchor-points-local
** DONE シェイプピッカー/折りたたんでいるところが見えてしまうのを修正する
CLOSED: [2023-03-13 Mon 14:17]
上にスクロールすると折りたたんでいるところが見えてしまう。
outline-modeやorg-modeのように不可視領域の始点は行末じゃないとダメ？

隠す範囲にdisplayプロパティ(文字列だろうと画像だろうと)があると、そこがinvisible(overlayだろうとtext propertyだろうと)にも関わらず表示されてしまう事がある模様。
おそらくEmacsのバグではないか。
隠すためのオーバーレイにdisplay ""を指定することで回避できた。
** DONE グループをアンカーポイントのドラッグで変形できるようにする
CLOSED: [2023-03-17 Fri 09:56]
選択時、角や辺にアンカーポイントを表示する。
内部の範囲を境界矩形にして操作できるようにする。
回転した場合でもローカルな軸に沿って変形する(rect等と同じような挙動で良い)。

懸念:
- ローカルなAABBで変形すべきか否か => カスタムシェイプにグループ化した図形(ラベルなど)を入れて、それを変形することを目的にしている。なのでローカルなAABBで変形した方が直感的。回転してからも、元の図形の軸に沿ったスケーリングがしたい。
- どの方式で変形すべきか => ラベルで使うことを考えると線が太くならないようにしたい。極力アンカーポイントの変形で済ませたい。ただ、図形によっては線の太さも含めて変形したい場合もあるかもしれない。オプションで変更できても良い。
- 幅や高さが0になったらどうするか => 元々幅高さが0の場合はその軸方向に拡大するのは不可能。ドラッグ中に0になるとそれ以降変形できなくなるので、マウス移動時は直前の変形を元に戻してから(UNDOしてから)再変形すべき。
- ドラッグ中に誤差が累積しないか => UNDOしてから再変形することで回避。
- 左右上下反転時に何が起こるか => edraw-shape-with-rect-boundaryは反転を考慮していないので特別な手当て(オーバーライド)が必要。AABBは左右上下反転を表現できないので、元のp0p1からの変化を見る必要がある。
- 特別な仕組みが必要か => とりあえずedraw-shape-with-rect-boundaryで対処可能。

工程:

1. edraw-shape-with-rect-boundaryを継承する。(必然的にローカル座標系での変形になる。edraw-shape-with-rect-boundaryはrect等transformプロパティの影響を除いた矩形を制御するための物なので)
2. (edraw-get-rect group)を実装する。アンカーポイントを配置する基準となる矩形を求める。edraw-shape-aabb-localを作成してそれを呼び出す。
3. (edraw-on-anchor-position-changed group old-p0p1)を実装する。アンカーポイントが変化したときの処理を書く。p0p1の変化を変形行列にしてedraw-transform-localを呼び出す。edraw-transform-localは子孫のedraw-transformを呼び出す。元の幅や高さが0のときはその軸方向には移動できないようにし、スケールも1にする(ゼロ除算も回避)。
4. 図形の変化を祖先要素に伝搬する仕組みが必要。edraw-on-shape-changedで祖先要素のedraw-on-descendant-changedを呼び出す。
5. グループの子孫の内容が変化したときの処理を書く。UNDO等で子孫の内容がグループオブジェクトの介在無しに変化することがある。グループの子孫が変化したら、edraw-set-p0p1-without-notifyでアンカーポイントの位置を更新する。グループ自体も変化イベントを発生させる(選択UIを更新するため)。
6. (edraw-set-p0p1-without-notify group l t r b)を上書きする。デフォルトの実装だと左右上下反転したときに正しく動作しないので。
7. アンカーポイントの移動処理において、UNDOを使用する。edraw-mouse-down-anchor-pointを修正する。移動の繰り返しでは幅高さが0になったときにそれ以上変形できなくなってしまう。誤差も累積する。マウスを動かすたびにUNDOしてから再度移動すべき。
8. 選択中、ローカルな軸に沿った境界線を表示する。

本質的にグループが角や辺のアンカーポイントを持っているわけでは無いので、edraw-groupがアンカーポイントを持つ実装はあまり良くないのかもしれない。複数図形を選択してその全体を変形するような操作を実装する場合は、アンカーポイントとは別の仕組みが必要になる(マニピュレータ)。本来はその仕組みを使うべきかもしれない。とは言え、比較的簡単に(大がかりな仕組みを追加せずに)実装できたのでとりあえずこれで。
** DONE edraw-get-rectをedraw-get-rect-localへ改名する
CLOSED: [2023-03-17 Fri 10:32]
edraw-shape-with-rect-boundaryが持つedraw-get-rect関数はローカル座標系での矩形を返すので。
edraw-shape-aabb-localと意味が被っているような気もしなくはないが、あくまでedraw-shape-with-rect-boundaryが必要とするアンカーポイントを決めるための矩形を返すという位置づけ。そういう意味で言えばもっと名前を変えるべきかもしれないが、それはとりあえず置いておく。最低限ローカルであることは示す。
** DONE 変形方式設定を追加する
CLOSED: [2023-03-17 Fri 17:40]
transform-method
- auto : Auto
- transform-property : "transform" Property
- anchor-points : Anchor Points

edraw-transformはそれに従う。
groupに対するedraw-transformは子孫に対する個別のtransformにする。

次の問題は他のTODOにする。
- local or not?
- edraw-translateはどうすべきだろう。

正直この方法が適切なのかはよく分からない。コマンド毎のオプションにすべきのような気もする。

切り替えメニューの位置もあちこちに分散させて良い物かよく分からない。
** DONE edraw-translateも変形方式設定に従うようにする
CLOSED: [2023-03-17 Fri 21:41]
図形のドラッグ時にedraw-push-undo-translateを使う方法は止めて、アンカーのドラッグでやったように移動のたびにUNDOする方式にする。

edraw-translateはedraw-transformで処理するように変更する。
** DONE UI要素の更新を遅延する
CLOSED: [2023-03-17 Fri 23:49]
UI要素の更新はedraw-update-imageの直前に一回やれば済むはず。
UNDO等で一度に大量の変更が発生したときに連続して edraw-on-selected-shape-changed → edraw-update-selection-ui が呼ばれてしまう場合がある。

edraw-update-all-ui-svg では次の関数を呼んでいる。
- edraw-update-root-transform
- edraw-update-scroll-transform
- edraw-update-transparent-bg
- edraw-update-grid
- edraw-update-selection-ui
それぞれを個別にInvalidateできるようにしてはどうか。
** DONE パスのアンカーポイントを移動できなくなったのを直す
CLOSED: [2023-03-18 Sat 15:17]
ドラッグによるアンカーポイントの移動時にUNDOするようにしたのが原因。
UNDOするとパスのアンカーポイントオブジェクトは無効になってしまう。
UNDOするとdプロパティ全体を復元するので。
dプロパティ全体を戻すのでは無く、「先頭から何番目のアンカーポイントの位置を何へ移動する」というようなUNDO情報を作れば回避できると思う。
ついでにハンドルも直す。ハンドルの場合は反対側のハンドルも一緒に動くことがあるので注意が必要。
** DONE textに対するコンテキストメニューにSet→Font Sizeを追加する
CLOSED: [2023-03-18 Sat 20:58]
** DONE ラベルのカスタムシェイプを追加する
CLOSED: [2023-03-18 Sat 21:50]
右下が折り曲げられているようなラベルの形状を追加する。
グループ化された物を登録する。
色や線幅はグループのプロパティで変更できるようにする。

二重線のラベルも追加する。
** DONE グループのアンカーポイントをドラッグして0サイズにするとエラー
CLOSED: [2023-03-18 Sat 22:43]
ドラッグして幅高さを共に0にすると何かエラーが出る。
: Error running timer ‘edraw-update-image-on-timer’: (wrong-type-argument number-or-marker-p nil) [18 times]
edraw-update-image-on-timerということはUI要素から出てる？　でもimage要素の場合は出ないみたい。

アンカーポイント座標がnilになってしまっている。
edraw-shape-aabb-localがnilを返している。
pathをsegment listへ変換する部分で、長さ0のセグメントを破棄してしまっている。
長さ0のセグメントを破棄しないdefvarを追加した。
どのみちaabbがnilになることはあり得るので(グループ内に何も無くなったときなど)、その時は(0,0,0,0)として処理することにする。
** DONE group化を解除するときに変形属性を適用出来るようにする
CLOSED: [2023-03-19 Sun 11:09]
適用するかy/nで聞いてyなら適用してからグループ化を解除する。
(fill系やstroke系の属性は適用しなくて良いのか)←うーん切りがないので止めておく。
** DONE テキストの文字列を空に出来ない問題を修正する
CLOSED: [2023-03-19 Sun 13:50]
空にするとプロパティエディタはtextプロパティをnilに設定しようとする。
textのtextプロパティは属性ではなくinner-text。
(edraw-svg-text-set-text element text)はtextがstringpの時以外は何もしない。
stringpの時はいったん全ての子孫を削除してからtextを子ノードとして追加する。
stringpでなくてもとにかくいったんすべての子孫を削除するようにすることで解決。
** DONE ペーストや複製時のZ順序はどうなっているべきか
CLOSED: [2023-03-19 Sun 15:37]
edraw-create-shape-without-default関数にindex引数を追加しているときに気がついた。新しく生成した図形はどのZ順序にあるべきか。
+ペーストなら一番上？　新しい図形は一番上に追加することになっているし。+

複数ある場合に順番が滅茶苦茶だけど良いの？　選択順なのかな？
単体の複製時は元の順序の次になっていた方が良くない？

基本的には、最前面かまたは選択している図形の中で最前面より手前に挿入すべき。
複数ある場合は元の順序を維持するべき。
最低限元の順序を維持していれば、選択オブジェクトを最前面や最背面へ移動することは簡単。となるとデフォルトでは「現在選択している図形」の前にペーストするのが良さそう。選択が無ければ最前面。

とにかくコピー時にshape-descriptorのリスト内が順番通りになっていなければ話にならない。

関係する操作:
- edraw-copy-selected-shapes : ソートする
- edraw-shape-from-shape-descriptor-list : index引数を追加する
  呼び出す物:
  - edraw-paste : 選択している図形の一つ前にペーストする。選択が無ければ最前面。
  - edraw-create-selected-custom-shapes (今回とは無関係)
- edraw-clone : 複製元の一つ手前に生成する
  呼び出す物:
  - edraw-duplicate-and-select
  - edraw-split-path-at (pathを分割して出来るpathの順序に影響)
** DONE エディタ全体の拡大率を設定できるようにする
CLOSED: [2023-03-19 Sun 22:39]
環境によってはimage-scaling-factorをいじらず、エディタだけ若干大きくしたいことがある。
変数edraw-editor-image-scaling-factorを追加して、nilの時はimage-scaling-factorを使用し、数値の時はそれを使う。
** DONE カラーピッカーで:color-name-schemeオプションが効かないのを直す
CLOSED: [2023-03-19 Sun 23:13]
letでedraw-color-name-schemeに束縛して、同じ場所でedraw-color-from-stringを呼び出している。let*にするかletを分けるかすべき。
** DONE プロパティエディタやシェイプピッカーをフレーム表示できるようにする
CLOSED: [2023-03-25 Sat 12:29]
条件:
- 別フレームに表示できるようにする。
- 操作中にフレームにしたりウィンドウに戻したり出来るようにする。
- 最後に表示したフレームの状態を記憶して、再びフレームを表示したときに復元する。
- ウィンドウに戻したとしてもフレームの状態は保持する。

独立したフレームで任意の位置に固定したい。フラフラ動かれると困る。
child frameはおそらく適切ではない。フレームによってキャンバスが隠れてしまうから。

結構大がかりな変更になる。

1. edraw-property-editor-open内の処理を整理する。
   バッファの取得・作成、オブジェクトの作成、内容の作成、オープン。
2. edraw-buffer-displayクラスを作る。
   オープンの時、frame-modeならフレームを作成し、そうでないならウィンドウを作成(いままで通り)する。
3. 切り替えUIを作る。
4. 状態をファイルにセーブする。

プロパティエディタは右クリックでメニューを表示する。そこにフレーム操作を加える。
** DONE 図形クラスを拡張可能にする
CLOSED: [2023-03-25 Sat 19:14]
SVGに無い新しい図形を定義できるようにする。

data-edraw-type=属性によって、生成するオブジェクトを切り替えられるようにする。もちろん指定が無ければタグ名をtypeにして生成する。

例えば <path data-edraw-type="edraw-star" d="..." /> で edraw-shape-star クラスのオブジェクトを生成する。頂点数(?)プロパティと半径プロパティがあって、それを変更すると自動的にd=が再計算されるというような。

図形タイプリスト(edraw-shape-types)を作成する。タイプ毎にSVGノードの作成(:create-element)とSVG→オブジェクト変換(:from-element)を定義する。

tagという表記を使っている部分を確認して可能な限りtypeに置き換える。
** DONE 手書きツールを改善する
CLOSED: [2023-03-27 Mon 20:33]
もっと点の数を減らしたい。
** DONE 選択ツール 図形をM+ドラッグで複製しつつ平行移動する
CLOSED: [2023-03-28 Tue 15:26]
+Ctrl+の方がいい？+ Ctrl+は複数選択で使うので。
** DONE 選択図形の複製機能を追加する
CLOSED: [2023-03-28 Tue 15:55]
コンテキストメニューにDuplicateを追加する。
** DONE SHIFT+ドラッグで水平垂直45度移動に限定する
CLOSED: [2023-03-28 Tue 21:46]
最初にSHIFTが押されていれば分かるが、それ以降のmodifierの変化は分からない。
S-mouse-movementが来たりは *しない* 。現在のキー状態を直接取得する方法も無い。
read-eventで何かキーが押されたらモードを切り替えるというようなことなら出来る？
とりあえずS-down-mouse-1、つまりSHIFTを最初に押しているときだけ45度単位移動にする。
また、rect, ellipse, image, customツールはSHIFTが押されている場合は正方形に限定する。
